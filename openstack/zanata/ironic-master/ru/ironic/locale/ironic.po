# Lucas Palm <lapalm@us.ibm.com>, 2015. #zanata
# OpenStack Infra <zanata@openstack.org>, 2015. #zanata
msgid ""
msgstr ""
"Project-Id-Version: ironic VERSION\n"
"Report-Msgid-Bugs-To: https://bugs.launchpad.net/openstack-i18n/\n"
"POT-Creation-Date: 2021-08-10 23:58+0000\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: 2015-09-21 03:22+0000\n"
"Last-Translator: Copied by Zanata <copied-by-zanata@zanata.org>\n"
"Language-Team: Russian\n"
"Language: ru\n"
"X-Generator: Zanata 4.3.3\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"

#: ironic/api/controllers/base.py:72
#, python-format
msgid "Invalid value for %s header"
msgstr "Недопустимое значение для заголовка %s"

#: ironic/api/controllers/v1/__init__.py:222
#, python-format
msgid ""
"Mutually exclusive versions requested. Version %(ver)s requested but not "
"supported by this service. The supported version range is: [%(min)s, "
"%(max)s]."
msgstr ""
"Запрошены взаимно исключающие версии. Запрошена версия %(ver)s, но она не "
"поддерживается этой службой. Диапазон поддерживаемых версий: [%(min)s, "
"%(max)s]."

#: ironic/api/controllers/v1/__init__.py:231
#, python-format
msgid ""
"Version %(ver)s was requested but the minor version is not supported by this "
"service. The supported version range is: [%(min)s, %(max)s]."
msgstr ""
"Запрошена версия %(ver)s, однако младшая версия не поддерживается этой "
"службой. Диапазон поддерживаемых версий: [%(min)s, %(max)s]."

#: ironic/api/controllers/v1/allocation.py:129
#: ironic/api/controllers/v1/allocation.py:544
msgid "The API version does not allow allocations"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:161
#: ironic/api/controllers/v1/chassis.py:123
#: ironic/api/controllers/v1/conductor.py:82
#: ironic/api/controllers/v1/deploy_template.py:199
#: ironic/api/controllers/v1/node.py:1845 ironic/api/controllers/v1/port.py:250
#: ironic/api/controllers/v1/portgroup.py:192
#: ironic/api/controllers/v1/volume_connector.py:126
#: ironic/api/controllers/v1/volume_target.py:149
#, python-format
msgid "The sort_key value %(key)s is an invalid field for sorting"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:350
#, python-format
msgid "Cannot create allocation with invalid name '%(name)s'"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:371
#, python-format
msgid ""
"Cannot create allocation with an owner Project ID value %(req_owner)s not "
"matching the requestor Project ID %(project)s. Policy baremetal:allocation:"
"create_restricted is required for this capability."
msgstr ""

#: ironic/api/controllers/v1/allocation.py:398
msgid "Cannot set node when creating an allocation in this API version"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:406
msgid "The resource_class field is mandatory when not backfilling"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:477
msgid "The API version does not allow updating allocations"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:487
#, python-format
msgid "Cannot update allocation with invalid name '%(name)s'"
msgstr ""

#: ironic/api/controllers/v1/allocation.py:567
#: ironic/api/controllers/v1/allocation.py:596
#, python-format
msgid "Allocation for node %s was not found"
msgstr ""

#: ironic/api/controllers/v1/deploy_template.py:76
#, python-format
msgid ""
"Duplicate deploy steps. A deploy template cannot have multiple deploy steps "
"with the same interface and step. Duplicates: %s"
msgstr ""

#: ironic/api/controllers/v1/deploy_template.py:158
msgid "The API version does not allow deploy templates"
msgstr ""

#: ironic/api/controllers/v1/driver.py:308
msgid "\"type\" filter must be one of \"classic\" or \"dynamic\", if specified."
msgstr ""

#: ironic/api/controllers/v1/node.py:371
#, python-format
msgid "Invalid network_data: %s "
msgstr ""

#: ironic/api/controllers/v1/node.py:483
#, python-format
msgid "Malformed indicator name \"%s\""
msgstr ""

#: ironic/api/controllers/v1/node.py:491
#, python-format
msgid "Missing indicator name \"%s\""
msgstr ""

#: ironic/api/controllers/v1/node.py:803
msgid "timeout has to be positive integer"
msgstr ""

#: ironic/api/controllers/v1/node.py:847
#, python-format
msgid ""
"A non-empty \"rescue_password\" is required when setting target provision "
"state to %s"
msgstr ""

#: ironic/api/controllers/v1/node.py:862
#, python-format
msgid "\"clean_steps\" is required when setting target provision state to %s"
msgstr ""

#: ironic/api/controllers/v1/node.py:874
#, python-format
msgid "The requested action \"%(action)s\" could not be understood."
msgstr "Не удалось распознать запрошенное действие \"%(action)s\"."

#: ironic/api/controllers/v1/node.py:966 ironic/conductor/deployments.py:48
msgid "provisioning"
msgstr "предоставление ресурсов"

#: ironic/api/controllers/v1/node.py:991
#, python-format
msgid "\"clean_steps\" is only valid when setting target provision state to %s"
msgstr ""

#: ironic/api/controllers/v1/node.py:1000
#, python-format
msgid ""
"\"rescue_password\" is only valid when setting target provision state to %s"
msgstr ""

#: ironic/api/controllers/v1/node.py:1055
#, python-format
msgid "Invalid %s_steps: %s"
msgstr ""

#: ironic/api/controllers/v1/node.py:1144
msgid ""
"A single node trait may be added via PUT /v1/nodes/<node identifier>/traits/"
"<trait> with no body, or all node traits may be replaced via PUT /v1/nodes/"
"<node identifier>/traits with the list of traits specified in the request "
"body."
msgstr ""

#: ironic/api/controllers/v1/node.py:1155
msgid "No body should be provided when adding a trait"
msgstr ""

#: ironic/api/controllers/v1/node.py:1719
msgid "Cannot specify both port_uuid and portgroup_uuid"
msgstr ""

#: ironic/api/controllers/v1/node.py:1838
msgid "Chassis id not specified."
msgstr "Не указан ИД шасси."

#: ironic/api/controllers/v1/node.py:1998
#, python-format
msgid ""
"Node %s can not update the driver while the console is enabled. Please stop "
"the console first."
msgstr ""
"Узел %s не может изменить драйвер, когда включена консоль. Сначала закройте "
"консоль. "

#: ironic/api/controllers/v1/node.py:2263
#, python-format
msgid "Cannot create node with invalid name '%(name)s'"
msgstr ""

#: ironic/api/controllers/v1/node.py:2308
msgid ""
"Cannot update node traits via node patch. Node traits should be updated via "
"the node traits API."
msgstr ""

#: ironic/api/controllers/v1/node.py:2314
msgid ""
"The reset_interfaces parameter can only be used when changing the node's "
"driver."
msgstr ""

#: ironic/api/controllers/v1/node.py:2320
#, python-format
msgid "Cannot update node with description exceeding %s characters"
msgstr ""

#: ironic/api/controllers/v1/node.py:2413
#, python-format
msgid "Node %s can not be updated while a state transition is in progress."
msgstr "Невозможно обновить узел %s во время изменения состояний."

#: ironic/api/controllers/v1/node.py:2419
#, python-format
msgid "Cannot update node \"%(node)s\" while it is in state \"%(state)s\"."
msgstr ""

#: ironic/api/controllers/v1/node.py:2434
#, python-format
msgid ""
"Cannot update owner of node \"%(node)s\" while it is in state \"%(state)s\"."
msgstr ""

#: ironic/api/controllers/v1/node.py:2448
#, python-format
msgid ""
"Cannot update owner of node \"%(node)s\" while it is allocated to an "
"allocation with an  owner."
msgstr ""

#: ironic/api/controllers/v1/node.py:2458
#, python-format
msgid "Node %s: Cannot change name to invalid name "
msgstr ""

#: ironic/api/controllers/v1/notification_utils.py:80
msgid "is not defined"
msgstr ""

#: ironic/api/controllers/v1/notification_utils.py:81
#, python-format
msgid "Unsupported resource: %s"
msgstr ""

#: ironic/api/controllers/v1/notification_utils.py:96
#, python-format
msgid ""
"Failed to send baremetal.%(resource)s.%(action)s.%(status)s notification for "
"%(resource)s %(uuid)s with level %(level)s, notification method "
"%(notification_method)s, payload method %(payload_method)s, error %(error)s"
msgstr ""

#: ironic/api/controllers/v1/port.py:547
msgid "Port can not be added to a portgroup belonging to a different node."
msgstr ""

#: ironic/api/controllers/v1/port.py:577
#, python-format
msgid ""
"Port group %s doesn't support standalone ports. This port cannot be created "
"as a member of that portgroup as the port's 'pxe_enabled' field was set to "
"True."
msgstr ""

#: ironic/api/controllers/v1/port.py:693
#, python-format
msgid ""
"Cannot update port \"%(port)s\" on \"%(node)s\" while it is in state "
"\"%(state)s\"."
msgstr ""

#: ironic/api/controllers/v1/portgroup.py:410
#, python-format
msgid "Cannot create portgroup with invalid name '%(name)s'"
msgstr ""

#: ironic/api/controllers/v1/portgroup.py:465
#, python-format
msgid "Portgroup %(portgroup)s: Cannot change name to invalid name '%(name)s'"
msgstr ""

#: ironic/api/controllers/v1/portgroup.py:483
msgid "'mode' is a mandatory attribute and can not be removed"
msgstr ""

#: ironic/api/controllers/v1/portgroup.py:507
#, python-format
msgid ""
"Cannot update portgroup \"%(portgroup)s\" on node \"%(node)s\" while it is "
"in state \"%(state)s\"."
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:194
msgid "Field \"agent_version\" not recognised"
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:199
msgid "Fields \"agent_status\" and \"agent_status_message\" not recognised."
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:208
msgid "Field \"agent_verify_ca\" not recognised in this version"
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:221
msgid "Detected change in ramdisk provided \"callback_url\""
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:229
msgid "Agent token is required for heartbeat processing."
msgstr ""

#: ironic/api/controllers/v1/ramdisk.py:238
#, python-format
msgid "Agent status is invalid. Valid states are %s."
msgstr ""

#: ironic/api/controllers/v1/utils.py:382
#, python-format
msgid "Cannot patch %s. Only the following can be updated: %s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:413
msgid "Limit must be positive"
msgstr "Ограничение должно быть положительным"

#: ironic/api/controllers/v1/utils.py:420
#, python-format
msgid "Invalid sort direction: %s. Acceptable values are 'asc' or 'desc'"
msgstr ""
"Неправильное значение сортировки: %s. Допустимые значения: 'asc' и 'desc'"

#: ironic/api/controllers/v1/utils.py:442
#, python-format
msgid "Adding a new attribute (%s) to the root of the resource is not allowed"
msgstr ""

#: ironic/api/controllers/v1/utils.py:724
msgid "Method not specified"
msgstr "Метод не указан"

#: ironic/api/controllers/v1/utils.py:762
#, python-format
msgid "Field(s) \"%s\" are not valid"
msgstr ""

#: ironic/api/controllers/v1/utils.py:870
#, python-format
msgid "Provision state \"%s\" is not valid"
msgstr ""

#: ironic/api/controllers/v1/utils.py:880
#: ironic/api/controllers/v1/utils.py:894
#: ironic/api/controllers/v1/utils.py:907
#: ironic/api/controllers/v1/utils.py:920
#: ironic/api/controllers/v1/utils.py:1011
#: ironic/api/controllers/v1/utils.py:1031
#: ironic/api/controllers/v1/utils.py:1045
#: ironic/api/controllers/v1/utils.py:1059
#: ironic/api/controllers/v1/utils.py:1397
#: ironic/api/controllers/v1/utils.py:1921
#, python-format
msgid ""
"Request not acceptable. The minimal required API version should be %(base)s."
"%(opr)s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:961
#, python-format
msgid ""
"Adding a config drive is only supported when setting provision state to %s"
msgstr ""
"Добавление накопителя конфигурации поддерживается только для состояния "
"предоставления ресурсов %s"

#: ironic/api/controllers/v1/utils.py:969
#, python-format
msgid "Invalid configdrive format: %s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:975
#, python-format
msgid ""
"Providing a JSON object for configdrive is only supported starting with API "
"version %(base)s.%(opr)s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:983
#, python-format
msgid ""
"Providing vendor_data in configdrive is only supported starting with API "
"version %(base)s.%(opr)s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:998
msgid ""
"Invalid configdrive format: it is neither a JSON, nor a URL, nor a base64 "
"string"
msgstr ""

#: ironic/api/controllers/v1/utils.py:1017
#, python-format
msgid ""
"Unrecognized fault \"%(fault)s\" is specified, allowed faults are "
"%(valid_faults)s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:1929
#, python-format
msgid ""
"\"deploy_steps\" is only valid when setting target provision state to %s or "
"%s"
msgstr ""

#: ironic/api/controllers/v1/utils.py:1940
msgid "disable_ramdisk is not acceptable in this API version"
msgstr ""

#: ironic/api/controllers/v1/utils.py:1943
msgid "disable_ramdisk is supported only with manual cleaning"
msgstr ""

#: ironic/api/controllers/v1/volume_connector.py:193
#: ironic/api/controllers/v1/volume_target.py:220
msgid "Can't fetch a subset of fields with 'detail' set"
msgstr ""

#: ironic/api/controllers/v1/volume_connector.py:330
#: ironic/api/controllers/v1/volume_target.py:360
#, python-format
msgid "Expected a UUID for node_uuid, but received %(uuid)s."
msgstr ""

#: ironic/api/middleware/auth_public_routes.py:42
#, python-format
msgid "Cannot compile public API routes: %s"
msgstr "Не удалось скомпилировать общие маршруты API: %s"

#: ironic/api/middleware/parsable_error.py:48
#, python-format
msgid "ErrorDocumentMiddleware received an invalid status %s"
msgstr "ErrorDocumentMiddleware получило недопустимое состояние %s"

#: ironic/cmd/dbsync.py:100
#, python-format
msgid ""
"The database is not compatible with this release of ironic (%s). Please run "
"\"ironic-dbsync online_data_migrations\" using the previous release.\n"
msgstr ""

#: ironic/cmd/dbsync.py:106
#, python-format
msgid ""
"The database version is not compatible with this release of ironic (%s). "
"This can happen if you are attempting to upgrade from a version older than "
"the previous release (skip versions upgrade). This is an unsupported upgrade "
"method. Please run \"ironic-dbsync upgrade\" using the previous releases for "
"a fast-forward upgrade.\n"
msgstr ""

#: ironic/cmd/dbsync.py:180
#, python-format
msgid "Error while running %(migration)s: %(err)s."
msgstr ""

#: ironic/cmd/dbsync.py:185
#, python-format
msgid "%(migration)s() migrated %(done)i of %(total)i objects."
msgstr ""

#: ironic/cmd/dbsync.py:233
#, python-format
msgid "Malformed option %s"
msgstr ""

#: ironic/cmd/dbsync.py:242
#, python-format
msgid "Running batches of %i until migrations have been completed."
msgstr ""

#: ironic/cmd/dbsync.py:247 ironic/cmd/dbsync.py:258
msgid "Data migrations have completed."
msgstr ""

#: ironic/cmd/dbsync.py:251
msgid "\"max-count\" must be a positive value."
msgstr ""

#: ironic/cmd/dbsync.py:261
msgid "Data migrations have not completed. Please re-run."
msgstr ""

#: ironic/cmd/dbsync.py:270
msgid ""
"Upgrade the database schema to the latest version. Optionally, use --"
"revision to specify an alembic revision string to upgrade to. It returns 2 "
"(error) if the database is not compatible with this version. If this "
"happens, the 'ironic-dbsync online_data_migrations' command should be run "
"using the previous version of ironic, before upgrading and running this "
"command."
msgstr ""

#: ironic/cmd/dbsync.py:287
msgid ""
"Create a new alembic revision. Use --message to set the message string."
msgstr ""

#: ironic/cmd/dbsync.py:295
msgid "Print the current version information and exit."
msgstr ""

#: ironic/cmd/dbsync.py:300
msgid "Create the database schema."
msgstr ""

#: ironic/cmd/dbsync.py:305
msgid ""
"Perform online data migrations for the release. If --max-count is specified, "
"at most max-count objects will be migrated. If not specified, all objects "
"will be migrated (in batches to avoid locking the database for long periods "
"of time). The command returns code 0 (success) after migrations are finished "
"or there are no data to migrate. It returns code 1 (error) if there are "
"still pending objects to be migrated. Before upgrading to a newer release, "
"this command must be run until code 0 is returned. It returns 127 (error) if "
"max-count is < 1. It returns 2 (error) if the database is not compatible "
"with this release. If this happens, this command should be run using the "
"previous release of ironic, before upgrading and running this command."
msgstr ""

#: ironic/cmd/dbsync.py:322
msgid ""
"Maximum number of objects to migrate. If unspecified, all objects are "
"migrated."
msgstr ""

#: ironic/cmd/dbsync.py:327
msgid ""
"Options to pass to the migrations in the form of <migration name>.<option>="
"<value>"
msgstr ""

#: ironic/cmd/dbsync.py:335
msgid "Available commands"
msgstr "Доступные команды"

#: ironic/cmd/status.py:97
msgid "Object versions"
msgstr ""

#: ironic/cmd/status.py:98
msgid "Database Index Status"
msgstr ""

#: ironic/cmd/status.py:100
msgid "Policy File JSON to YAML Migration"
msgstr ""

#: ironic/common/args.py:37
#, python-format
msgid "Expected string for %s: %s"
msgstr ""

#: ironic/common/args.py:56
#, python-format
msgid "Invalid %s: %s"
msgstr ""

#: ironic/common/args.py:71
#, python-format
msgid "Expected UUID for %s: %s"
msgstr ""

#: ironic/common/args.py:87
#, python-format
msgid "Expected name for %s: %s"
msgstr ""

#: ironic/common/args.py:105
#, python-format
msgid "Expected UUID or name for %s: %s"
msgstr ""

#: ironic/common/args.py:143
#, python-format
msgid "Expected an integer for %s: %s"
msgstr ""

#: ironic/common/args.py:160
#, python-format
msgid "Expected valid MAC address for %s: %s"
msgstr ""

#: ironic/common/args.py:219
#, python-format
msgid "Schema error for %s: %s"
msgstr ""

#: ironic/common/args.py:264
#, python-format
msgid "Expected types %s for %s: %s"
msgstr ""

#: ironic/common/args.py:333
#, python-format
msgid "Unexpected arguments: %s"
msgstr ""

#: ironic/common/args.py:358
#, python-format
msgid "Missing mandatory parameter: %s"
msgstr ""

#: ironic/common/cinder.py:149
#, python-format
msgid ""
"Failed to initialize cinder client for operations on node %(uuid)s: %(err)s"
msgstr ""

#: ironic/common/cinder.py:248
#, python-format
msgid "Failed to get volume %(vol_id)s from cinder for node %(uuid)s: %(err)s"
msgstr ""

#: ironic/common/cinder.py:270
#, python-format
msgid "Failed to reserve volume %(vol_id)s for node %(node)s: %(err)s)"
msgstr ""

#: ironic/common/cinder.py:281
#, python-format
msgid ""
"Failed to initialize connection for volume %(vol_id)s to node %(node)s: "
"%(err)s"
msgstr ""

#: ironic/common/cinder.py:309
#, python-format
msgid ""
"Failed to inform cinder that the attachment for volume %(vol_id)s for node "
"%(node)s has been completed: %(err)s"
msgstr ""

#: ironic/common/cinder.py:377
#, python-format
msgid "Failed to get volume %(vol_id)s from cinder for node %(node)s: %(err)s"
msgstr ""

#: ironic/common/cinder.py:394
#, python-format
msgid ""
"Failed to request detach for volume %(vol_id)s from cinder for node %(node)s:"
" %(err)s"
msgstr ""

#: ironic/common/cinder.py:405
#, python-format
msgid "Failed to detach volume %(vol_id)s from node %(node)s: %(err)s"
msgstr ""

#: ironic/common/cinder.py:422
#, python-format
msgid ""
"Failed to inform cinder that the detachment for volume %(vol_id)s from node "
"%(node)s has been completed: %(err)s"
msgstr ""

#: ironic/common/driver_factory.py:148 ironic/common/driver_factory.py:173
#, python-format
msgid " node %s with"
msgstr ""

#: ironic/common/exception.py:30
msgid "Not authorized."
msgstr "Не авторизировано."

#: ironic/common/exception.py:35
msgid "Operation not permitted."
msgstr "Операция запрещена."

#: ironic/common/exception.py:39
msgid "Unacceptable parameters."
msgstr "Недопустимые параметры."

#: ironic/common/exception.py:44
msgid "Conflict."
msgstr "Конфликт доступа."

#: ironic/common/exception.py:49
msgid "Resource temporarily unavailable, please retry."
msgstr "Ресурс временно недоступен, попробуйте повторить."

#: ironic/common/exception.py:56
msgid "Request not acceptable."
msgstr "Запрос не принимается."

#: ironic/common/exception.py:61
msgid "Invalid resource state."
msgstr "Неверное состояние ресурса."

#: ironic/common/exception.py:65
#, python-format
msgid "A node with UUID %(uuid)s already exists."
msgstr "Узел с UUID %(uuid)s уже существует."

#: ironic/common/exception.py:69
#, python-format
msgid "A port with MAC address %(mac)s already exists."
msgstr "Порт с MAC-адресом %(mac)s уже существует."

#: ironic/common/exception.py:73
#, python-format
msgid "A chassis with UUID %(uuid)s already exists."
msgstr "Шасси с UUID %(uuid)s уже существуют."

#: ironic/common/exception.py:77
#, python-format
msgid "A port with UUID %(uuid)s already exists."
msgstr "Порт с UUID %(uuid)s уже существует."

#: ironic/common/exception.py:81
#, python-format
msgid "A port with name %(name)s already exists."
msgstr ""

#: ironic/common/exception.py:85
#, python-format
msgid "A portgroup with UUID %(uuid)s already exists."
msgstr ""

#: ironic/common/exception.py:89
#, python-format
msgid "A portgroup with name %(name)s already exists."
msgstr ""

#: ironic/common/exception.py:93
#, python-format
msgid "A portgroup with MAC address %(mac)s already exists."
msgstr ""

#: ironic/common/exception.py:97
#, python-format
msgid ""
"Instance %(instance_uuid)s is already associated with a node, it cannot be "
"associated with this other node %(node)s"
msgstr ""
"Экземпляр %(instance_uuid)s уже связан с узлом, он не может быть связан с "
"этим другим узлом %(node)s"

#: ironic/common/exception.py:102
#, python-format
msgid "A node with name %(name)s already exists."
msgstr "Узел с именем %(name)s уже существует."

#: ironic/common/exception.py:106
#, python-format
msgid "A volume connector with UUID %(uuid)s already exists."
msgstr ""

#: ironic/common/exception.py:110
#, python-format
msgid ""
"A volume connector with type %(type)s and connector ID %(connector_id)s "
"already exists."
msgstr ""

#: ironic/common/exception.py:115
#, python-format
msgid "A volume target with UUID %(uuid)s already exists."
msgstr ""

#: ironic/common/exception.py:119
#, python-format
msgid ""
"A volume target with boot index '%(boot_index)s' for the same node already "
"exists."
msgstr ""

#: ironic/common/exception.py:124
#, python-format
msgid ""
"Unable to attach VIF because VIF %(vif)s is already attached to Ironic "
"%(object_type)s %(object_uuid)s"
msgstr ""

#: ironic/common/exception.py:129
#, python-format
msgid "Unable to attach VIF %(vif)s, not enough free physical ports."
msgstr ""

#: ironic/common/exception.py:134
#, python-format
msgid ""
"Unable to detach VIF %(vif)s from node %(node)s because it is not attached "
"to it."
msgstr ""

#: ironic/common/exception.py:139
#, python-format
msgid "Expected a UUID but received %(uuid)s."
msgstr ""

#: ironic/common/exception.py:143
#, python-format
msgid "Expected a logical name or UUID but received %(name)s."
msgstr ""

#: ironic/common/exception.py:147
#, python-format
msgid "Expected a logical name but received %(name)s."
msgstr "Ожидалось логическое имя, получено имя %(name)s."

#: ironic/common/exception.py:151
#, python-format
msgid "Expected a conductor group but received %(group)s."
msgstr ""

#: ironic/common/exception.py:155
#, python-format
msgid "Expected a UUID or int but received %(identity)s."
msgstr ""

#: ironic/common/exception.py:159
#, python-format
msgid "Expected a MAC address but received %(mac)s."
msgstr "Ожидался MAC-адрес, но получен %(mac)s."

#: ironic/common/exception.py:163
#, python-format
msgid ""
"Expected a MAC address or OpenFlow datapath ID but received %(switch_id)s."
msgstr ""

#: ironic/common/exception.py:168
#, python-format
msgid "Expected an OpenFlow datapath ID but received %(datapath_id)s."
msgstr ""

#: ironic/common/exception.py:173
#, python-format
msgid ""
"The requested action \"%(action)s\" can not be performed on node "
"\"%(node)s\" while it is in state \"%(state)s\"."
msgstr ""
"Не удалось выполнить запрошенное действие \"%(action)s\" на узле "
"\"%(node)s\", пока он находился в состоянии \"%(state)s\"."

#: ironic/common/exception.py:178
#, python-format
msgid "Couldn't apply patch '%(patch)s'. Reason: %(reason)s"
msgstr "Не удалось применить исправление '%(patch)s'. Причина: %(reason)s"

#: ironic/common/exception.py:182
#, python-format
msgid "Failed to deploy instance: %(reason)s"
msgstr "Не удалось развернуть экземпляр: %(reason)s"

#: ironic/common/exception.py:186 ironic/common/exception.py:190
#, python-format
msgid "Image %(image_id)s is unacceptable: %(reason)s"
msgstr "Образ %(image_id)s недопустим: %(reason)s"

#: ironic/common/exception.py:204
msgid "Resource already exists."
msgstr "Ресурс уже существует."

#: ironic/common/exception.py:208
msgid "Resource could not be found."
msgstr "Ресурс не может быть найден."

#: ironic/common/exception.py:213
#, python-format
msgid ""
"Failed to load DHCP provider %(dhcp_provider_name)s, reason: %(reason)s"
msgstr ""

#: ironic/common/exception.py:222
#, python-format
msgid ""
"Could not find the following driver(s) or hardware type(s): %(driver_name)s."
msgstr ""

#: ironic/common/exception.py:227
#, python-format
msgid ""
"Could not find the following items in the '%(entrypoint)s' entrypoint: "
"%(names)s."
msgstr ""

#: ironic/common/exception.py:232
#, python-format
msgid ""
"Could not find the following interface in the '%(entrypoint)s' entrypoint: "
"%(iface)s. Valid interfaces are %(valid)s."
msgstr ""

#: ironic/common/exception.py:238
#, python-format
msgid ""
"%(interface_type)s interface implementation '%(interface_impl)s' is not "
"supported by hardware type %(hardware_type)s."
msgstr ""

#: ironic/common/exception.py:247
#, python-format
msgid ""
"For%(node_info)s hardware type '%(driver)s', no default value found for "
"%(interface_type)s interface."
msgstr ""

#: ironic/common/exception.py:252
#, python-format
msgid "Image %(image_id)s could not be found."
msgstr "Образ %(image_id)s не найден."

#: ironic/common/exception.py:256
#, python-format
msgid "No valid host was found. Reason: %(reason)s"
msgstr "Не найден допустимый хост. Причина: %(reason)s"

#: ironic/common/exception.py:260
#, python-format
msgid "Instance %(instance)s could not be found."
msgstr "Не удалось найти экземпляр %(instance)s."

#: ironic/common/exception.py:264
#, python-format
msgid "Error with file %(file_name)s. Reason: %(reason)s"
msgstr ""

#: ironic/common/exception.py:268
#, python-format
msgid "Node %(node)s could not be found."
msgstr "Узел %(node)s не найден."

#: ironic/common/exception.py:272
#, python-format
msgid "Portgroup %(portgroup)s could not be found."
msgstr ""

#: ironic/common/exception.py:276
#, python-format
msgid ""
"Cannot complete the requested action because portgroup %(portgroup)s "
"contains ports."
msgstr ""

#: ironic/common/exception.py:281
#, python-format
msgid "Node %(node)s is associated with instance %(instance)s."
msgstr "Узел %(node)s связан с экземпляром %(instance)s."

#: ironic/common/exception.py:285
#, python-format
msgid "Port %(port)s could not be found."
msgstr "Не удалось найти порт %(port)s."

#: ironic/common/exception.py:289
#, python-format
msgid "Update DHCP options on port: %(port_id)s failed."
msgstr "Не удалось обновить опции DHCP для порта %(port_id)s."

#: ironic/common/exception.py:293
#, python-format
msgid "Clean up DHCP options on node: %(node)s failed."
msgstr ""

#: ironic/common/exception.py:297
#, python-format
msgid "Retrieve IP address on port: %(port_id)s failed."
msgstr "Не удалось получить IP-адрес для порта %(port_id)s."

#: ironic/common/exception.py:301
#, python-format
msgid "Invalid IPv4 address %(ip_address)s."
msgstr "Недопустимый адрес IPv4 %(ip_address)s."

#: ironic/common/exception.py:305
#, python-format
msgid "Invalid IP address %(ip_address)s."
msgstr ""

#: ironic/common/exception.py:309
#, python-format
msgid "Update MAC address on port: %(port_id)s failed."
msgstr "Не удалось обновить MAC-адрес для порта %(port_id)s."

#: ironic/common/exception.py:313
#, python-format
msgid "Chassis %(chassis)s could not be found."
msgstr "Не удалось найти шасси %(chassis)s."

#: ironic/common/exception.py:317
#, python-format
msgid "Volume connector %(connector)s could not be found."
msgstr ""

#: ironic/common/exception.py:321
#, python-format
msgid "Volume target %(target)s could not be found."
msgstr ""

#: ironic/common/exception.py:325
#, python-format
msgid ""
"Conductor %(conductor)s cannot be started because no hardware types were "
"loaded."
msgstr ""

#: ironic/common/exception.py:330
#, python-format
msgid "Conductor %(conductor)s could not be found."
msgstr "Не удалось найти проводник %(conductor)s."

#: ironic/common/exception.py:334
#, python-format
msgid "Conductor %(conductor)s already registered."
msgstr "Проводник %(conductor)s уже зарегистрирован."

#: ironic/common/exception.py:338
#, python-format
msgid ""
"Duplication detected for hardware_type, interface_type and interface "
"combinations for this conductor while registering the row %(row)s"
msgstr ""

#: ironic/common/exception.py:344
#, python-format
msgid "Failed to set node power state to %(pstate)s."
msgstr "Не удалось присвоить состояние питания узла %(pstate)s."

#: ironic/common/exception.py:348
msgid ""
"An exclusive lock is required, but the current context has a shared lock."
msgstr ""
"Требуется исключительная блокировка, но текущий контекст содержит общую "
"блокировку."

#: ironic/common/exception.py:353
#, python-format
msgid "Failed to toggle maintenance-mode flag for node %(node)s: %(reason)s"
msgstr ""
"Не удалось переключить флаг режима обслуживания для узла %(node)s: "
"%(reason)s"

#: ironic/common/exception.py:358
#, python-format
msgid "Console access is not enabled on node %(node)s"
msgstr "На узле %(node)s не включен доступ к консоли"

#: ironic/common/exception.py:362
#, python-format
msgid ""
"The %(op)s operation can't be performed on node %(node)s because it's in "
"maintenance mode."
msgstr ""
"Не удается выполнить операцию %(op)s на узле %(node)s, так как он находится "
"в режиме обслуживания."

#: ironic/common/exception.py:367
#, python-format
msgid ""
"Cannot complete the requested action because chassis %(chassis)s contains "
"nodes."
msgstr ""
"Не удается выполнить запрошенное действие, так как шасси %(chassis)s "
"содержат узлы."

#: ironic/common/exception.py:372
#, python-format
msgid "IPMI call failed: %(cmd)s."
msgstr "Вызов IPMI не выполнен: %(cmd)s."

#: ironic/common/exception.py:376
#, python-format
msgid ""
"Driver %(driver)s does not support %(extension)s (disabled or not "
"implemented)."
msgstr ""
"Драйвер %(driver)s не поддерживает %(extension)s (выключено или не "
"реализовано)."

#: ironic/common/exception.py:381
#, python-format
msgid "Connection to glance endpoint %(endpoint)s failed: %(reason)s"
msgstr ""

#: ironic/common/exception.py:386
#, python-format
msgid "Not authorized for image %(image_id)s."
msgstr "Нет доступа к образу %(image_id)s."

#: ironic/common/exception.py:390
#, python-format
msgid "Invalid image href %(image_href)s."
msgstr "Недопустимая ссылка на образ %(image_href)s."

#: ironic/common/exception.py:394
#, python-format
msgid "Validation of image href %(image_href)s failed, reason: %(reason)s"
msgstr "Сбой проверки href %(image_href)s образа. Причина: %(reason)s"

#: ironic/common/exception.py:399
#, python-format
msgid "Failed to download image %(image_href)s, reason: %(reason)s"
msgstr "Не удалось загрузить образ %(image_href)s. Причина: %(reason)s"

#: ironic/common/exception.py:403
msgid "Not authorized in Keystone."
msgstr "Нет авторизации в Keystone."

#: ironic/common/exception.py:411
#, python-format
msgid ""
"Service type %(service_type)s with endpoint type %(endpoint_type)s not found "
"in keystone service catalog."
msgstr ""
"Тип службы %(service_type)s с типом конечной точки %(endpoint_type)s не "
"найден в каталоге служб keystone."

#: ironic/common/exception.py:416
msgid "Connection failed"
msgstr "Соединение не установлено"

#: ironic/common/exception.py:420
msgid "Requested OpenStack Images API is forbidden"
msgstr "Запрошенный API образов OpenStack запрещен"

#: ironic/common/exception.py:428
msgid "The provided endpoint is invalid"
msgstr "Указанная конечная точка недопустима"

#: ironic/common/exception.py:432
msgid "Unable to communicate with the server."
msgstr "Не удалось соединиться с сервером."

#: ironic/common/exception.py:436
#, python-format
msgid "Access was denied to the following resource: %(resource)s"
msgstr ""

#: ironic/common/exception.py:448
#, python-format
msgid "Could not find config at %(path)s"
msgstr "Невозможно найти конфигурацию по адресу %(path)s"

#: ironic/common/exception.py:452
#, python-format
msgid ""
"Node %(node)s is locked by host %(host)s, please retry after the current "
"operation is completed."
msgstr ""
"Узел %(node)s заблокирован хостом %(host)s, повторите операцию после "
"завершения текущей операции."

#: ironic/common/exception.py:457
#, python-format
msgid "Node %(node)s found not to be locked on release"
msgstr "Узел %(node)s не был заблокирован во время освобождения"

#: ironic/common/exception.py:461
msgid ""
"Requested action cannot be performed due to lack of free conductor workers."
msgstr ""
"Запрошенное действие невозможно выполнить из-за утечки обработчиков "
"проводников."

#: ironic/common/exception.py:471
#, python-format
msgid "Invalid configuration file. %(error_msg)s"
msgstr "Недопустимый файл конфигурации. %(error_msg)s"

#: ironic/common/exception.py:475
#, python-format
msgid ""
"Driver, hardware type or interface %(driver)s could not be loaded. Reason: "
"%(reason)s."
msgstr ""

#: ironic/common/exception.py:480
#, python-format
msgid "Runtime driver %(driver)s failure. Reason: %(reason)s."
msgstr ""

#: ironic/common/exception.py:488
#, python-format
msgid "Could not find pid in pid file %(pid_path)s"
msgstr "Не удалось найти pid в файле pid %(pid_path)s"

#: ironic/common/exception.py:492
#, python-format
msgid "Console subprocess failed to start. %(error)s"
msgstr "Не удалось запустить подпроцесс консоли. %(error)s"

#: ironic/common/exception.py:496
#, python-format
msgid "Failed to create the password file. %(error)s"
msgstr "Не удалось создать файл паролей. %(error)s"

#: ironic/common/exception.py:500
#, python-format
msgid "%(operation)s failed, error: %(error)s"
msgstr "Операция %(operation)s не выполнена, ошибка: %(error)s"

#: ironic/common/exception.py:504
#, python-format
msgid "%(operation)s not supported. error: %(error)s"
msgstr "%(operation)s не поддерживается. Ошибка: %(error)s"

#: ironic/common/exception.py:508
#, python-format
msgid "DRAC operation failed. Reason: %(error)s"
msgstr ""

#: ironic/common/exception.py:512
#, python-format
msgid "Failed to get sensor data for node %(node)s. Error: %(error)s"
msgstr ""
"Не удалось получить  данные датчика для узла %(node)s. Ошибка: %(error)s"

#: ironic/common/exception.py:517
#, python-format
msgid "Failed to parse sensor data for node %(node)s. Error: %(error)s"
msgstr ""
"Не удалось проанализировать данные датчика для узла %(node)s. Ошибка: "
"%(error)s"

#: ironic/common/exception.py:522
#, python-format
msgid ""
"Disk volume where '%(path)s' is located doesn't have enough disk space. "
"Required %(required)d MiB, only %(actual)d MiB available space present."
msgstr ""
"На дисковом томе, содержащем '%(path)s', отсутствует дисковая память. "
"Требуется %(required)d МБ, доступно только %(actual)d МБ."

#: ironic/common/exception.py:528
#, python-format
msgid "Creating %(image_type)s image failed: %(error)s"
msgstr "Создание образа %(image_type)s не выполнено: %(error)s"

#: ironic/common/exception.py:532
#, python-format
msgid "Swift operation '%(operation)s' failed: %(error)s"
msgstr "Операция Swift '%(operation)s' не выполнена: %(error)s"

#: ironic/common/exception.py:536
#, python-format
msgid ""
"Swift object %(obj)s from container %(container)s not found. Operation "
"'%(operation)s' failed."
msgstr ""

#: ironic/common/exception.py:541
#, python-format
msgid "SNMP operation '%(operation)s' failed: %(error)s"
msgstr "Операция SNMP '%(operation)s' не выполнена: %(error)s"

#: ironic/common/exception.py:545
#, python-format
msgid "Failed to create a file system. File system %(fs)s is not supported."
msgstr ""
"Не удалось создать файловую систему. Файловая система %(fs)s не "
"поддерживается."

#: ironic/common/exception.py:550
#, python-format
msgid "iRMC %(operation)s failed. Reason: %(error)s"
msgstr "Операция iRMC %(operation)s не выполнена. Причина: %(error)s"

#: ironic/common/exception.py:554
#, python-format
msgid "iRMC shared file system '%(share)s' is not mounted."
msgstr ""

#: ironic/common/exception.py:558
#, python-format
msgid "Failed to inspect hardware. Reason: %(error)s"
msgstr "Не удалось проверить аппаратное обеспечение. Причина: %(error)s"

#: ironic/common/exception.py:562
#, python-format
msgid "Failed to clean node %(node)s: %(reason)s"
msgstr "Не удалось очистить узел %(node)s: %(reason)s"

#: ironic/common/exception.py:566
#, python-format
msgid "Path %(dir)s does not exist."
msgstr ""

#: ironic/common/exception.py:570
#, python-format
msgid "Directory %(dir)s is not writable."
msgstr ""

#: ironic/common/exception.py:574
#, python-format
msgid ""
"Failed to upload %(image_name)s image to web server %(web_server)s, reason: "
"%(reason)s"
msgstr ""

#: ironic/common/exception.py:579
#, python-format
msgid "Node %(node_id)s doesn't have a tag '%(tag)s'"
msgstr ""

#: ironic/common/exception.py:583
msgid "Network operation failure."
msgstr ""

#: ironic/common/exception.py:587
msgid "At least one of 'addresses' and 'node_uuid' parameters is required"
msgstr ""

#: ironic/common/exception.py:592
#, python-format
msgid ""
"Expected object %(obj)s when populating notification payload but got object "
"%(source)s"
msgstr ""

#: ironic/common/exception.py:597
#, python-format
msgid ""
"Object %(obj)s doesn't have the field \"%(field)s\" required for populating "
"notification schema key \"%(key)s\""
msgstr ""

#: ironic/common/exception.py:603
#, python-format
msgid ""
"Payload not populated when trying to send notification \"%(class_name)s\""
msgstr ""

#: ironic/common/exception.py:608
msgid "Storage operation failure."
msgstr ""

#: ironic/common/exception.py:612
#, python-format
msgid "Redfish exception occurred. Error: %(error)s"
msgstr ""

#: ironic/common/exception.py:616
#, python-format
msgid "Redfish connection failed for node %(node)s: %(error)s"
msgstr ""

#: ironic/common/exception.py:620
#, python-format
msgid ""
"Port group %(portgroup)s has member ports with inconsistent physical "
"networks (%(physical_networks)s). All ports in a port group must have the "
"same physical network."
msgstr ""

#: ironic/common/exception.py:626
#, python-format
msgid "Unable to attach VIF %(vif)s to node %(node)s. Reason: %(reason)s"
msgstr ""

#: ironic/common/exception.py:631
#, python-format
msgid ""
"Agent API for node %(node)s returned HTTP status code %(status)s with error: "
"%(error)s"
msgstr ""

#: ironic/common/exception.py:636
#, python-format
msgid "Node %(node_id)s doesn't have a trait '%(trait)s'"
msgstr ""

#: ironic/common/exception.py:640
#, python-format
msgid "Failed to rescue instance %(instance)s for node %(node)s: %(reason)s"
msgstr ""

#: ironic/common/exception.py:645
#, python-format
msgid "Failed to unrescue instance %(instance)s for node %(node)s: %(reason)s"
msgstr ""

#: ironic/common/exception.py:650
#, python-format
msgid "XClarity exception occurred. Error: %(error)s"
msgstr ""

#: ironic/common/exception.py:654
#, python-format
msgid "A BIOS setting %(name)s for node %(node)s already exists."
msgstr ""

#: ironic/common/exception.py:658
#, python-format
msgid "Node %(node)s doesn't have a BIOS setting '%(name)s'"
msgstr ""

#: ironic/common/exception.py:662
#, python-format
msgid "Node %(node)s doesn't have BIOS settings '%(names)s'"
msgstr ""

#: ironic/common/exception.py:666
msgid "Database version is too old"
msgstr ""

#: ironic/common/exception.py:670
#, python-format
msgid "Connection to agent failed: %(reason)s"
msgstr ""

#: ironic/common/exception.py:674
#, python-format
msgid "Timeout executing command %(command)s on node %(node)s"
msgstr ""

#: ironic/common/exception.py:678
#, python-format
msgid ""
"Node %(node)s is protected and cannot be undeployed, rebuilt or deleted"
msgstr ""

#: ironic/common/exception.py:683
#, python-format
msgid "Allocation %(allocation)s could not be found."
msgstr ""

#: ironic/common/exception.py:687
#, python-format
msgid "An allocation with name %(name)s already exists."
msgstr ""

#: ironic/common/exception.py:691
#, python-format
msgid "An allocation with UUID %(uuid)s already exists."
msgstr ""

#: ironic/common/exception.py:695
#, python-format
msgid "Failed to process allocation %(uuid)s: %(error)s."
msgstr ""

#: ironic/common/exception.py:699
#, python-format
msgid "A deploy template with name %(name)s already exists."
msgstr ""

#: ironic/common/exception.py:703
#, python-format
msgid "A deploy template with UUID %(uuid)s already exists."
msgstr ""

#: ironic/common/exception.py:707
#, python-format
msgid "Deploy template %(template)s could not be found."
msgstr ""

#: ironic/common/exception.py:711
#, python-format
msgid "Deploy template invalid: %(err)s."
msgstr ""

#: ironic/common/exception.py:715
msgid "The kickstart template is missing required variables"
msgstr ""

#: ironic/common/exception.py:719
msgid "The kickstart file is not valid."
msgstr ""

#: ironic/common/exception.py:723
#, python-format
msgid "IBMC exception occurred on node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/common/exception.py:727
#, python-format
msgid "IBMC connection failed for node %(node)s: %(error)s"
msgstr ""

#: ironic/common/exception.py:748
#, python-format
msgid ""
"The %(op)s operation can't be performed on node %(node)s because it is "
"retired."
msgstr ""

#: ironic/common/exception.py:753
#, python-format
msgid ""
"Unable to allocate a free port on host %(host)s for IPMI terminal, not "
"enough free ports."
msgstr ""

#: ironic/common/exception.py:765
#, python-format
msgid ""
"Invalid input for field/attribute %(fieldname)s. Value: '%(value)s'. %(msg)s"
msgstr ""

#: ironic/common/exception.py:782
#, python-format
msgid "Unknown argument: \"%(argname)s\"%(msg)s"
msgstr ""

#: ironic/common/exception.py:797
#, python-format
msgid "Unknown attribute for argument %(argn)s: %(attrs)s"
msgstr ""

#: ironic/common/exception.py:799
#, python-format
msgid "Unknown attributes for argument %(argn)s: %(attrs)s"
msgstr ""

#: ironic/common/exception.py:817
#, python-format
msgid ""
"Node %(node)s command \"%(command)s\" failed. Agent is presently executing a "
"command. Error %(error)s"
msgstr ""

#: ironic/common/exception.py:822
#, python-format
msgid ""
"Available memory at %(free)s, Insufficent as %(required)s is required to "
"proceed at this time."
msgstr ""

#: ironic/common/fsm.py:77
#, python-format
msgid "State '%s' does not exist"
msgstr ""

#: ironic/common/fsm.py:123
#, python-format
msgid "Target state '%s' does not exist"
msgstr "Целевое состояние '%s' не существует"

#: ironic/common/fsm.py:126
#, python-format
msgid "Target state '%s' is not a 'stable' state"
msgstr "Целевое состояние %s не является состоянием stable"

#: ironic/common/hash_ring.py:108
#, python-format
msgid "The driver '%s' is unknown."
msgstr "Неизвестный драйвер '%s'."

#: ironic/common/image_service.py:105
#, python-format
msgid "Got HTTP code %s instead of 200 in response to HEAD request."
msgstr "Получен код HTTP %s вместо кода 200 в ответе на запрос HEAD."

#: ironic/common/image_service.py:138
#, python-format
msgid "Got HTTP code %s instead of 200 in response to GET request."
msgstr "Получен код HTTP %s вместо кода 200 в ответе на запрос GET."

#: ironic/common/image_service.py:166
msgid ""
"Cannot determine image size as there is no Content-Length header specified "
"in response to HEAD request."
msgstr ""
"Не удалось определить размер образа, поскольку заголовок Content-Length не "
"указан в ответе на запрос HEAD."

#: ironic/common/image_service.py:208
msgid "Specified image file not found."
msgstr "Не найден указанный файл образа."

#: ironic/common/image_service.py:294
msgid "Scheme-less image href is not a UUID."
msgstr ""

#: ironic/common/image_service.py:300
#, python-format
msgid "Image download protocol %s is not supported."
msgstr "Протокол загрузки образа %s не поддерживается."

#: ironic/common/images.py:314
msgid "Neither deploy ISO nor ESP image configured or both of them configured"
msgstr ""

#: ironic/common/images.py:381
msgid "'qemu-img info' parsing failed."
msgstr "Ошибка анализа 'qemu-img info'."

#: ironic/common/images.py:388
#, python-format
msgid "fmt=%(fmt)s backed by: %(backing_file)s"
msgstr "fmt=%(fmt)s backed by: %(backing_file)s"

#: ironic/common/images.py:420
#, python-format
msgid "Converted to raw, but format is now %s"
msgstr ""
"Производилось преобразование в необработанный формат, но текущий формат %s"

#: ironic/common/images.py:653
msgid "Deploy iso didn't contain efiboot.img or grub.cfg"
msgstr "Образ ISO развертывания не содержит файл efiboot.img или grub.cfg"

#: ironic/common/molds.py:104
#, python-format
msgid "Missing auth_token for configuration mold access for node %s"
msgstr ""

#: ironic/common/neutron.py:137
#, python-format
msgid ""
"Unable to clear binding profile for neutron port %(port_id)s. Error: %(err)s"
msgstr ""

#: ironic/common/neutron.py:157
#, python-format
msgid "Failed to get the current binding on Neutron port %s."
msgstr ""

#: ironic/common/neutron.py:166
#, python-format
msgid ""
"Failed to remove the current binding from Neutron port %s, while updating "
"its MAC address."
msgstr ""

#: ironic/common/neutron.py:171
#, python-format
msgid "Failed to update MAC address on Neutron port %s."
msgstr ""

#: ironic/common/neutron.py:176
#, python-format
msgid "Failed to update binding:host_id and profile on Neutron port %s."
msgstr ""

#: ironic/common/neutron.py:202
#, python-format
msgid "Could not retrieve security groups from neutron: %(exc)s"
msgstr ""

#: ironic/common/neutron.py:211
msgid ""
"Could not find these security groups (specified via ironic config) in "
"neutron: %(ir-sg)s"
msgstr ""

#: ironic/common/neutron.py:299
#, python-format
msgid "No available %(enabled)sports on node %(node)s."
msgstr ""

#: ironic/common/neutron.py:366
#, python-format
msgid "Failed to create neutron ports for node's %(node)s ports %(ports)s."
msgstr ""

#: ironic/common/neutron.py:418
#, python-format
msgid ""
"Could not get given network VIF for %(node)s from neutron, possible network "
"issue. %(exc)s"
msgstr ""

#: ironic/common/neutron.py:441
#, python-format
msgid ""
"Could not remove VIF %(vif)s of node %(node)s, possibly a network issue: "
"%(exc)s"
msgstr ""

#: ironic/common/neutron.py:487
#, python-format
msgid "Unable to get port info for %(port_id)s. Error: %(err)s"
msgstr ""

#: ironic/common/neutron.py:503
#, python-format
msgid "Unable to get network info for %(network_id)s. Error: %(err)s"
msgstr ""

#: ironic/common/neutron.py:540
#, python-format
msgid "Unable to get subnet info for %(subnet_id)s. Error: %(err)s"
msgstr ""

#: ironic/common/neutron.py:676 ironic/common/neutron.py:782
msgid "network"
msgstr ""

#: ironic/common/neutron.py:690
#, python-format
msgid "UUID or name of %s is not set in configuration"
msgstr ""

#: ironic/common/neutron.py:798
#, python-format
msgid "More than one %(type)s was found for name %(name)s: %(nets)s"
msgstr ""

#: ironic/common/neutron.py:803
#, python-format
msgid "%(type)s with name or UUID %(uuid_or_name)s was not found"
msgstr ""

#: ironic/common/neutron.py:806
#, python-format
msgid "Could not retrieve network: %s"
msgstr ""

#: ironic/common/neutron.py:827
#, python-format
msgid "Neutron port %(port_uuid)s was not found"
msgstr ""

#: ironic/common/neutron.py:830 ironic/dhcp/neutron.py:177
#, python-format
msgid "Could not retrieve neutron port: %s"
msgstr ""

#: ironic/common/neutron.py:945
msgid "cleaning network"
msgstr ""

#: ironic/common/neutron.py:954
msgid "provisioning network"
msgstr ""

#: ironic/common/neutron.py:965
msgid "rescuing network"
msgstr ""

#: ironic/common/neutron.py:974
msgid "inspection network"
msgstr ""

#: ironic/common/pxe_utils.py:654
msgid ""
"Cannot validate PXE bootloader. Some parameters were missing in node's "
"driver_info and configuration"
msgstr ""

#: ironic/common/pxe_utils.py:1061
#, python-format
msgid ""
"Trusted boot is only supported in BIOS boot mode with netboot and without "
"whole_disk_image, but Node %(node_uuid)s was configured with boot_mode: "
"%(boot_mode)s, boot_option: %(boot_option)s, is_whole_disk_image: "
"%(is_whole_disk_image)s: at least one of them is wrong, and this can be "
"caused by enable secure boot."
msgstr ""

#: ironic/common/pxe_utils.py:1087
#, python-format
msgid ""
"The kickstart template includes a variable that is not a valid kickstart "
"option. Rendering the template returned  %(msg)s. The valid options are "
"%(valid_options)s."
msgstr ""

#: ironic/common/pxe_utils.py:1099
#, python-format
msgid ""
"Following required kickstart option variables are missing from the kickstart "
"template: %(missing_opts)s."
msgstr ""

#: ironic/common/raid.py:52
#, python-format
msgid ""
"Raid config cannot have more than one root volume. %d root volumes were "
"specified"
msgstr ""

#: ironic/common/raid.py:77
#, python-format
msgid "RAID config validation error: %s"
msgstr ""

#: ironic/common/raid.py:164
#, python-format
msgid "Node %s has no target RAID configuration."
msgstr ""

#: ironic/common/raid.py:173
msgid "skipping root volume"
msgstr ""

#: ironic/common/raid.py:179
msgid "skipping non-root volumes"
msgstr ""

#: ironic/common/raid.py:182
msgid " and "
msgstr ""

#: ironic/common/raid.py:184
#, python-format
msgid "Node %(node)s has empty target RAID configuration after %(msg)s."
msgstr ""

#: ironic/common/release_mappings.py:415
#, python-format
msgid "\"%s\" release"
msgstr ""

#: ironic/common/swift.py:97
msgid "put container"
msgstr "контейнер put"

#: ironic/common/swift.py:108
msgid "put object"
msgstr "объект put"

#: ironic/common/swift.py:128
msgid "head account"
msgstr "Создать учетную запись"

#: ironic/common/swift.py:136
msgid ""
"Swift temporary URLs require a shared secret to be created. You must provide "
"pre-generate the key on the project used to access Swift."
msgstr ""

#: ironic/common/swift.py:158
msgid "delete object"
msgstr "Удалить объект"

#: ironic/common/swift.py:179
msgid "head object"
msgstr "Создать объект"

#: ironic/common/swift.py:194
msgid "post object"
msgstr "Опубликовать объект"

#: ironic/common/utils.py:234
#, python-format
msgid "Unsupported/Invalid hash name '%s' provided."
msgstr ""

#: ironic/common/utils.py:420
#, python-format
msgid ""
"Cannot update capabilities. The new capabilities should be in a dictionary. "
"Provided value is %s"
msgstr ""

#: ironic/common/utils.py:433
#, python-format
msgid "Invalid capabilities string '%s'."
msgstr ""

#: ironic/common/utils.py:467
#, python-format
msgid "%(port_name)s \"%(port)s\" is not a valid port."
msgstr ""

#: ironic/common/utils.py:520
#, python-format
msgid ""
"Error parsing capabilities from Node %s instance_info field. A dictionary or "
"a \"jsonified\" dictionary is expected."
msgstr ""
"Ошибка анализа функций из поля instance_info %s узла. Словарь или словарь "
"\"jsonified\" ожидался."

#: ironic/common/wsgi_service.py:46
#, python-format
msgid "api_workers value of %d is invalid, must be greater than 0."
msgstr ""

#: ironic/common/glance_service/image_service.py:175
msgid "The image is required to be in an active state."
msgstr ""

#: ironic/common/glance_service/image_service.py:206
msgid "image contains no data."
msgstr ""

#: ironic/common/glance_service/image_service.py:282
#, python-format
msgid "The given image info does not have a valid image id: %s"
msgstr "Указанная информация об образе не содержит правильного ИД образа: %s"

#: ironic/common/glance_service/image_service.py:301
msgid ""
"Swift temporary URLs require a Swift endpoint URL, but it was not found in "
"the service catalog. You must provide \"swift_endpoint_url\" as a config "
"option."
msgstr ""

#: ironic/common/glance_service/image_service.py:322
msgid ""
"Swift temporary URLs require a shared secret to be created. You must provide "
"\"swift_temp_url_key\" as a config option or pre-generate the key on the "
"project used to access Swift."
msgstr ""

#: ironic/common/glance_service/image_service.py:346
msgid ""
"\"swift_temp_url_duration\" must be greater than or equal to "
"\"[glance]swift_temp_url_expected_download_start_delay\" option, otherwise "
"the Swift temporary URL may expire before the download starts."
msgstr ""

#: ironic/common/glance_service/image_service.py:354
msgid ""
"An integer value between 0 and 32 is required for "
"swift_store_multiple_containers_seed."
msgstr ""
"Для параметра swift_store_multiple_containers_seed требуется целочисленное "
"значение в диапазоне от 0 до 32."

#: ironic/conductor/allocations.py:56 ironic/conductor/allocations.py:276
#, python-format
msgid "Unexpected exception during allocation: %s"
msgstr ""

#: ironic/conductor/allocations.py:72
#, python-format
msgid ""
"Cannot remove allocation %(uuid)s for node %(node)s, because the node is in "
"state %(state)s where updates are not allowed (and maintenance mode is off)"
msgstr ""

#: ironic/conductor/allocations.py:80
#, python-format
msgid ""
"Cannot remove allocation %(uuid)s for node %(node)s, because the node is "
"active (and maintenance mode is off)"
msgstr ""

#: ironic/conductor/allocations.py:124
#, python-format
msgid ""
"none of the requested nodes are available and match the resource class %s"
msgstr ""

#: ironic/conductor/allocations.py:127
#, python-format
msgid "no available nodes match the resource class %s"
msgstr ""

#: ironic/conductor/allocations.py:136
#, python-format
msgid "no suitable nodes have the requested traits %s"
msgstr ""

#: ironic/conductor/allocations.py:240
#, python-format
msgid "could not reserve any of %d suitable nodes"
msgstr ""

#: ironic/conductor/allocations.py:242
msgid "all nodes were filtered out during reservation"
msgstr ""

#: ironic/conductor/allocations.py:291
#, python-format
msgid "Node must be in the \"active\" state, but the current state is \"%s\""
msgstr ""

#: ironic/conductor/allocations.py:297
#, python-format
msgid ""
"Resource class %(curr)s does not match the requested resource class %(rsc)s"
msgstr ""

#: ironic/conductor/allocations.py:303
#, python-format
msgid "List of traits %(curr)s does not match the requested traits %(traits)s"
msgstr ""

#: ironic/conductor/allocations.py:309
#, python-format
msgid "Candidate nodes must be empty or contain the target node, but got %s"
msgstr ""

#: ironic/conductor/allocations.py:314
#, python-format
msgid "Cannot backfill an allocation for node %(node)s: %(errors)s"
msgstr ""

#: ironic/conductor/base_manager.py:67
#, python-format
msgid "Configuration options %s cannot be an empty list."
msgstr ""

#: ironic/conductor/base_manager.py:124
msgid "Attempt to start an already running conductor manager"
msgstr ""

#: ironic/conductor/base_manager.py:209
#, python-format
msgid ""
"The %(state)s state can't be resumed by conductor %(host)s. Moving to fail "
"state."
msgstr ""

#: ironic/conductor/base_manager.py:575
#, python-format
msgid ""
"Failed to start console of node %(node)s while starting the conductor, so "
"changing the console_enabled status to False, error: %(err)s"
msgstr ""

#: ironic/conductor/cleaning.py:60
msgid "Cleaning a node in maintenance mode is not allowed"
msgstr ""

#: ironic/conductor/cleaning.py:71 ironic/conductor/manager.py:1084
#, python-format
msgid "Validation failed. Cannot clean node %(node)s. Error: %(msg)s"
msgstr ""

#: ironic/conductor/cleaning.py:98
#, python-format
msgid "Failed to prepare node %(node)s for cleaning: %(e)s"
msgstr "Не удалось подготовить узел %(node)s для очистки: %(e)s"

#: ironic/conductor/cleaning.py:119
#, python-format
msgid "Cannot clean node %(node)s. Error: %(msg)s"
msgstr ""

#: ironic/conductor/cleaning.py:129 ironic/conductor/cleaning.py:288
msgid "Unexpected error when processing next clean step"
msgstr ""

#: ironic/conductor/cleaning.py:197
#, python-format
msgid "Node %(node)s failed step %(step)s: %(exc)s"
msgstr "Узлу %(node)s не удалось выполнить шаг %(step)s: %(exc)s"

#: ironic/conductor/cleaning.py:219
#, python-format
msgid ""
"While executing step %(step)s on node %(node)s, step returned invalid value: "
"%(val)s"
msgstr ""
"Во время выполнения шага %(step)s на узле %(node)s узел вернул недопустимое "
"значение: %(val)s"

#: ironic/conductor/cleaning.py:237
#, python-format
msgid "Failed to tear down from cleaning for node %(node)s, reason: %(err)s"
msgstr ""

#: ironic/conductor/cleaning.py:261
#, python-format
msgid ""
"Failed to tear down cleaning for node %(node)s after aborting the operation. "
"Error: %(err)s"
msgstr ""

#: ironic/conductor/cleaning.py:264
msgid "Failed to tear down cleaning after aborting the operation"
msgstr ""

#: ironic/conductor/cleaning.py:273
#, python-format
msgid "Clean operation aborted for node %s"
msgstr ""

#: ironic/conductor/cleaning.py:274
msgid "By request, the clean operation was aborted"
msgstr ""

#: ironic/conductor/cleaning.py:276
#, python-format
msgid " after the completion of step \"%s\""
msgstr ""

#: ironic/conductor/deployments.py:107
#, python-format
msgid ""
"Failed to validate deploy or power info for node %(node_uuid)s. Error: "
"%(msg)s"
msgstr ""

#: ironic/conductor/deployments.py:140
#, python-format
msgid "Failed to upload the configdrive to Swift. Error: %s"
msgstr "Не удалось передать configdrive в Swift. Ошибка: %s"

#: ironic/conductor/deployments.py:154
#, python-format
msgid "Failed to store the configdrive in the database. %s"
msgstr ""

#: ironic/conductor/deployments.py:163
#, python-format
msgid "Failed to prepare the configdrive. Exception: %s"
msgstr ""

#: ironic/conductor/deployments.py:174
#, python-format
msgid "Failed to prepare to deploy: %s"
msgstr ""

#: ironic/conductor/deployments.py:182
#, python-format
msgid "Failed to prepare to deploy. Exception: %s"
msgstr ""

#: ironic/conductor/deployments.py:205
#, python-format
msgid "Cannot get deploy steps; failed to deploy: %s"
msgstr ""

#: ironic/conductor/deployments.py:208
#, python-format
msgid "Error while getting deploy steps: no steps returned for node %s"
msgstr ""

#: ironic/conductor/deployments.py:212
msgid "No deploy steps returned by the driver"
msgstr ""

#: ironic/conductor/deployments.py:225 ironic/conductor/deployments.py:366
msgid "Unexpected error when processing next deploy step"
msgstr ""

#: ironic/conductor/deployments.py:293
#, python-format
msgid "Deploy step %(step)s failed: %(err)s."
msgstr ""

#: ironic/conductor/deployments.py:302
#, python-format
msgid "Failed to deploy. Exception: %s"
msgstr ""

#: ironic/conductor/deployments.py:328
#, python-format
msgid ""
"While executing deploy step %(step)s on node %(node)s, step returned "
"unexpected state: %(val)s"
msgstr ""

#: ironic/conductor/deployments.py:333
#, python-format
msgid "Failed to deploy: %s"
msgstr ""

#: ironic/conductor/deployments.py:384
#, python-format
msgid ""
"Failed to validate the final deploy steps list for node %(node)s: %(exc)s"
msgstr ""

#: ironic/conductor/deployments.py:465
#, python-format
msgid "Failed to start console while deploying the node %(node)s: %(err)s."
msgstr ""

#: ironic/conductor/manager.py:209
#, python-format
msgid ""
"Node %(node)s can not have %(field)s updated unless it is in one of allowed "
"(%(allowed)s) states or in maintenance mode."
msgstr ""

#: ironic/conductor/manager.py:254
#, python-format
msgid ""
"Node %(node)s can not have resource_class updated unless it is in one of "
"allowed (%(allowed)s) states."
msgstr ""

#: ironic/conductor/manager.py:265
#, python-format
msgid ""
"Node %(node)s with an allocation can not have instance_uuid removed unless "
"it is in one of allowed (%(allowed)s) states or in maintenance mode."
msgstr ""

#: ironic/conductor/manager.py:323
#, python-format
msgid "The driver %(driver)s does not support the power state, %(state)s"
msgstr ""

#: ironic/conductor/manager.py:400 ironic/conductor/manager.py:496
#: ironic/drivers/utils.py:96
#, python-format
msgid "No handler for method %s"
msgstr "Отсутствует обработчик для метода %s"

#: ironic/conductor/manager.py:405 ironic/conductor/manager.py:501
#, python-format
msgid "The method %(method)s does not support HTTP %(http)s"
msgstr "Метод %(method)s не поддерживает HTTP %(http)s"

#: ironic/conductor/manager.py:611
msgid "rescuing"
msgstr ""

#: ironic/conductor/manager.py:637 ironic/conductor/manager.py:727
#, python-format
msgid "Validation failed. Error: %s"
msgstr ""

#: ironic/conductor/manager.py:668 ironic/conductor/manager.py:681
#, python-format
msgid "Failed to rescue: %s"
msgstr ""

#: ironic/conductor/manager.py:672
#, python-format
msgid "Failed to rescue. Exception: %s"
msgstr ""

#: ironic/conductor/manager.py:679 ironic/conductor/manager.py:769
#, python-format
msgid "Driver returned unexpected state %s"
msgstr ""

#: ironic/conductor/manager.py:718
msgid "unrescuing"
msgstr ""

#: ironic/conductor/manager.py:757 ironic/conductor/manager.py:771
#, python-format
msgid "Failed to unrescue: %s"
msgstr ""

#: ironic/conductor/manager.py:761
#, python-format
msgid "Failed to unrescue. Exception: %s"
msgstr ""

#: ironic/conductor/manager.py:786
msgid "Failed to clean up rescue after aborting the operation"
msgstr ""

#: ironic/conductor/manager.py:796
#, python-format
msgid "Rescue operation aborted for node %s."
msgstr ""

#: ironic/conductor/manager.py:797
msgid "By request, the rescue operation was aborted."
msgstr ""

#: ironic/conductor/manager.py:877
#, python-format
msgid ""
"Cannot continue deploying on %(node)s. Node is in %(state)s state; should be "
"in one of %(deploy_state)s"
msgstr ""

#: ironic/conductor/manager.py:938
#, python-format
msgid ""
"Failed to validate power driver interface. Can not delete instance. Error: "
"%(msg)s"
msgstr ""
"Не удалось проверить интерфейс драйвера питания. Невозможно удалить "
"экземпляр. Ошибка: %(msg)s"

#: ironic/conductor/manager.py:997
#, python-format
msgid "Failed to tear down. Error: %s"
msgstr "Не удалось выполнить удаление. Ошибка: %s"

#: ironic/conductor/manager.py:1072
msgid "cleaning"
msgstr ""

#: ironic/conductor/manager.py:1130
#, python-format
msgid ""
"Cannot continue cleaning on %(node)s, node is in %(state)s state, should be "
"%(clean_state)s"
msgstr ""
"Продолжение очистки на узле %(node)s невозможно: узел находится в состоянии "
"%(state)s, а должен быть в состоянии %(clean_state)s"

#: ironic/conductor/manager.py:1156
#, python-format
msgid ""
"Failed to validate power driver interface for node %(node)s. Error: %(msg)s"
msgstr ""

#: ironic/conductor/manager.py:1165
#, python-format
msgid "Failed to get power state for node %(node)s. Error: %(msg)s"
msgstr ""

#: ironic/conductor/manager.py:1221 ironic/conductor/manager.py:1224
msgid "providing"
msgstr ""

#: ironic/conductor/manager.py:1329
#, python-format
msgid "Failed to abort inspection. Error: %s"
msgstr ""

#: ironic/conductor/manager.py:1332
msgid "Inspection was aborted by request."
msgstr ""

#: ironic/conductor/manager.py:1524
msgid "Power driver returned ERROR state while trying to get power state."
msgstr ""

#: ironic/conductor/manager.py:1649
msgid "Pending power operation was aborted due to conductor take over"
msgstr ""

#: ironic/conductor/manager.py:1710
#, python-format
msgid "Error while attempting to adopt node %(node)s: %(err)s."
msgstr ""

#: ironic/conductor/manager.py:1748
#, python-format
msgid "Failed to start console while taking over the node %(node)s: %(err)s."
msgstr ""

#: ironic/conductor/manager.py:1906
#, python-format
msgid ""
"Unexpected exception, traceback saved into log by ironic conductor service "
"that is running on %(host)s: %(error)s"
msgstr ""

#: ironic/conductor/manager.py:1969
#, python-format
msgid ""
"Can not delete node \"%(node)s\" while it is in provision state "
"\"%(state)s\". Valid provision states to perform deletion are: "
"\"%(valid_states)s\", or set the node into maintenance mode"
msgstr ""

#: ironic/conductor/manager.py:2027
#, python-format
msgid ""
"Cannot delete the port %(port)s as it is bound to VIF %(vif)s for %(use)s "
"use."
msgstr ""

#: ironic/conductor/manager.py:2216
msgid "enabling"
msgstr "включение"

#: ironic/conductor/manager.py:2216
msgid "disabling"
msgstr "выключение"

#: ironic/conductor/manager.py:2217
#, python-format
msgid "Error %(op)s the console on node %(node)s. Reason: %(error)s"
msgstr ""
"Ошибка при выполнении операции %(op)s в консоли на узле %(node)s. Причина: "
"%(error)s"

#: ironic/conductor/manager.py:2302
#, python-format
msgid ""
"Cannot update hardware address for port %(port)s as node %(node)s is active "
"or has instance UUID assigned"
msgstr ""

#: ironic/conductor/manager.py:2324
#, python-format
msgid ""
"Port %(port)s can not have any connectivity attributes (%(connect)s) updated "
"unless node %(node)s is in a %(allowed)s state or in maintenance mode."
msgstr ""

#: ironic/conductor/manager.py:2392
#, python-format
msgid ""
"Portgroup %(portgroup)s can not be associated to node %(node)s unless the "
"node is in a %(allowed)s state or in maintenance mode."
msgstr ""

#: ironic/conductor/manager.py:2408
#, python-format
msgid ""
"Portgroup %(portgroup)s can not be associated with node %(node)s because "
"there are ports associated with this portgroup."
msgstr ""

#: ironic/conductor/manager.py:2956
msgid "timeout reached while inspecting the node"
msgstr "истек тайм-аут в процессе проверки узла"

#: ironic/conductor/manager.py:3066
msgid ""
"Agent did not transmit a version, and a version is required. Please update "
"the agent being used."
msgstr ""

#: ironic/conductor/manager.py:3090
msgid "TLS is required by configuration"
msgstr ""

#: ironic/conductor/manager.py:3511
#, python-format
msgid ""
"During sync_power_state, max retries exceeded for node %(node)s, node state "
"%(actual)s does not match expected state '%(state)s'. Updating DB state to "
"'%(actual)s' Switching node to maintenance mode."
msgstr ""
"В состоянии sync_power_state превышено максимальное число повторов для узла "
"%(node)s, состояние узла %(actual)s не соответствует ожидаемому состоянию "
"'%(state)s'. Состояние базы данных изменяется на '%(actual)s'. Узел будет "
"переключен в режим обслуживания."

#: ironic/conductor/manager.py:3520
#, python-format
msgid " Error: %s"
msgstr ""

#: ironic/conductor/manager.py:3572
msgid "Power driver returned ERROR state while trying to sync power state."
msgstr ""
"Драйвер питания возвратил состояние Ошибка при попытке синхронизации "
"состояния питания."

#: ironic/conductor/manager.py:3693
#, python-format
msgid "Unexpected exception of type %(type)s: %(msg)s"
msgstr ""

#: ironic/conductor/manager.py:3707
#, python-format
msgid "During inspection, driver returned unexpected state %(state)s"
msgstr "Во время проверки драйвер вернул неожиданное состояние %(state)s"

#: ironic/conductor/notification_utils.py:54
#, python-format
msgid ""
"Failed to send baremetal.node.%(action)s.%(status)s notification for node "
"%(node)s with level %(level)s, notification_method %(notification_method)s, "
"payload_method %(payload_method)s, error %(error)s"
msgstr ""

#: ironic/conductor/rpcapi.py:155
#, python-format
msgid ""
"No conductor service registered which supports driver %(driver)s for "
"conductor group \"%(group)s\"."
msgstr ""

#: ironic/conductor/rpcapi.py:203
msgid "No conductors registered."
msgstr ""

#: ironic/conductor/rpcapi.py:978 ironic/conductor/rpcapi.py:1004
#: ironic/conductor/rpcapi.py:1029
msgid "Incompatible conductor version - please upgrade ironic-conductor first"
msgstr ""

#: ironic/conductor/steps.py:302
#, python-format
msgid ""
"Validation of deploy steps from deploy templates matching this node's "
"instance traits failed. Matching deploy templates: %(templates)s. Errors: "
msgstr ""

#: ironic/conductor/steps.py:412
#, python-format
msgid ""
"deploy steps from all deploy templates matching this node's instance traits "
"cannot have the same interface and step. Duplicate deploy steps for "
"%(duplicates)s"
msgstr ""

#: ironic/conductor/steps.py:473
#, python-format
msgid "%(type)s step %(step)s has these unexpected arguments: %(unexpected)s"
msgstr ""

#: ironic/conductor/steps.py:489
#, python-format
msgid "%(type)s step %(step)s is missing these required arguments: %(miss)s"
msgstr ""

#: ironic/conductor/steps.py:495
#, python-format
msgid "clean step %s requires booting a ramdisk"
msgstr ""

#: ironic/conductor/steps.py:510
#, python-format
msgid ""
"deploy step %(step)s on interface %(interface)s is a core step and cannot be "
"overridden by user steps. It may be disabled by setting the priority to 0"
msgstr ""

#: ironic/conductor/steps.py:595
#, python-format
msgid "node does not support this %(type)s step: %(step)s"
msgstr ""

#: ironic/conductor/steps.py:698
msgid "Validation of deploy steps from \"deploy steps\" argument failed."
msgstr ""

#: ironic/conductor/task_manager.py:470
#, python-format
msgid "Async execution of %(method)s failed with error: %(error)s"
msgstr ""

#: ironic/conductor/utils.py:140
#, python-format
msgid ""
"Unsupported boot mode %(mode)s specified for node %(node_id)s. Supported "
"boot modes are: %(modes)s"
msgstr ""

#: ironic/conductor/utils.py:240
#, python-format
msgid "Failed to change power state to '%(target)s'. Error: %(error)s"
msgstr ""
"Не удалось изменить состояние питания на '%(target)s'. Ошибка: %(error)s"

#: ironic/conductor/utils.py:324
#, python-format
msgid ""
"Failed to change power state to '%(target_state)s' by '%(new_state)s'. Error:"
" %(error)s"
msgstr ""

#: ironic/conductor/utils.py:368
#, python-format
msgid "Timeout reached while waiting for callback for node %s"
msgstr "Истек тайм-аут при ожидании обратного вызова для узла %s"

#: ironic/conductor/utils.py:394 ironic/conductor/utils.py:703
#: ironic/conductor/utils.py:744
msgid "No free conductor workers available"
msgstr "Нет доступных свободных обработчиков проводников"

#: ironic/conductor/utils.py:409
#, python-format
msgid ""
"Timeout reached while cleaning the node. Please check if the ramdisk "
"responsible for the cleaning is running on the node. Failed on step %(step)s."
""
msgstr ""

#: ironic/conductor/utils.py:457
#, python-format
msgid "%s. Also failed to tear down cleaning."
msgstr ""

#: ironic/conductor/utils.py:577
#, python-format
msgid "Also failed to clean up due to: %s"
msgstr ""

#: ironic/conductor/utils.py:579
msgid ""
"An unhandled exception was encountered while aborting. More information may "
"be found in the log file."
msgstr ""

#: ironic/conductor/utils.py:623
msgid "Operation was aborted due to conductor take over"
msgstr ""

#: ironic/conductor/utils.py:654
#, python-format
msgid "Rescue operation was unsuccessful, clean up failed for node: %(error)s"
msgstr ""

#: ironic/conductor/utils.py:660
#, python-format
msgid ""
"Rescue failed, but an unhandled exception was encountered while aborting: "
"%(error)s"
msgstr ""

#: ironic/conductor/utils.py:685
msgid "Timeout reached while waiting for rescue ramdisk callback for node"
msgstr ""

#: ironic/conductor/utils.py:806
#, python-format
msgid ""
"Port with physical network %(physnet)s cannot become a member of port group "
"%(portgroup)s which has ports in physical network %(pg_physnet)s."
msgstr ""

#: ironic/conductor/utils.py:848
#, python-format
msgid ""
"Error parsing traits from Node %(node)s instance_info field. A list of "
"strings is expected."
msgstr ""

#: ironic/conductor/utils.py:864
#, python-format
msgid ""
"Cannot specify instance traits that are not also set on the node. Node "
"%(node)s is missing traits %(traits)s"
msgstr ""

#: ironic/conductor/utils.py:1361
msgid "Detected change in ramdisk provided \"agent_verify_ca\""
msgstr ""

#: ironic/conductor/utils.py:1395
#, python-format
msgid "Caching of bios settings failed on node %(node)s."
msgstr ""

#: ironic/conf/agent.py:25
msgid ""
"Whether Ironic will manage booting of the agent ramdisk. If set to False, "
"you will need to configure your mechanism to allow booting the agent ramdisk."
""
msgstr ""

#: ironic/conf/agent.py:32
msgid ""
"The memory size in MiB consumed by agent when it is booted on a bare metal "
"node. This is used for checking if the image can be downloaded and deployed "
"on the bare metal node after booting agent ramdisk. This may be set "
"according to the memory consumed by the agent ramdisk image."
msgstr ""

#: ironic/conf/agent.py:41
msgid ""
"Whether the agent ramdisk should stream raw images directly onto the disk or "
"not. By streaming raw images directly onto the disk the agent ramdisk will "
"not spend time copying the image to a tmpfs partition (therefore consuming "
"less memory) prior to writing it to the disk. Unless the disk where the "
"image will be copied to is really slow, this option should be set to True. "
"Defaults to True."
msgstr ""

#: ironic/conf/agent.py:51
msgid ""
"Number of times to retry getting power state to check if bare metal node has "
"been powered off after a soft power off."
msgstr ""

#: ironic/conf/agent.py:56 ironic/conf/ansible.py:60
msgid ""
"Amount of time (in seconds) to wait between polling power state after "
"trigger soft poweroff."
msgstr ""

#: ironic/conf/agent.py:60
msgid "API version to use for communicating with the ramdisk agent."
msgstr ""

#: ironic/conf/agent.py:63
msgid "always collect the logs"
msgstr ""

#: ironic/conf/agent.py:64
msgid "only collect logs if there is a failure"
msgstr ""

#: ironic/conf/agent.py:66
msgid "never collect logs"
msgstr ""

#: ironic/conf/agent.py:69
msgid ""
"Whether Ironic should collect the deployment logs on deployment failure "
"(on_failure), always or never."
msgstr ""

#: ironic/conf/agent.py:72
msgid "store the logs locally"
msgstr ""

#: ironic/conf/agent.py:73
msgid "store the logs in Object Storage service"
msgstr ""

#: ironic/conf/agent.py:77
msgid "The name of the storage backend where the logs will be stored."
msgstr ""

#: ironic/conf/agent.py:82
msgid ""
"The path to the directory where the logs should be stored, used when the "
"deploy_logs_storage_backend is configured to \"local\"."
msgstr ""

#: ironic/conf/agent.py:88
msgid ""
"The name of the Swift container to store the logs, used when the "
"deploy_logs_storage_backend is configured to \"swift\"."
msgstr ""

#: ironic/conf/agent.py:94
msgid ""
"Number of days before a log object is marked as expired in Swift. If None, "
"the logs will be kept forever or until manually deleted. Used when the "
"deploy_logs_storage_backend is configured to \"swift\"."
msgstr ""

#: ironic/conf/agent.py:100
msgid "IPA ramdisk retrieves instance image from the Object Storage service."
msgstr ""

#: ironic/conf/agent.py:102
msgid ""
"IPA ramdisk retrieves instance image from HTTP service served at conductor "
"nodes."
msgstr ""

#: ironic/conf/agent.py:105
msgid ""
"Same as \"http\", but HTTP images are also cached locally, converted and "
"served from the conductor"
msgstr ""

#: ironic/conf/agent.py:110
msgid ""
"Specifies whether direct deploy interface should try to use the image source "
"directly or if ironic should cache the image on the conductor and serve it "
"from ironic's own http server."
msgstr ""

#: ironic/conf/agent.py:117
msgid "Timeout (in seconds) for IPA commands."
msgstr ""

#: ironic/conf/agent.py:120
msgid ""
"This is the maximum number of attempts that will be done for IPA commands "
"that fails due to network problems."
msgstr ""

#: ironic/conf/agent.py:125
msgid ""
"Number of attempts to check for asynchronous commands completion before "
"timing out."
msgstr ""

#: ironic/conf/agent.py:129
msgid ""
"Number of seconds to wait for between checks for asynchronous commands "
"completion."
msgstr ""

#: ironic/conf/agent.py:134
msgid ""
"The number of seconds Neutron agent will wait between polling for device "
"changes. This value should be the same as CONF.AGENT.polling_interval in "
"Neutron configuration."
msgstr ""

#: ironic/conf/agent.py:140
msgid ""
"Max number of attempts to validate a Neutron agent status before raising "
"network error for a dead agent."
msgstr ""

#: ironic/conf/agent.py:145
msgid ""
"Wait time in seconds between attempts for validating Neutron agent status."
msgstr ""

#: ironic/conf/agent.py:150
msgid ""
"If set to True, callback URLs without https:// will be rejected by the "
"conductor."
msgstr ""

#: ironic/conf/agent.py:154
msgid ""
"Path to store auto-generated TLS certificates used to validate connections "
"to the ramdisk."
msgstr ""

#: ironic/conf/agent.py:158
msgid ""
"Path to the TLS CA to validate connection to the ramdisk. Set to True to use "
"the system default CA storage. Set to False to disable validation. Ignored "
"when automatic TLS setup is used."
msgstr ""

#: ironic/conf/agent.py:163
msgid ""
"Path to the TLS CA that is used to start the bare metal API. In some boot "
"methods this file can be passed to the ramdisk."
msgstr ""

#: ironic/conf/anaconda.py:28
msgid ""
"kickstart template to use when no kickstart template is specified in the "
"instance_info or the glance OS image."
msgstr ""

#: ironic/conf/ansible.py:23
msgid "Extra arguments to pass on every invocation of Ansible."
msgstr ""

#: ironic/conf/ansible.py:28
msgid ""
"Set ansible verbosity level requested when invoking \"ansible-playbook\" "
"command. 4 includes detailed SSH session logging. Default is 4 when global "
"debug is enabled and 0 otherwise."
msgstr ""

#: ironic/conf/ansible.py:35
msgid ""
"Path to \"ansible-playbook\" script. Default will search the $PATH "
"configured for user running ironic-conductor process. Provide the full path "
"when ansible-playbook is not in $PATH or installed in not default location."
msgstr ""

#: ironic/conf/ansible.py:43
msgid "Path to directory with playbooks, roles and local inventory."
msgstr ""

#: ironic/conf/ansible.py:49
msgid ""
"Path to ansible configuration file. If set to empty, system default will be "
"used."
msgstr ""

#: ironic/conf/ansible.py:54
msgid ""
"Number of times to retry getting power state to check if bare metal node has "
"been powered off after a soft power off. Value of 0 means do not retry on "
"failure."
msgstr ""

#: ironic/conf/ansible.py:64
msgid ""
"Extra amount of memory in MiB expected to be consumed by Ansible-related "
"processes on the node. Affects decision whether image will fit into RAM."
msgstr ""

#: ironic/conf/ansible.py:69
msgid ""
"Skip verifying SSL connections to the image store when downloading the image."
" Setting it to \"True\" is only recommended for testing environments that "
"use self-signed certificates."
msgstr ""

#: ironic/conf/ansible.py:74
msgid ""
"Specific CA bundle to use for validating SSL connections to the image store. "
"If not specified, CA available in the ramdisk will be used. Is not used by "
"default playbooks included with the driver. Suitable for environments that "
"use self-signed certificates."
msgstr ""

#: ironic/conf/ansible.py:83
msgid ""
"Client cert to use for SSL connections to image store. Is not used by "
"default playbooks included with the driver."
msgstr ""

#: ironic/conf/ansible.py:88
msgid ""
"Client key to use for SSL connections to image store. Is not used by default "
"playbooks included with the driver."
msgstr ""

#: ironic/conf/ansible.py:94
msgid ""
"Name of the user to use for Ansible when connecting to the ramdisk over SSH. "
"It may be overridden by per-node 'ansible_username' option in node's "
"'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:99
msgid ""
"Absolute path to the private SSH key file to use by Ansible by default when "
"connecting to the ramdisk over SSH. Default is to use default SSH keys "
"configured for the user running the ironic-conductor service. Private keys "
"with password must be pre-loaded into 'ssh-agent'. It may be overridden by "
"per-node 'ansible_key_file' option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:109
msgid ""
"Path (relative to $playbooks_path or absolute) to the default playbook used "
"for deployment. It may be overridden by per-node 'ansible_deploy_playbook' "
"option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:116
msgid ""
"Path (relative to $playbooks_path or absolute) to the default playbook used "
"for graceful in-band shutdown of the node. It may be overridden by per-node "
"'ansible_shutdown_playbook' option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:124
msgid ""
"Path (relative to $playbooks_path or absolute) to the default playbook used "
"for node cleaning. It may be overridden by per-node 'ansible_clean_playbook' "
"option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:131
msgid ""
"Path (relative to $playbooks_path or absolute) to the default auxiliary "
"cleaning steps file used during the node cleaning. It may be overridden by "
"per-node 'ansible_clean_steps_config' option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ansible.py:138
msgid ""
"Absolute path to the python interpreter on the managed machines. It may be "
"overridden by per-node 'ansible_python_interpreter' option in node's "
"'driver_info' field. By default, ansible uses /usr/bin/python"
msgstr ""

#: ironic/conf/api.py:24
msgid "The IP address or hostname on which ironic-api listens."
msgstr ""

#: ironic/conf/api.py:28
msgid "The TCP port on which ironic-api listens."
msgstr ""

#: ironic/conf/api.py:32
msgid ""
"The maximum number of items returned in a single response from a collection "
"resource."
msgstr ""

#: ironic/conf/api.py:36
msgid ""
"Public URL to use when building the links to the API resources (for example, "
"\"https://ironic.rocks:6384\"). If None the links will be built using the "
"request's host URL. If the API is operating behind a proxy, you will want to "
"change this to represent the proxy's URL. Defaults to None. Ignored when "
"proxy headers parsing is enabled via "
"[oslo_middleware]enable_proxy_headers_parsing option."
msgstr ""

#: ironic/conf/api.py:46
msgid ""
"Number of workers for OpenStack Ironic API service. The default is equal to "
"the number of CPUs available, but not more than 4. One worker is used if the "
"CPU number cannot be detected."
msgstr ""

#: ironic/conf/api.py:52
msgid ""
"Enable the integrated stand-alone API to service requests via HTTPS instead "
"of HTTP. If there is a front-end service performing HTTPS offloading from "
"the service, this option should be False; note, you will want to enable "
"proxy headers parsing with [oslo_middleware]enable_proxy_headers_parsing "
"option or configure [api]public_endpoint option to set URLs in responses to "
"the SSL terminated one."
msgstr ""

#: ironic/conf/api.py:63
msgid "Whether to restrict the lookup API to only nodes in certain states."
msgstr ""

#: ironic/conf/api.py:68
msgid "Maximum interval (in seconds) for agent heartbeats."
msgstr ""

#: ironic/conf/api.py:72
msgid "Schema for network data used by this deployment."
msgstr ""

#: ironic/conf/audit.py:20
msgid "Enable auditing of API requests (for ironic-api service)."
msgstr ""

#: ironic/conf/audit.py:25
msgid ""
"Path to audit map file for ironic-api service. Used only when API audit is "
"enabled."
msgstr ""

#: ironic/conf/audit.py:30
msgid ""
"Comma separated list of Ironic REST API HTTP methods to be ignored during "
"audit logging. For example: auditing will not be done on any GET or POST "
"requests if this is set to \"GET,POST\". It is used only when API audit is "
"enabled."
msgstr ""

#: ironic/conf/cinder.py:22
msgid "Client retries in the case of a failed request connection."
msgstr ""

#: ironic/conf/cinder.py:26
msgid ""
"Number of retries in the case of a failed action (currently only used when "
"detaching volumes)."
msgstr ""

#: ironic/conf/cinder.py:31
msgid ""
"Retry interval in seconds in the case of a failed action (only specific "
"actions are retried)."
msgstr ""

#: ironic/conf/conductor.py:26
msgid ""
"The size of the workers greenthread pool. Note that 2 threads will be "
"reserved by the conductor itself for handling heart beats and periodic tasks."
" On top of that, `sync_power_state_workers` will take up to 7 green threads "
"with the default value of 8."
msgstr ""

#: ironic/conf/conductor.py:33
msgid "Seconds between conductor heart beats."
msgstr ""

#: ironic/conf/conductor.py:40
msgid ""
"Maximum time (in seconds) since the last check-in of a conductor. A "
"conductor is considered inactive when this time has been exceeded."
msgstr ""

#: ironic/conf/conductor.py:45
msgid ""
"Interval between syncing the node power state to the database, in seconds. "
"Set to 0 to disable syncing."
msgstr ""

#: ironic/conf/conductor.py:50
msgid ""
"Interval between checks of provision timeouts, in seconds. Set to 0 to "
"disable checks."
msgstr ""

#: ironic/conf/conductor.py:55
msgid "Interval (seconds) between checks of rescue timeouts."
msgstr ""

#: ironic/conf/conductor.py:60
msgid ""
"Interval between checks of orphaned allocations, in seconds. Set to 0 to "
"disable checks."
msgstr ""

#: ironic/conf/conductor.py:65
msgid ""
"Timeout (seconds) to wait for a callback from a deploy ramdisk. Set to 0 to "
"disable timeout."
msgstr ""

#: ironic/conf/conductor.py:70
msgid ""
"During sync_power_state, should the hardware power state be set to the state "
"recorded in the database (True) or should the database be updated based on "
"the hardware state (False)."
msgstr ""

#: ironic/conf/conductor.py:76
msgid ""
"During sync_power_state failures, limit the number of times Ironic should "
"try syncing the hardware node power state with the node power state in DB"
msgstr ""

#: ironic/conf/conductor.py:82
msgid ""
"The maximum number of worker threads that can be started simultaneously to "
"sync nodes power states from the periodic task."
msgstr ""

#: ironic/conf/conductor.py:87
msgid ""
"Maximum number of worker threads that can be started simultaneously by a "
"periodic task. Should be less than RPC thread pool size."
msgstr ""

#: ironic/conf/conductor.py:92
msgid "Number of attempts to grab a node lock."
msgstr ""

#: ironic/conf/conductor.py:95
msgid "Seconds to sleep between node lock attempts."
msgstr ""

#: ironic/conf/conductor.py:98
msgid "Enable sending sensor data message via the notification bus"
msgstr ""

#: ironic/conf/conductor.py:103
msgid ""
"Seconds between conductor sending sensor data message to ceilometer via the "
"notification bus."
msgstr ""

#: ironic/conf/conductor.py:107
msgid ""
"The maximum number of workers that can be started simultaneously for send "
"data from sensors periodic task."
msgstr ""

#: ironic/conf/conductor.py:112
msgid ""
"The time in seconds to wait for send sensors data periodic task to be "
"finished before allowing periodic call to happen again. Should be less than "
"send_sensor_data_interval value."
msgstr ""

#: ironic/conf/conductor.py:118
msgid ""
"List of comma separated meter types which need to be sent to Ceilometer. The "
"default value, \"ALL\", is a special value meaning send all the sensor data."
msgstr ""

#: ironic/conf/conductor.py:123
msgid ""
"The default for sensor data collection is to only collect data for machines "
"that are deployed, however operators may desire to know if there are "
"failures in hardware that is not presently in use. When set to true, the "
"conductor will collect sensor information from all nodes when sensor data "
"collection is enabled via the send_sensor_data setting."
msgstr ""

#: ironic/conf/conductor.py:133
msgid ""
"When conductors join or leave the cluster, existing conductors may need to "
"update any persistent local state as nodes are moved around the cluster. "
"This option controls how often, in seconds, each conductor will check for "
"nodes that it should \"take over\". Set it to 0 (or a negative value) to "
"disable the check entirely."
msgstr ""

#: ironic/conf/conductor.py:142
msgid ""
"Name of the Swift container to store config drive data. Used when "
"configdrive_use_object_store is True."
msgstr ""

#: ironic/conf/conductor.py:147
msgid ""
"The timeout (in seconds) after which a configdrive temporary URL becomes "
"invalid. Defaults to deploy_callback_timeout if it is set, otherwise to 1800 "
"seconds. Used when configdrive_use_object_store is True."
msgstr ""

#: ironic/conf/conductor.py:155
msgid "Timeout (seconds) for waiting for node inspection. 0 - unlimited."
msgstr ""

#: ironic/conf/conductor.py:160
msgid ""
"Enables or disables automated cleaning. Automated cleaning is a configurable "
"set of steps, such as erasing disk drives, that are performed on the node to "
"ensure it is in a baseline state and ready to be deployed to. This is done "
"after instance deletion as well as during the transition from a "
"\"manageable\" to \"available\" state. When enabled, the particular steps "
"performed to clean a node depend on which driver that node is managed by; "
"see the individual driver's documentation for details. NOTE: The "
"introduction of the cleaning operation causes instance deletion to take "
"significantly longer. In an environment where all tenants are trusted (eg, "
"because there is only one tenant), this option could be safely disabled."
msgstr ""

#: ironic/conf/conductor.py:179
msgid ""
"Whether to allow nodes to enter or undergo deploy or cleaning when in "
"maintenance mode. If this option is set to False, and a node enters "
"maintenance during deploy or cleaning, the process will be aborted after the "
"next heartbeat. Automated cleaning or making a node available will also fail."
" If True (the default), the process will begin and will pause after the node "
"starts heartbeating. Moving it from maintenance will make the process "
"continue."
msgstr ""

#: ironic/conf/conductor.py:191
msgid ""
"Timeout (seconds) to wait for a callback from the ramdisk doing the cleaning."
" If the timeout is reached the node will be put in the \"clean failed\" "
"provision state. Set to 0 to disable timeout."
msgstr ""

#: ironic/conf/conductor.py:198
msgid ""
"Timeout (seconds) to wait for a callback from the rescue ramdisk. If the "
"timeout is reached the node will be put in the \"rescue failed\" provision "
"state. Set to 0 to disable timeout."
msgstr ""

#: ironic/conf/conductor.py:206
msgid ""
"Timeout (in seconds) of soft reboot and soft power off operation. This value "
"always has to be positive."
msgstr ""

#: ironic/conf/conductor.py:211
msgid ""
"Number of seconds to wait for power operations to complete, i.e., so that a "
"baremetal node is in the desired power state. If timed out, the power "
"operation is considered a failure."
msgstr ""

#: ironic/conf/conductor.py:217
msgid ""
"Interval (in seconds) between checking the power state for nodes previously "
"put into maintenance mode due to power synchronization failure. A node is "
"automatically moved out of maintenance mode once its power state is "
"retrieved successfully. Set to 0 to disable this check."
msgstr ""

#: ironic/conf/conductor.py:225
msgid ""
"Name of the conductor group to join. Can be up to 255 characters and is case "
"insensitive. This conductor will only manage nodes with a matching "
"\"conductor_group\" field set on the node."
msgstr ""

#: ironic/conf/conductor.py:232
msgid "Allow deleting nodes which are in state 'available'. Defaults to True."
msgstr ""

#: ironic/conf/conductor.py:235
msgid ""
"Whether to enable publishing the baremetal API endpoint via multicast DNS."
msgstr ""

#: ironic/conf/conductor.py:239
msgid ""
"Glance ID, http:// or file:// URL of the kernel of the default deploy image."
msgstr ""

#: ironic/conf/conductor.py:243
msgid ""
"Glance ID, http:// or file:// URL of the initramfs of the default deploy "
"image."
msgstr ""

#: ironic/conf/conductor.py:247
msgid ""
"Glance ID, http:// or file:// URL of the kernel of the default rescue image."
msgstr ""

#: ironic/conf/conductor.py:251
msgid ""
"Glance ID, http:// or file:// URL of the initramfs of the default rescue "
"image."
msgstr ""

#: ironic/conf/conductor.py:257
msgid "Password hash algorithm to be used for the rescue password."
msgstr ""

#: ironic/conf/conductor.py:263
msgid ""
"Option to cause the conductor to not fallback to an un-hashed version of the "
"rescue password, permitting rescue with older ironic-python-agent ramdisks."
msgstr ""

#: ironic/conf/conductor.py:269
msgid ""
"Glance ID, http:// or file:// URL of the EFI system partition image "
"containing EFI boot loader. This image will be used by ironic when building "
"UEFI-bootable ISO out of kernel and ramdisk. Required for UEFI boot from "
"partition images."
msgstr ""

#: ironic/conf/conductor.py:277
msgid ""
"Priority to run automated clean steps for both in-band and out of band clean "
"steps, provided in interface.step_name:priority format, e.g. deploy."
"erase_devices_metadata:123. The option can be specified multiple times to "
"define priorities for multiple steps. If set to 0, this specific step will "
"not run during cleaning. If unset for an inband clean step, will use the "
"priority set in the ramdisk."
msgstr ""

#: ironic/conf/console.py:24
msgid ""
"Path to serial console terminal program. Used only by Shell In A Box console."
""
msgstr ""

#: ironic/conf/console.py:27
msgid ""
"Directory containing the terminal SSL cert (PEM) for serial console access. "
"Used only by Shell In A Box console."
msgstr ""

#: ironic/conf/console.py:31
msgid ""
"Directory for holding terminal pid files. If not specified, the temporary "
"directory will be used."
msgstr ""

#: ironic/conf/console.py:37
msgid ""
"Timeout (in seconds) for the terminal session to be closed on inactivity. "
"Set to 0 to disable timeout. Used only by Socat console."
msgstr ""

#: ironic/conf/console.py:42
msgid ""
"Time interval (in seconds) for checking the status of console subprocess."
msgstr ""

#: ironic/conf/console.py:46
msgid "Time (in seconds) to wait for the console subprocess to start."
msgstr ""

#: ironic/conf/console.py:50
msgid ""
"Time (in seconds) to wait for the console subprocess to exit before sending "
"SIGKILL signal."
msgstr ""

#: ironic/conf/console.py:54
msgid ""
"IP address of Socat service running on the host of ironic conductor. Used "
"only by Socat console."
msgstr ""

#: ironic/conf/console.py:59
msgid ""
"A range of ports available to be used for the console proxy service running "
"on the host of ironic conductor, in the form of <start>:<stop>. This option "
"is used by both Shellinabox and Socat console"
msgstr ""

#: ironic/conf/database.py:23
msgid "MySQL engine to use."
msgstr ""

#: ironic/conf/default.py:32
msgid ""
"Specify the list of {0} interfaces to load during service initialization. "
"Missing {0} interfaces, or {0} interfaces which fail to initialize, will "
"prevent the ironic-conductor service from starting. At least one {0} "
"interface that is supported by each enabled hardware type must be enabled "
"here, or the ironic-conductor service will not start. Must not be an empty "
"list. The default value is a recommended set of production-oriented {0} "
"interfaces. A complete list of {0} interfaces present on your system may be "
"found by enumerating the \"ironic.hardware.interfaces.{0}\" entrypoint. When "
"setting this value, please make sure that every enabled hardware type will "
"have the same set of enabled {0} interfaces on every ironic-conductor "
"service."
msgstr ""

#: ironic/conf/default.py:50
msgid ""
"Default {0} interface to be used for nodes that do not have {0}_interface "
"field set. A complete list of {0} interfaces present on your system may be "
"found by enumerating the \"ironic.hardware.interfaces.{0}\" entrypoint."
msgstr ""

#: ironic/conf/default.py:60
msgid "no authentication"
msgstr ""

#: ironic/conf/default.py:61
msgid "use the Identity service for authentication"
msgstr ""

#: ironic/conf/default.py:63
msgid "HTTP basic authentication"
msgstr ""

#: ironic/conf/default.py:64
msgid ""
"Authentication strategy used by ironic-api. \"noauth\" should not be used in "
"a production environment because all authentication will be disabled."
msgstr ""

#: ironic/conf/default.py:69
msgid ""
"Path to Apache format user authentication file used when auth_strategy="
"http_basic"
msgstr ""

#: ironic/conf/default.py:73
msgid ""
"Return server tracebacks in the API response for any error responses. "
"WARNING: this is insecure and should not be used in a production environment."
""
msgstr ""

#: ironic/conf/default.py:78
msgid ""
"Enable pecan debug mode. WARNING: this is insecure and should not be used in "
"a production environment."
msgstr ""

#: ironic/conf/default.py:82
msgid ""
"Resource class to use for new nodes when no resource class is provided in "
"the creation request."
msgstr ""

#: ironic/conf/default.py:89
msgid ""
"Specify the list of hardware types to load during service initialization. "
"Missing hardware types, or hardware types which fail to initialize, will "
"prevent the conductor service from starting. This option defaults to a "
"recommended set of production-oriented hardware types. A complete list of "
"hardware types present on your system may be found by enumerating the "
"\"ironic.hardware.types\" entrypoint."
msgstr ""

#: ironic/conf/default.py:163
msgid ""
"Max number of characters of any node last_error/maintenance_reason pushed to "
"database."
msgstr ""

#: ironic/conf/default.py:170
msgid ""
"Exponent to determine number of hash partitions to use when distributing "
"load across conductors. Larger values will result in more even distribution "
"of load and less load when rebalancing the ring, but more memory usage. "
"Number of partitions per conductor is (2^hash_partition_exponent). This "
"determines the granularity of rebalancing: given 10 hosts, and an exponent "
"of the 2, there are 40 partitions in the ring.A few thousand partitions "
"should make rebalancing smooth in most cases. The default is suitable for up "
"to a few hundred conductors. Configuring for too many partitions has a "
"negative impact on CPU usage."
msgstr ""

#: ironic/conf/default.py:184
msgid ""
"Time (in seconds) after which the hash ring is considered outdated and is "
"refreshed on the next access."
msgstr ""

#: ironic/conf/default.py:191
msgid ""
"Hash function to use when building the hash ring. If running on a FIPS "
"system, do not use md5. WARNING: all ironic services in a cluster MUST use "
"the same algorithm at all times. Changing the algorithm requires an offline "
"update."
msgstr ""

#: ironic/conf/default.py:202
msgid "If True, convert backing images to \"raw\" disk image format."
msgstr ""

#: ironic/conf/default.py:207
msgid ""
"The scale factor used for estimating the size of a raw image converted from "
"compact image formats such as QCOW2. Default is 2.0, must be greater than 1."
"0."
msgstr ""

#: ironic/conf/default.py:213
msgid "Path to isolinux binary file."
msgstr ""

#: ironic/conf/default.py:217
msgid "Template file for isolinux configuration file."
msgstr ""

#: ironic/conf/default.py:220
msgid ""
"GRUB2 configuration file location on the UEFI ISO images produced by ironic. "
"The default value is usually incorrect and should not be relied on. If you "
"use a GRUB2 image from a certain distribution, use a distribution-specific "
"path here, e.g. EFI/ubuntu/grub.cfg"
msgstr ""

#: ironic/conf/default.py:229
msgid "Template file for grub configuration file."
msgstr ""

#: ironic/conf/default.py:231
msgid ""
"Path to ldlinux.c32 file. This file is required for syslinux 5.0 or later. "
"If not specified, the file is looked for in \"/usr/lib/syslinux/modules/bios/"
"ldlinux.c32\" and \"/usr/share/syslinux/ldlinux.c32\"."
msgstr ""

#: ironic/conf/default.py:237
msgid ""
"Path to EFI System Partition image file. This file is recommended for "
"creating UEFI bootable ISO images efficiently. ESP image should contain a "
"FAT12/16/32-formatted file system holding EFI boot loaders (e.g. GRUB2) for "
"each hardware architecture ironic needs to boot. This option is only used "
"when neither ESP nor ISO deploy image is configured to the node being "
"deployed in which case ironic will attempt to fetch ESP image from the "
"configured location or extract ESP image from UEFI-bootable deploy ISO image."
""
msgstr ""

#: ironic/conf/default.py:254
msgid "Run image downloads and raw format conversions in parallel."
msgstr ""

#: ironic/conf/default.py:262
msgid ""
"IPv4 address of this host. If unset, will determine the IP programmatically. "
"If unable to do so, will use \"127.0.0.1\". NOTE: This field does accept an "
"IPv6 address as an override for templates and URLs, however it is "
"recommended that [DEFAULT]my_ipv6 is used along with DNS names for service "
"URLs for dual-stack environments."
msgstr ""

#: ironic/conf/default.py:272
msgid ""
"IP address of this host using IPv6. This value must be supplied via the "
"configuration and cannot be adequately programmatically determined like the "
"[DEFAULT]my_ip parameter for IPv4."
msgstr ""

#: ironic/conf/default.py:284
msgid "\"debug\" level"
msgstr ""

#: ironic/conf/default.py:285
msgid "\"info\" level"
msgstr ""

#: ironic/conf/default.py:286
msgid "\"warning\" level"
msgstr ""

#: ironic/conf/default.py:287
msgid "\"error\" level"
msgstr ""

#: ironic/conf/default.py:288
msgid "\"critical\" level"
msgstr ""

#: ironic/conf/default.py:289
msgid ""
"Specifies the minimum level for which to send notifications. If not set, no "
"notifications will be sent. The default is for this option to be unset."
msgstr ""

#: ironic/conf/default.py:295
msgid ""
"\n"
"Specifies the topics for the versioned notifications issued by Ironic.\n"
"\n"
"The default value is fine for most deployments and rarely needs to be "
"changed.\n"
"However, if you have a third-party service that consumes versioned\n"
"notifications, it might be worth getting a topic for that service.\n"
"Ironic will send a message containing a versioned notification payload to "
"each\n"
"topic queue in this list.\n"
"\n"
"The list of versioned notifications is visible in\n"
"https://docs.openstack.org/ironic/latest/admin/notifications.html\n"
msgstr ""

#: ironic/conf/default.py:314
msgid "Directory where the ironic python module is installed."
msgstr ""

#: ironic/conf/default.py:318
msgid "Directory where ironic binaries are installed."
msgstr ""

#: ironic/conf/default.py:321
msgid "Top-level directory for maintaining ironic's state."
msgstr ""

#: ironic/conf/default.py:328
msgid ""
"Default mode for portgroups. Allowed values can be found in the linux kernel "
"documentation on bonding: https://www.kernel.org/doc/Documentation/"
"networking/bonding.txt."
msgstr ""

#: ironic/conf/default.py:339
msgid ""
"Name of this node. This can be an opaque identifier. It is not necessarily a "
"hostname, FQDN, or IP address. However, the node name must be valid within "
"an AMQP key, and if using ZeroMQ (will be removed in the Stein release), a "
"valid hostname, FQDN, or IP address."
msgstr ""

#: ironic/conf/default.py:348
msgid ""
"Used for rolling upgrades. Setting this option downgrades (or pins) the Bare "
"Metal API, the internal ironic RPC communication, and the database objects "
"to their respective versions, so they are compatible with older services. "
"When doing a rolling upgrade from version N to version N+1, set (to pin) "
"this to N. To unpin (default), leave it unset and the latest versions will "
"be used."
msgstr ""

#: ironic/conf/default.py:358
msgid "use oslo.messaging transport"
msgstr ""

#: ironic/conf/default.py:359
msgid "use JSON RPC transport"
msgstr ""

#: ironic/conf/default.py:360
msgid ""
"Which RPC transport implementation to use between conductor and API services"
msgstr ""

#: ironic/conf/default.py:365
msgid ""
"Setting to govern if Ironic should only warn instead of attempting to hold "
"back the request in order to prevent the exhaustion of system memory."
msgstr ""

#: ironic/conf/default.py:371
msgid ""
"Minimum memory in MiB for the system to have available prior to starting a "
"memory intensive process on the conductor."
msgstr ""

#: ironic/conf/default.py:377
msgid ""
"Seconds to wait between retries for free memory before launching the process."
" This, combined with ``memory_wait_retries`` allows the conductor to "
"determine how long we should attempt to directly retry."
msgstr ""

#: ironic/conf/default.py:385
msgid ""
"Number of retries to hold onto the worker before failing or returning the "
"thread to the pool if the conductor can automatically retry."
msgstr ""

#: ironic/conf/default.py:393
msgid ""
"Path to the rootwrap configuration file to use for running commands as root."
msgstr ""

#: ironic/conf/default.py:398
msgid "Temporary working directory, default is Python temp dir."
msgstr ""

#: ironic/conf/default.py:406
msgid ""
"CA certificates to be used for certificate verification. This can be either "
"a Boolean value or a path to a CA_BUNDLE file.If set to True, the "
"certificates present in the standard path are used to verify the host "
"certificates.If set to False, the conductor will ignore verifying the SSL "
"certificate presented by the host.If it\"s a path, conductor uses the "
"specified certificate for SSL verification. If the path does not exist, the "
"behavior is same as when this value is set to True i.e the certificates "
"present in the standard path are used for SSL verification.Defaults to True."
msgstr ""

#: ironic/conf/default.py:422
msgid "Connection timeout when accessing remote web servers with images."
msgstr ""

#: ironic/conf/deploy.py:25
msgid ""
"ironic-conductor node's HTTP server URL. Example: http://192.1.2.3:8080"
msgstr ""

#: ironic/conf/deploy.py:29
msgid "ironic-conductor node's HTTP root path."
msgstr ""

#: ironic/conf/deploy.py:31
msgid ""
"URL of the ironic-conductor node's HTTP server for boot methods such as "
"virtual media, where images could be served outside of the provisioning "
"network. Does not apply when Swift is used. Defaults to http_url."
msgstr ""

#: ironic/conf/deploy.py:37
msgid ""
"Agent callback URL of the bare metal API for boot methods such as virtual "
"media, where images could be served outside of the provisioning network. "
"Defaults to the configuration from [service_catalog]."
msgstr ""

#: ironic/conf/deploy.py:44
msgid ""
"Whether to support the use of ATA Secure Erase during the cleaning process. "
"Defaults to True."
msgstr ""

#: ironic/conf/deploy.py:49
msgid ""
"Whether to support the use of NVMe Secure Erase during the cleaning process. "
"Currently nvme-cli format command is supported with user-data and crypto "
"modes, depending on device capabilities.Defaults to True."
msgstr ""

#: ironic/conf/deploy.py:56
msgid ""
"Priority to run in-band erase devices via the Ironic Python Agent ramdisk. "
"If unset, will use the priority set in the ramdisk (defaults to 10 for the "
"GenericHardwareManager). If set to 0, will not run during cleaning."
msgstr ""

#: ironic/conf/deploy.py:63
msgid ""
"Priority to run in-band clean step that erases metadata from devices, via "
"the Ironic Python Agent ramdisk. If unset, will use the priority set in the "
"ramdisk (defaults to 99 for the GenericHardwareManager). If set to 0, will "
"not run during cleaning."
msgstr ""

#: ironic/conf/deploy.py:71
msgid ""
"Priority to run in-band clean step that erases RAID configuration from "
"devices, via the Ironic Python Agent ramdisk. If unset, will use the "
"priority set in the ramdisk (defaults to 0 for the GenericHardwareManager). "
"If set to 0, will not run during cleaning."
msgstr ""

#: ironic/conf/deploy.py:79
msgid ""
"Priority to run in-band clean step that creates RAID configuration from "
"devices, via the Ironic Python Agent ramdisk. If unset, will use the "
"priority set in the ramdisk (defaults to 0 for the GenericHardwareManager). "
"If set to 0, will not run during cleaning."
msgstr ""

#: ironic/conf/deploy.py:89
msgid ""
"During shred, overwrite all block devices N times with random data. This is "
"only used if a device could not be ATA Secure Erased. Defaults to 1."
msgstr ""

#: ironic/conf/deploy.py:95
msgid ""
"Whether to write zeros to a node's block devices after writing random data. "
"This will write zeros to the device even when deploy."
"shred_random_overwrite_iterations is 0. This option is only used if a device "
"could not be ATA Secure Erased. Defaults to True."
msgstr ""

#: ironic/conf/deploy.py:104
msgid ""
"Defines what to do if a secure erase operation (NVMe or ATA) fails during "
"cleaning in the Ironic Python Agent. If False, the cleaning operation will "
"fail and the node will be put in ``clean failed`` state. If True, shred will "
"be invoked and cleaning will continue."
msgstr ""

#: ironic/conf/deploy.py:114
msgid ""
"Defines the target pool size used by Ironic Python Agent ramdisk to erase "
"disk devices. The number of threads created to erase disks will not exceed "
"this value or the number of disks to be erased."
msgstr ""

#: ironic/conf/deploy.py:121
msgid "Whether to power off a node after deploy failure. Defaults to True."
msgstr ""

#: ironic/conf/deploy.py:124
msgid "boot from a network"
msgstr ""

#: ironic/conf/deploy.py:125
msgid "local boot"
msgstr ""

#: ironic/conf/deploy.py:128
msgid ""
"Default boot option to use when no boot option is requested in node's "
"driver_info. Defaults to \"local\". Prior to the Ussuri release, the default "
"was \"netboot\"."
msgstr ""

#: ironic/conf/deploy.py:133 ironic/conf/ilo.py:99
msgid "UEFI boot mode"
msgstr ""

#: ironic/conf/deploy.py:134
msgid "Legacy BIOS boot mode"
msgstr ""

#: ironic/conf/deploy.py:137
#, python-format
msgid ""
"Default boot mode to use when no boot mode is requested in node's "
"driver_info, capabilities or in the `instance_info` configuration. Currently "
"the default boot mode is \"%(bios)s\", but it will be changed to \"%(uefi)s "
"in the future. It is recommended to set an explicit value for this option. "
"This option only has effect when management interface supports boot mode "
"management"
msgstr ""

#: ironic/conf/deploy.py:152
msgid ""
"Whether to upload the config drive to object store. Set this option to True "
"to store config drive in a swift endpoint."
msgstr ""

#: ironic/conf/deploy.py:157
msgid ""
"The name of subdirectory under ironic-conductor node's HTTP root path which "
"is used to place instance images for the direct deploy interface, when local "
"HTTP service is incorporated to provide instance image instead of swift "
"tempurls."
msgstr ""

#: ironic/conf/deploy.py:165
msgid ""
"Whether to allow deployment agents to perform lookup, heartbeat operations "
"during initial states of a machine lifecycle and by-pass the normal setup "
"procedures for a ramdisk. This feature also enables power operations which "
"are part of deployment processes to be bypassed if the ramdisk has performed "
"a heartbeat operation using the fast_track_timeout setting."
msgstr ""

#: ironic/conf/deploy.py:178
msgid ""
"Seconds for which the last heartbeat event is to be considered valid for the "
"purpose of a fast track sequence. This setting should generally be less than "
"the number of seconds for \"Power-On Self Test\" and typical ramdisk start-"
"up. This value should not exceed the [api]ramdisk_heartbeat_timeout setting."
msgstr ""

#: ironic/conf/deploy.py:188
msgid ""
"If the ironic-python-agent should skip read-only devices when running the "
"\"erase_devices\" clean step where block devices are zeroed out. This "
"requires ironic-python-agent 6.0.0 or greater. By default a read-only device "
"will cause non-metadata based cleaning operations to fail due to the "
"possible operational security risk of data being retained between "
"deployments of the bare metal node."
msgstr ""

#: ironic/conf/deploy.py:197
msgid ""
"In case the ramdisk is already a bootable iso, using this option it will be "
"directly provided by an external HTTP service using its full url."
msgstr ""

#: ironic/conf/deploy.py:201
msgid ""
"This is the default behavior. The image is downloaded, prepared and cached "
"locally, to be served from the conductor."
msgstr ""

#: ironic/conf/deploy.py:205
msgid ""
"Same as \"http\", but if the image is a Glance UUID, it is exposed via a "
"Swift temporary URL."
msgstr ""

#: ironic/conf/deploy.py:210
msgid ""
"Specifies whether a boot iso image should be served from its own original "
"location using the image source url directly, or if ironic should cache the "
"image on the conductor and serve it from ironic's own http server."
msgstr ""

#: ironic/conf/dhcp.py:23
msgid ""
"DHCP provider to use. \"neutron\" uses Neutron, and \"none\" uses a no-op "
"provider."
msgstr ""

#: ironic/conf/drac.py:22
msgid ""
"Interval (in seconds) between periodic RAID job status checks to determine "
"whether the asynchronous RAID configuration was successfully finished or not."
""
msgstr ""

#: ironic/conf/drac.py:28
msgid ""
"Maximum amount of time (in seconds) to wait for the boot device "
"configuration job to transition to the correct state to allow a reboot or "
"power on to complete."
msgstr ""

#: ironic/conf/drac.py:35
msgid ""
"Maximum number of retries for the configuration job to complete successfully."
""
msgstr ""

#: ironic/conf/drac.py:41
msgid ""
"Number of seconds to wait between checking for completed import "
"configuration task"
msgstr ""

#: ironic/conf/drac.py:46
msgid ""
"Maximum time (in seconds) to wait for factory reset of BIOS settings to "
"complete."
msgstr ""

#: ironic/conf/glance.py:26
msgid ""
"A list of URL schemes that can be downloaded directly via the direct_url.  "
"Currently supported schemes: [file]."
msgstr ""

#: ironic/conf/glance.py:35
msgid ""
"The secret token given to Swift to allow temporary URL downloads. Required "
"for temporary URLs. For the Swift backend, the key on the service project "
"(as set in the [swift] section) is used by default."
msgstr ""

#: ironic/conf/glance.py:42
msgid ""
"The length of time in seconds that the temporary URL will be valid for. "
"Defaults to 20 minutes. If some deploys get a 401 response code when trying "
"to download from the temporary URL, try raising this duration. This value "
"must be greater than or equal to the value for "
"swift_temp_url_expected_download_start_delay"
msgstr ""

#: ironic/conf/glance.py:51
msgid ""
"Whether to cache generated Swift temporary URLs. Setting it to true is only "
"useful when an image caching proxy is used. Defaults to False."
msgstr ""

#: ironic/conf/glance.py:56
msgid ""
"This is the delay (in seconds) from the time of the deploy request (when the "
"Swift temporary URL is generated) to when the IPA ramdisk starts up and URL "
"is used for the image download. This value is used to check if the Swift "
"temporary URL duration is large enough to let the image download begin. Also "
"if temporary URL caching is enabled this will determine if a cached entry "
"will still be valid when the download starts. swift_temp_url_duration value "
"must be greater than or equal to this option's value. Defaults to 0."
msgstr ""

#: ironic/conf/glance.py:69
msgid ""
"The \"endpoint\" (scheme, hostname, optional port) for the Swift URL of the "
"form \"endpoint_url/api_version/account/container/object_id\". Do not "
"include trailing \"/\". For example, use \"https://swift.example.com\". If "
"using RADOS Gateway, endpoint may also contain /swift path; if it does not, "
"it will be appended. Used for temporary URLs, will be fetched from the "
"service catalog, if not provided."
msgstr ""

#: ironic/conf/glance.py:80
msgid ""
"The Swift API version to create a temporary URL for. Defaults to \"v1\". "
"Swift temporary URL format: \"endpoint_url/api_version/account/container/"
"object_id\""
msgstr ""

#: ironic/conf/glance.py:85
msgid ""
"The account that Glance uses to communicate with Swift. The format is "
"\"AUTH_uuid\". \"uuid\" is the UUID for the account configured in the glance-"
"api.conf. For example: \"AUTH_a422b2-91f3-2f46-74b7-d7c9e8958f5d30\". If not "
"set, the default value is calculated based on the ID of the project used to "
"access Swift (as set in the [swift] section). Swift temporary URL format: "
"\"endpoint_url/api_version/account/container/object_id\""
msgstr ""

#: ironic/conf/glance.py:96
msgid ""
"The Swift container Glance is configured to store its images in. Defaults to "
"\"glance\", which is the default in glance-api.conf. Swift temporary URL "
"format: \"endpoint_url/api_version/account/container/object_id\""
msgstr ""

#: ironic/conf/glance.py:103
msgid ""
"This should match a config by the same name in the Glance configuration file."
" When set to 0, a single-tenant store will only use one container to store "
"all images. When set to an integer value between 1 and 32, a single-tenant "
"store will use multiple containers to store images, and this value will "
"determine how many containers are created."
msgstr ""

#: ironic/conf/glance.py:112
msgid "Number of retries when downloading an image from glance."
msgstr ""

#: ironic/conf/healthcheck.py:20
msgid ""
"Enable the health check endpoint at /healthcheck. Note that this is "
"unauthenticated. More information is available at https://docs.openstack.org/"
"oslo.middleware/latest/reference/healthcheck_plugins.html."
msgstr ""

#: ironic/conf/ibmc.py:24
msgid "Maximum number of attempts to try to connect to iBMC"
msgstr ""

#: ironic/conf/ibmc.py:29
msgid "Number of seconds to wait between attempts to connect to iBMC"
msgstr ""

#: ironic/conf/ilo.py:23
msgid "Timeout (in seconds) for iLO operations"
msgstr ""

#: ironic/conf/ilo.py:26
msgid "Port to be used for iLO operations"
msgstr ""

#: ironic/conf/ilo.py:29
msgid "The Swift iLO container to store data."
msgstr ""

#: ironic/conf/ilo.py:32
msgid "Amount of time in seconds for Swift objects to auto-expire."
msgstr ""

#: ironic/conf/ilo.py:36
msgid ""
"Set this to True to use http web server to host floppy images and generated "
"boot ISO. This requires http_root and http_url to be configured in the "
"[deploy] section of the config file. If this is set to False, then Ironic "
"will use Swift to host the floppy images and generated boot_iso."
msgstr ""

#: ironic/conf/ilo.py:45
msgid "Priority for reset_ilo clean step."
msgstr ""

#: ironic/conf/ilo.py:48
msgid "Priority for reset_bios_to_default clean step."
msgstr ""

#: ironic/conf/ilo.py:51
msgid ""
"Priority for reset_secure_boot_keys clean step. This step will reset the "
"secure boot keys to manufacturing defaults."
msgstr ""

#: ironic/conf/ilo.py:56
msgid ""
"Priority for clear_secure_boot_keys clean step. This step is not enabled by "
"default. It can be enabled to clear all secure boot keys enrolled with iLO."
msgstr ""

#: ironic/conf/ilo.py:61
msgid ""
"Priority for reset_ilo_credential clean step. This step requires "
"\"ilo_change_password\" parameter to be updated in nodes's driver_info with "
"the new password."
msgstr ""

#: ironic/conf/ilo.py:67
msgid "Amount of time in seconds to wait in between power operations"
msgstr ""

#: ironic/conf/ilo.py:72
msgid ""
"Interval (in seconds) between periodic erase-devices status checks to "
"determine whether the asynchronous out-of-band erase-devices was "
"successfully finished or not. On an average, a 300GB HDD with default "
"pattern \"overwrite\" would take approximately 9 hours and 300GB SSD with "
"default pattern \"block\" would take approx. 30 seconds to complete sanitize "
"disk erase."
msgstr ""

#: ironic/conf/ilo.py:81
msgid "Its being replaced by new configuration parameter \"verify_ca\"."
msgstr ""

#: ironic/conf/ilo.py:83
msgid "CA certificate file to validate iLO."
msgstr ""

#: ironic/conf/ilo.py:86
msgid ""
"CA certificate to validate iLO. This can be either a Boolean value, a path "
"to a CA_BUNDLE file or directory with certificates of trusted CAs. If set to "
"True the driver will verify the host certificates; if False the driver will "
"ignore verifying the SSL certificate. If it's a path the driver will use the "
"specified certificate or one of the certificates in the directory. Defaults "
"to True."
msgstr ""

#: ironic/conf/ilo.py:96
msgid "based on boot mode settings on the system"
msgstr ""

#: ironic/conf/ilo.py:98
msgid "BIOS boot mode"
msgstr ""

#: ironic/conf/ilo.py:100
msgid ""
"Default boot mode to be used in provisioning when \"boot_mode\" capability "
"is not provided in the \"properties/capabilities\" of the node. The default "
"is \"auto\" for backward compatibility. When \"auto\" is specified, default "
"boot mode will be selected based on boot mode settings on the system."
msgstr ""

#: ironic/conf/ilo.py:108 ironic/conf/redfish.py:77
msgid ""
"File permission for swift-less image hosting with the octal permission "
"representation of file access permissions. This setting defaults to ``644``, "
"or as the octal number ``0o644`` in Python. This setting must be set to the "
"octal number representation, meaning starting with ``0o``."
msgstr ""

#: ironic/conf/ilo.py:117 ironic/conf/irmc.py:113 ironic/conf/redfish.py:69
msgid ""
"Additional kernel parameters to pass down to the instance kernel. These "
"parameters can be consumed by the kernel or by the applications by reading /"
"proc/cmdline. Mind severe cmdline size limit! Can be overridden by "
"`instance_info/kernel_append_params` property."
msgstr ""

#: ironic/conf/inspector.py:22
msgid "period (in seconds) to check status of nodes on inspection"
msgstr ""

#: ironic/conf/inspector.py:25
msgid ""
"extra kernel parameters to pass to the inspection ramdisk when boot is "
"managed by ironic (not ironic-inspector). Pairs key=value separated by "
"spaces."
msgstr ""

#: ironic/conf/inspector.py:30
msgid "whether to power off a node after inspection finishes"
msgstr ""

#: ironic/conf/inspector.py:33
msgid ""
"endpoint to use as a callback for posting back introspection data when boot "
"is managed by ironic. Standard keystoneauth options are used by default."
msgstr ""

#: ironic/conf/inspector.py:37
msgid ""
"require that the in-band inspection boot is fully managed by ironic. Set "
"this to True if your installation of ironic-inspector does not have a "
"separate PXE boot environment."
msgstr ""

#: ironic/conf/ipmi.py:26
msgid ""
"Maximum time in seconds to retry retryable IPMI operations. (An operation is "
"retryable, for example, if the requested operation fails because the BMC is "
"busy.) Setting this too high can cause the sync power state periodic task to "
"hang when there are slow or unresponsive BMCs."
msgstr ""

#: ironic/conf/ipmi.py:36
msgid ""
"Minimum time, in seconds, between IPMI operations sent to a server. There is "
"a risk with some hardware that setting this too low may cause the BMC to "
"crash. Recommended setting is 5 seconds."
msgstr ""

#: ironic/conf/ipmi.py:42
msgid ""
"When set to True and the parameters are supported by ipmitool, the number of "
"retries and the retry interval are passed to ipmitool as parameters, and "
"ipmitool will do the retries.  When set to False, ironic will retry the "
"ipmitool commands. Recommended setting is False"
msgstr ""

#: ironic/conf/ipmi.py:51
msgid ""
"Kill `ipmitool` process invoked by ironic to read node power state if "
"`ipmitool` process does not exit after `command_retry_timeout` timeout "
"expires. Recommended setting is True"
msgstr ""

#: ironic/conf/ipmi.py:58
msgid ""
"Default timeout behavior whether ironic sends a raw IPMI command to disable "
"the 60 second timeout for booting. Setting this option to False will NOT "
"send that command, the default value is True. It may be overridden by per-"
"node 'ipmi_disable_boot_timeout' option in node's 'driver_info' field."
msgstr ""

#: ironic/conf/ipmi.py:67
msgid ""
"Additional errors ipmitool may encounter, specific to the environment it is "
"run in."
msgstr ""

#: ironic/conf/ipmi.py:72
msgid ""
"Enables all ipmi commands to be executed with an additional debugging output."
" This is a separate option as ipmitool can log a substantial amount of "
"misleading text when in this mode."
msgstr ""

#: ironic/conf/ipmi.py:78
msgid ""
"List of possible cipher suites versions that can be supported by the "
"hardware in case the field `cipher_suite` is not set for the node."
msgstr ""

#: ironic/conf/irmc.py:23
msgid "Ironic conductor node's \"NFS\" or \"CIFS\" root path"
msgstr ""

#: ironic/conf/irmc.py:25
msgid "IP of remote image server"
msgstr ""

#: ironic/conf/irmc.py:28
msgid "CIFS (Common Internet File System) protocol"
msgstr ""

#: ironic/conf/irmc.py:30
msgid "NFS (Network File System) protocol"
msgstr ""

#: ironic/conf/irmc.py:32
msgid "Share type of virtual media"
msgstr ""

#: ironic/conf/irmc.py:35
msgid "share name of remote_image_server"
msgstr ""

#: ironic/conf/irmc.py:37
msgid "User name of remote_image_server"
msgstr ""

#: ironic/conf/irmc.py:39
msgid "Password of remote_image_user_name"
msgstr ""

#: ironic/conf/irmc.py:42
msgid "Domain name of remote_image_user_name"
msgstr ""

#: ironic/conf/irmc.py:45
msgid "port 443"
msgstr ""

#: ironic/conf/irmc.py:46
msgid "port 80"
msgstr ""

#: ironic/conf/irmc.py:47
msgid "Port to be used for iRMC operations"
msgstr ""

#: ironic/conf/irmc.py:50
msgid "Basic authentication"
msgstr ""

#: ironic/conf/irmc.py:51
msgid "Digest authentication"
msgstr ""

#: ironic/conf/irmc.py:52
msgid "Authentication method to be used for iRMC operations"
msgstr ""

#: ironic/conf/irmc.py:56
msgid "Timeout (in seconds) for iRMC operations"
msgstr ""

#: ironic/conf/irmc.py:59
msgid "IPMItool"
msgstr ""

#: ironic/conf/irmc.py:60
msgid "Fujitsu SCCI (ServerView Common Command Interface)"
msgstr ""

#: ironic/conf/irmc.py:62
msgid "Sensor data retrieval method."
msgstr ""

#: ironic/conf/irmc.py:65
msgid "SNMPv1"
msgstr ""

#: ironic/conf/irmc.py:66
msgid "SNMPv2c"
msgstr ""

#: ironic/conf/irmc.py:67
msgid "SNMPv3"
msgstr ""

#: ironic/conf/irmc.py:68
msgid "SNMP protocol version"
msgstr ""

#: ironic/conf/irmc.py:71
msgid "SNMP port"
msgstr ""

#: ironic/conf/irmc.py:74
msgid "SNMP community. Required for versions \"v1\" and \"v2c\""
msgstr ""

#: ironic/conf/irmc.py:76
msgid "SNMP security name. Required for version \"v3\""
msgstr ""

#: ironic/conf/irmc.py:82
msgid "Priority for restore_irmc_bios_config clean step."
msgstr ""

#: ironic/conf/irmc.py:85
msgid ""
"List of vendor IDs and device IDs for GPU device to inspect. List items are "
"in format vendorID/deviceID and separated by commas. GPU inspection will use "
"this value to count the number of GPU device in a node. If this option is "
"not defined, then leave out pci_gpu_devices in capabilities property. Sample "
"gpu_ids value: 0x1000/0x0079,0x2100/0x0080"
msgstr ""

#: ironic/conf/irmc.py:94
msgid ""
"List of vendor IDs and device IDs for CPU FPGA to inspect. List items are in "
"format vendorID/deviceID and separated by commas. CPU inspection will use "
"this value to find existence of CPU FPGA in a node. If this option is not "
"defined, then leave out CUSTOM_CPU_FPGA in node traits. Sample fpga_ids "
"value: 0x1000/0x0079,0x2100/0x0080"
msgstr ""

#: ironic/conf/irmc.py:104
msgid ""
"Interval (in seconds) between periodic RAID status checks to determine "
"whether the asynchronous RAID configuration was successfully finished or not."
" Foreground Initialization (FGI) will start 5 minutes after creating virtual "
"drives."
msgstr ""

#: ironic/conf/metrics.py:26
msgid ""
"Backend for the agent ramdisk to use for metrics. Default possible backends "
"are \"noop\" and \"statsd\"."
msgstr ""

#: ironic/conf/metrics.py:30
msgid ""
"Prepend the hostname to all metric names sent by the agent ramdisk. The "
"format of metric names is [global_prefix.][uuid.][host_name.]prefix."
"metric_name."
msgstr ""

#: ironic/conf/metrics.py:36
msgid ""
"Prepend the node's Ironic uuid to all metric names sent by the agent ramdisk."
" The format of metric names is [global_prefix.][uuid.][host_name.]prefix."
"metric_name."
msgstr ""

#: ironic/conf/metrics.py:42
msgid ""
"Split the prepended host value by \".\" and reverse it for metrics sent by "
"the agent ramdisk (to better match the reverse hierarchical form of domain "
"names)."
msgstr ""

#: ironic/conf/metrics.py:47
msgid ""
"Prefix all metric names sent by the agent ramdisk with this value. The "
"format of metric names is [global_prefix.][uuid.][host_name.]prefix."
"metric_name."
msgstr ""

#: ironic/conf/metrics_statsd.py:25
msgid ""
"Host for the agent ramdisk to use with the statsd backend. This must be "
"accessible from networks the agent is booted on."
msgstr ""

#: ironic/conf/metrics_statsd.py:30
msgid "Port for the agent ramdisk to use with the statsd backend."
msgstr ""

#: ironic/conf/molds.py:22
msgid ""
"Configuration mold storage location. Supports \"swift\" and \"http\". By "
"default \"swift\"."
msgstr ""

#: ironic/conf/molds.py:25
msgid "User for \"http\" Basic auth. By default set empty."
msgstr ""

#: ironic/conf/molds.py:27
msgid "Password for \"http\" Basic auth. By default set empty."
msgstr ""

#: ironic/conf/molds.py:31
msgid "Retry attempts for saving or getting configuration molds."
msgstr ""

#: ironic/conf/molds.py:35
msgid "Retry interval for saving or getting configuration molds."
msgstr ""

#: ironic/conf/neutron.py:27
msgid ""
"Delay value to wait for Neutron agents to setup sufficient DHCP "
"configuration for port."
msgstr ""

#: ironic/conf/neutron.py:33
msgid "Replaced by status_code_retries and status_code_retry_delay."
msgstr ""

#: ironic/conf/neutron.py:35
msgid "DEPRECATED: Client retries in the case of a failed request."
msgstr ""

#: ironic/conf/neutron.py:39
msgid ""
"Neutron network UUID or name for the ramdisk to be booted into for cleaning "
"nodes. Required for \"neutron\" network interface. It is also required if "
"cleaning nodes when using \"flat\" network interface or \"neutron\" DHCP "
"provider. If a name is provided, it must be unique among all networks or "
"cleaning will fail."
msgstr ""

#: ironic/conf/neutron.py:48
msgid ""
"Neutron network UUID or name for the ramdisk to be booted into for "
"provisioning nodes. Required for \"neutron\" network interface. If a name is "
"provided, it must be unique among all networks or deploy will fail."
msgstr ""

#: ironic/conf/neutron.py:57
msgid ""
"List of Neutron Security Group UUIDs to be applied during provisioning of "
"the nodes. Optional for the \"neutron\" network interface and not used for "
"the \"flat\" or \"noop\" network interfaces. If not specified, default "
"security group is used."
msgstr ""

#: ironic/conf/neutron.py:66
msgid ""
"List of Neutron Security Group UUIDs to be applied during cleaning of the "
"nodes. Optional for the \"neutron\" network interface and not used for the "
"\"flat\" or \"noop\" network interfaces. If not specified, default security "
"group is used."
msgstr ""

#: ironic/conf/neutron.py:74
msgid ""
"Neutron network UUID or name for booting the ramdisk for rescue mode. This "
"is not the network that the rescue ramdisk will use post-boot -- the tenant "
"network is used for that. Required for \"neutron\" network interface, if "
"rescue mode will be used. It is not used for the \"flat\" or \"noop\" "
"network interfaces. If a name is provided, it must be unique among all "
"networks or rescue will fail."
msgstr ""

#: ironic/conf/neutron.py:85
msgid ""
"List of Neutron Security Group UUIDs to be applied during the node rescue "
"process. Optional for the \"neutron\" network interface and not used for the "
"\"flat\" or \"noop\" network interfaces. If not specified, the default "
"security group is used."
msgstr ""

#: ironic/conf/neutron.py:93
msgid ""
"Timeout for request processing when interacting with Neutron. This value "
"should be increased if neutron port action timeouts are observed as neutron "
"performs pre-commit validation prior returning to the API client which can "
"take longer than normal client/server interactions."
msgstr ""

#: ironic/conf/neutron.py:102
msgid ""
"Option to enable transmission of all ports to neutron when creating ports "
"for provisioning, cleaning, or rescue. This is done without IP addresses "
"assigned to the port, and may be useful in some bonded network "
"configurations."
msgstr ""

#: ironic/conf/neutron.py:109
msgid ""
"Neutron network UUID or name for the ramdisk to be booted into for in-band "
"inspection of nodes. If a name is provided, it must be unique among all "
"networks or inspection will fail."
msgstr ""

#: ironic/conf/neutron.py:116
msgid ""
"List of Neutron Security Group UUIDs to be applied during the node "
"inspection process. Optional for the \"neutron\" network interface and not "
"used for the \"flat\" or \"noop\" network interfaces. If not specified, the "
"default security group is used."
msgstr ""

#: ironic/conf/neutron.py:124
msgid ""
"Number of IPv6 addresses to allocate for ports created for provisioning, "
"cleaning, rescue or inspection on DHCPv6-stateful networks. Different stages "
"of the chain-loading process will request addresses with different CLID/IAID."
" Due to non-identical identifiers multiple addresses must be reserved for "
"the host to ensure each step of the boot process can successfully lease "
"addresses."
msgstr ""

#: ironic/conf/nova.py:22
msgid ""
"When set to True, it will enable the support for power state change "
"callbacks to nova. This option should be set to False in deployments that do "
"not have the openstack compute service."
msgstr ""

#: ironic/conf/pxe.py:28
msgid "Additional append parameters for baremetal PXE boot."
msgstr ""

#: ironic/conf/pxe.py:32
msgid "Default file system format for ephemeral partition, if one is created."
msgstr ""

#: ironic/conf/pxe.py:36
msgid ""
"On the ironic-conductor node, directory where images are stored on disk."
msgstr ""

#: ironic/conf/pxe.py:40
msgid ""
"On the ironic-conductor node, directory where master instance images are "
"stored on disk. Setting to the empty string disables image caching."
msgstr ""

#: ironic/conf/pxe.py:45
msgid ""
"Maximum size (in MiB) of cache for master images, including those in use."
msgstr ""

#: ironic/conf/pxe.py:51
msgid "Maximum TTL (in minutes) for old master images in cache."
msgstr ""

#: ironic/conf/pxe.py:57
msgid "On ironic-conductor node, template file for PXE loader configuration."
msgstr ""

#: ironic/conf/pxe.py:63
msgid "On ironic-conductor node, template file for iPXE operations."
msgstr ""

#: ironic/conf/pxe.py:70
msgid ""
"On ironic-conductor node, template file for PXE configuration for UEFI boot "
"loader. Generally this is used for GRUB specific templates."
msgstr ""

#: ironic/conf/pxe.py:76
msgid ""
"On ironic-conductor node, template file for PXE configuration per node "
"architecture. For example: aarch64:/opt/share/grubaa64_pxe_config.template"
msgstr ""

#: ironic/conf/pxe.py:82
msgid "IP address of ironic-conductor node's TFTP server."
msgstr ""

#: ironic/conf/pxe.py:85
msgid ""
"ironic-conductor node's TFTP root path. The ironic-conductor must have read/"
"write access to this path."
msgstr ""

#: ironic/conf/pxe.py:90
msgid ""
"On ironic-conductor node, directory where master TFTP images are stored on "
"disk. Setting to the empty string disables image caching."
msgstr ""

#: ironic/conf/pxe.py:94
msgid ""
"The permission that will be applied to the TFTP folders upon creation. This "
"should be set to the permission such that the tftpserver has access to read "
"the contents of the configured TFTP folder. This setting is only required "
"when the operating system's umask is restrictive such that ironic-conductor "
"is creating files that cannot be read by the TFTP server. Setting to <None> "
"will result in the operating system's umask to be utilized for the creation "
"of new tftp folders. It is recommended that an octal representation is "
"specified. For example: 0o755"
msgstr ""

#: ironic/conf/pxe.py:107 ironic/conf/pxe.py:120
msgid "Bootfile DHCP parameter."
msgstr ""

#: ironic/conf/pxe.py:110
msgid ""
"Directory in which to create symbolic links which represent the MAC or IP "
"address of the ports on a node and allow boot loaders to load the PXE file "
"for the node. This directory name is relative to the PXE or iPXE folders."
msgstr ""

#: ironic/conf/pxe.py:117
msgid "Bootfile DHCP parameter for UEFI boot mode."
msgstr ""

#: ironic/conf/pxe.py:123
msgid ""
"Bootfile DHCP parameter for UEFI boot mode. If you experience problems with "
"booting using it, try ipxe.efi."
msgstr ""

#: ironic/conf/pxe.py:128
msgid ""
"Bootfile DHCP parameter per node architecture. For example: aarch64:grubaa64."
"efi"
msgstr ""

#: ironic/conf/pxe.py:132
msgid ""
"Bootfile DHCP parameter per node architecture. For example: aarch64:"
"ipxe_aa64.efi"
msgstr ""

#: ironic/conf/pxe.py:137
msgid "On ironic-conductor node, the path to the main iPXE script file."
msgstr ""

#: ironic/conf/pxe.py:141
msgid ""
"Timeout value (in seconds) for downloading an image via iPXE. Defaults to 0 "
"(no timeout)"
msgstr ""

#: ironic/conf/pxe.py:145
msgid ""
"Timeout (in seconds) after which PXE boot should be retried. Must be less "
"than [conductor]deploy_callback_timeout. Disabled by default."
msgstr ""

#: ironic/conf/pxe.py:150
msgid ""
"Interval (in seconds) between periodic checks on PXE boot retry. Has no "
"effect if boot_retry_timeout is not set."
msgstr ""

#: ironic/conf/pxe.py:155
msgid "IPv4"
msgstr ""

#: ironic/conf/pxe.py:156
msgid "IPv6"
msgstr ""

#: ironic/conf/pxe.py:159
msgid ""
"The IP version that will be used for PXE booting. Defaults to 4. This option "
"has been a no-op for in-treedrivers since the Ussuri development cycle."
msgstr ""

#: ironic/conf/pxe.py:165
msgid ""
"Download deploy and rescue images directly from swift using temporary URLs. "
"If set to false (default), images are downloaded to the ironic-conductor "
"node and served over its local HTTP server. Applicable only when 'ipxe' "
"compatible boot interface is used."
msgstr ""

#: ironic/conf/pxe.py:175
msgid ""
"If True, generate a PXE environment even for nodes that use local boot. This "
"is useful when the driver cannot switch nodes to local boot, e.g. with SNMP "
"or with Redfish on machines that cannot do persistent boot. Mostly useful "
"for standalone ironic since Neutron will prevent incorrect PXE boot."
msgstr ""

#: ironic/conf/redfish.py:24
msgid "Maximum number of attempts to try to connect to Redfish"
msgstr ""

#: ironic/conf/redfish.py:29
msgid "Number of seconds to wait between attempts to connect to Redfish"
msgstr ""

#: ironic/conf/redfish.py:34
msgid ""
"Maximum Redfish client connection cache size. Redfish driver would strive to "
"reuse authenticated BMC connections (obtained through Redfish Session "
"Service). This option caps the maximum number of connections to maintain. "
"The value of `0` disables client connection caching completely."
msgstr ""

#: ironic/conf/redfish.py:41
msgid "Use HTTP basic authentication"
msgstr ""

#: ironic/conf/redfish.py:42
msgid "Use HTTP session authentication"
msgstr ""

#: ironic/conf/redfish.py:43
msgid ""
"Try HTTP session authentication first, fall back to basic HTTP "
"authentication"
msgstr ""

#: ironic/conf/redfish.py:46
msgid "Redfish HTTP client authentication method."
msgstr ""

#: ironic/conf/redfish.py:50
msgid ""
"Upload generated ISO images for virtual media boot to Swift, then pass "
"temporary URL to BMC for booting the node. If set to false, images are "
"placed on the ironic-conductor node and served over its local HTTP server."
msgstr ""

#: ironic/conf/redfish.py:58
msgid ""
"The Swift container to store Redfish driver data. Applies only when "
"`use_swift` is enabled."
msgstr ""

#: ironic/conf/redfish.py:63
msgid ""
"Amount of time in seconds for Swift objects to auto-expire. Applies only "
"when `use_swift` is enabled."
msgstr ""

#: ironic/conf/redfish.py:86
msgid ""
"Number of seconds to wait between checking for completed firmware update "
"tasks"
msgstr ""

#: ironic/conf/redfish.py:91
msgid ""
"Number of seconds to wait between checking for failed firmware update tasks"
msgstr ""

#: ironic/conf/redfish.py:96
msgid ""
"Number of seconds to wait between checking for completed raid config tasks"
msgstr ""

#: ironic/conf/redfish.py:101
msgid ""
"Number of seconds to wait between checking for failed raid config tasks"
msgstr ""

#: ironic/conf/service_catalog.py:24
msgid ""
"Holds credentials and session options to access Keystone catalog for Ironic "
"API endpoint resolution."
msgstr ""

#: ironic/conf/snmp.py:25
msgid "Seconds to wait for power action to be completed"
msgstr ""

#: ironic/conf/snmp.py:31
msgid ""
"Time (in seconds) to sleep between when rebooting (powering off and on "
"again)"
msgstr ""

#: ironic/conf/snmp.py:36
msgid ""
"Response timeout in seconds used for UDP transport. Timeout should be a "
"multiple of 0.5 seconds and is applicable to each retry."
msgstr ""

#: ironic/conf/snmp.py:42
msgid "Maximum number of UDP request retries, 0 means no retries."
msgstr ""

#: ironic/conf/swift.py:25
msgid "Maximum number of times to retry a Swift request, before failing."
msgstr ""

#: ironic/conf/xclarity.py:21
msgid ""
"IP address of the XClarity Controller. Configuration here is deprecated and "
"will be removed in the Stein release. Please update the driver_info field to "
"use \"xclarity_manager_ip\" instead"
msgstr ""

#: ironic/conf/xclarity.py:26
msgid ""
"Username for the XClarity Controller. Configuration here is deprecated and "
"will be removed in the Stein release. Please update the driver_info field to "
"use \"xclarity_username\" instead"
msgstr ""

#: ironic/conf/xclarity.py:32
msgid ""
"Password for XClarity Controller username. Configuration here is deprecated "
"and will be removed in the Stein release. Please update the driver_info "
"field to use \"xclarity_password\" instead"
msgstr ""

#: ironic/conf/xclarity.py:38
msgid "Port to be used for XClarity Controller connection."
msgstr ""

#: ironic/db/sqlalchemy/api.py:345
#, python-format
msgid "The sort_key value \"%(key)s\" is an invalid field for sorting"
msgstr ""

#: ironic/db/sqlalchemy/api.py:424 ironic/db/sqlalchemy/api.py:483
#, python-format
msgid "SqlAlchemy API does not support filtering by %s"
msgstr ""

#: ironic/db/sqlalchemy/api.py:595 ironic/db/sqlalchemy/api.py:614
#, python-format
msgid "Nodes cannot be found: %s"
msgstr ""

#: ironic/db/sqlalchemy/api.py:667
msgid "Cannot create node with tags."
msgstr ""

#: ironic/db/sqlalchemy/api.py:672
msgid "Cannot create node with traits."
msgstr ""

#: ironic/db/sqlalchemy/api.py:797
msgid "Cannot overwrite UUID for an existing Node."
msgstr "Не удалось заменить UUID для существующего узла."

#: ironic/db/sqlalchemy/api.py:934
msgid "Cannot overwrite UUID for an existing Port."
msgstr "Не удалось заменить UUID для существующего порта."

#: ironic/db/sqlalchemy/api.py:1036
msgid "Cannot overwrite UUID for an existing portgroup."
msgstr ""

#: ironic/db/sqlalchemy/api.py:1117
msgid "Cannot overwrite UUID for an existing Chassis."
msgstr "Не удалось заменить UUID для существующего шасси."

#: ironic/db/sqlalchemy/api.py:1230
msgid "Pending power operation was aborted due to conductor restart"
msgstr ""

#: ironic/db/sqlalchemy/api.py:1386
#, python-format
msgid "Node with port addresses %s was not found"
msgstr ""

#: ironic/db/sqlalchemy/api.py:1390
#, python-format
msgid "Multiple nodes with port addresses %s were found"
msgstr ""

#: ironic/db/sqlalchemy/api.py:1448
msgid "Cannot overwrite UUID for an existing Volume Connector."
msgstr ""

#: ironic/db/sqlalchemy/api.py:1540
msgid "Cannot overwrite UUID for an existing Volume Target."
msgstr ""

#: ironic/db/sqlalchemy/api.py:1730
#, python-format
msgid ""
"Could not modify traits for node %(node_id)s as it would exceed the maximum "
"number of traits per node (%(num_traits)d vs. %(max_traits)d)"
msgstr ""

#: ironic/db/sqlalchemy/api.py:2001
msgid "Cannot overwrite UUID for an existing allocation."
msgstr ""

#: ironic/db/sqlalchemy/api.py:2181
msgid "Cannot overwrite UUID for an existing deploy template."
msgstr ""

#: ironic/db/sqlalchemy/models.py:432
#, python-format
msgid "Cannot find model with name: %s"
msgstr ""

#: ironic/dhcp/neutron.py:129
#, python-format
msgid ""
"No VIFs found for node %(node)s when attempting to update DHCP BOOT options."
msgstr ""
"Для узла %(node)s не обнаружены VIF при попытке обновления опций DHCP BOOT."

#: ironic/dhcp/neutron.py:143
#, python-format
msgid "Failed to set DHCP BOOT options for any port on node %s."
msgstr "Не удалось присвоить опции DHCP BOOT для любого порта узла %s."

#: ironic/drivers/base.py:1702
#, python-format
msgid "\"argsinfo\" must be a dictionary instead of \"%s\""
msgstr ""

#: ironic/drivers/base.py:1707
#, python-format
msgid "Argument \"%(arg)s\" must be a dictionary instead of \"%(val)s\"."
msgstr ""

#: ironic/drivers/base.py:1714
#, python-format
msgid ""
"For argument \"%(arg)s\", \"description\" must be a string value instead of "
"\"%(value)s\"."
msgstr ""

#: ironic/drivers/base.py:1721
#, python-format
msgid ""
"For argument \"%(arg)s\", \"required\" must be a Boolean value instead of "
"\"%(value)s\"."
msgstr ""

#: ironic/drivers/base.py:1726
#, python-format
msgid ""
"Argument \"%(arg)s\" has an invalid key named \"%(key)s\". It must be "
"\"description\" or \"required\"."
msgstr ""

#: ironic/drivers/base.py:1731
#, python-format
msgid "Argument \"%(arg)s\" is missing a \"description\"."
msgstr ""

#: ironic/drivers/base.py:1800
#, python-format
msgid "\"priority\" must be an integer value instead of \"%s\""
msgstr ""

#: ironic/drivers/base.py:1807
#, python-format
msgid "\"abortable\" must be a Boolean value instead of \"%s\""
msgstr ""

#: ironic/drivers/base.py:1864
#, python-format
msgid "\"priority\" must be an integer value >= 0, instead of \"%s\""
msgstr ""

#: ironic/drivers/utils.py:90
msgid "Method not specified when calling vendor extension."
msgstr "Не указан метод при вызове расширения производителя."

#: ironic/drivers/utils.py:243
#, python-format
msgid "Value of 'capabilities' must be string. Got %s"
msgstr ""

#: ironic/drivers/utils.py:251
#, python-format
msgid "Malformed capabilities value: %s"
msgstr ""

#: ironic/drivers/utils.py:376
msgid ""
"Controls the persistency of boot order changes. 'Always' will make all "
"changes persistent, 'Default' will make all but the final one upon instance "
"deployment non-persistent, and 'Never' will make no persistent changes at "
"all. The old values 'True' and 'False' are still supported but deprecated in "
"favor of the new ones.Defaults to 'Default'. Optional."
msgstr ""

#: ironic/drivers/modules/agent.py:45 ironic/drivers/modules/pxe_base.py:41
msgid "UUID (from Glance) of the deployment kernel. Required."
msgstr "UUID (из Glance) ядра развертывания. Обязательный параметр."

#: ironic/drivers/modules/agent.py:47
msgid ""
"UUID (from Glance) of the ramdisk with agent that is used at deploy time. "
"Required."
msgstr ""
"UUID (из Glance) электронного диска с агентом, который используется во время "
"развертывания. Обязательный."

#: ironic/drivers/modules/agent.py:52
msgid "URL of a proxy server for HTTP connections. Optional."
msgstr ""

#: ironic/drivers/modules/agent.py:54
msgid "URL of a proxy server for HTTPS connections. Optional."
msgstr ""

#: ironic/drivers/modules/agent.py:56
msgid ""
"A comma-separated list of host names, IP addresses and domain names (with "
"optional :port) that will be excluded from proxying. To denote a domain "
"name, use a dot to prefix the domain name. This value will be ignored if "
"``image_http_proxy`` and ``image_https_proxy`` are not specified. Optional."
msgstr ""

#: ironic/drivers/modules/agent.py:62
msgid ""
"Specifies whether direct deploy interface should try to use the image source "
"directly or if ironic should cache the image on the conductor and serve it "
"from ironic's own HTTP server. Accepted values are \"swift\", \"http\" and "
"\"local\". Optional."
msgstr ""

#: ironic/drivers/modules/agent.py:124
#, python-format
msgid ""
"Memory size is too small for requested image, if it is less than (image size "
"+ reserved RAM size), will break the IPA deployments. Image size: "
"%(image_size)d MiB, Memory size: %(memory_size)d MiB, Reserved size: "
"%(reserved_size)d MiB."
msgstr ""

#: ironic/drivers/modules/agent.py:158
#, python-format
msgid ""
"Proxy URL should either have HTTP(S) scheme or no scheme at all, the "
"following URLs are invalid: %s."
msgstr ""

#: ironic/drivers/modules/agent.py:163
#, python-format
msgid ""
"image_no_proxy should be a list of host names, IP addresses or domain names "
"to exclude from proxying, the specified list %s is incorrect. To denote a "
"domain name, prefix it with a dot (instead of e.g. '.*')."
msgstr ""

#: ironic/drivers/modules/agent.py:182
#, python-format
msgid ""
"Invalid value for image_download_source: \"%s\". Valid values are swift, "
"http or local."
msgstr ""

#: ironic/drivers/modules/agent.py:199
#, python-format
msgid ""
"Node %s failed to validate http provisoning. Some configuration options were "
"missing"
msgstr ""

#: ironic/drivers/modules/agent.py:293
#: ironic/drivers/modules/agent_base.py:1244
msgid "Failed to prepare instance for booting"
msgstr ""

#: ironic/drivers/modules/agent.py:472
#: ironic/drivers/modules/ansible/deploy.py:409
#, python-format
msgid ""
"Node %s failed to validate deploy image info. Some parameters were missing"
msgstr ""
"Узлу %s не удалось проверить информацию об образе развертывания. Некоторый "
"параметры отсутствуют"

#: ironic/drivers/modules/agent.py:483
#, python-format
msgid ""
"image_source's \"image_checksum\", or \"image_os_hash_algo\" and "
"\"image_os_hash_value\" must be provided in instance_info for node %s"
msgstr ""

#: ironic/drivers/modules/agent.py:781
#, python-format
msgid ""
"Agent ramdisk didn't return a proper command result while building RAID on "
"%(node)s. It returned '%(result)s' after command execution."
msgstr ""

#: ironic/drivers/modules/agent.py:921
#, python-format
msgid ""
"Node %(node)s is missing 'instance_info/rescue_password'. It is required for "
"rescuing node."
msgstr ""

#: ironic/drivers/modules/agent.py:927
#, python-format
msgid ""
"The 'instance_info/rescue_password' is an empty string for node %s. The "
"'rescue_password' must be a non-empty string value."
msgstr ""

#: ironic/drivers/modules/agent_base.py:72
msgid ""
"Whether Ironic should force a reboot of the Node via the out-of-band channel "
"after deployment is complete. Provides compatibility with older deploy "
"ramdisks. Defaults to False. Optional."
msgstr ""

#: ironic/drivers/modules/agent_base.py:76
msgid ""
"Either a Boolean value, a path to a CA_BUNDLE file or directory with "
"certificates of trusted CAs. If set to True ironic will verify the agent's "
"certificate; if False the driver will ignore verifying the SSL certificate. "
"If it's a path the driver will use the specified certificate or one of the "
"certificates in the directory. Defaults to True. Optional"
msgstr ""

#: ironic/drivers/modules/agent_base.py:195
#, python-format
msgid ""
"Reboot requested by %(type)s step %(step)s failed for node %(node)s: %(err)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:376
#, python-format
msgid "Agent on node %(node)s returned bad command result: %(result)s"
msgstr ""
"Агент на узле %(node)s вернул недопустимый результат команды: %(result)s"

#: ironic/drivers/modules/agent_base.py:449
msgid "Cleaning aborted as node is in maintenance mode"
msgstr ""

#: ironic/drivers/modules/agent_base.py:456
msgid "Deploy aborted as node is in maintenance mode"
msgstr ""

#: ironic/drivers/modules/agent_base.py:462
msgid "Rescue aborted as node is in maintenance mode"
msgstr ""

#: ironic/drivers/modules/agent_base.py:470
msgid "Unexpected exception"
msgstr ""

#: ironic/drivers/modules/agent_base.py:475
msgid "Failed to load in-band deploy steps"
msgstr ""

#: ironic/drivers/modules/agent_base.py:486
msgid "Failed to process the next deploy step"
msgstr ""

#: ironic/drivers/modules/agent_base.py:489
#: ironic/drivers/modules/agent_base.py:522
#: ironic/drivers/modules/agent_base.py:534
#, python-format
msgid "%(msg)s. Error: %(exc)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:499
msgid "Failed checking if cleaning is done"
msgstr ""

#: ironic/drivers/modules/agent_base.py:505
msgid "Node failed to start the first cleaning step"
msgstr ""

#: ironic/drivers/modules/agent_base.py:514
msgid "Node failed to check cleaning progress"
msgstr ""

#: ironic/drivers/modules/agent_base.py:530
msgid "Node failed to perform rescue operation"
msgstr ""

#: ironic/drivers/modules/agent_base.py:628
#, python-format
msgid "Agent returned bad result for command finalize_rescue: %(result)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:750
#, python-format
msgid ""
"Error changing node %(node)s to tenant networks after deploy. %(cls)s: "
"%(error)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:777
#, python-format
msgid "Error booting node %(node)s after deploy. %(cls)s: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:874
#, python-format
msgid ""
"agent get_%(type)s_steps for node %(node)s returned an invalid result. Keys: "
"%(keys)s are missing from result: %(result)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:889
#, python-format
msgid ""
"agent get_%(type)s_steps for node %(node)s returned an invalid %(type)s step."
" Keys: %(keys)s are missing from step: %(step)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:951
#, python-format
msgid ""
"Deploy step %(step)s has not been found. Available out-of-band steps: "
"%(oob)s. Agent is not running."
msgstr ""

#: ironic/drivers/modules/agent_base.py:967
#, python-format
msgid "Could not continue cleaning on node %(node)s: %(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:973
#, python-format
msgid "Could not continue deployment on node %(node)s: %(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:1002
#, python-format
msgid ""
"Could not restart automated cleaning on node %(node)s after step %(step)s: "
"%(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:1009
#, python-format
msgid ""
"Could not restart deployment on node %(node)s after step %(step)s: %(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:1063
#, python-format
msgid ""
"Agent returned error for %(type)s step %(step)s on node %(node)s : %(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:1087
#, python-format
msgid ""
"For node %(node)s, post %(type)s step hook %(method)s failed for %(type)s "
"step %(step)s.%(cls)s: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:1108
#, python-format
msgid ""
"Agent returned unknown status for %(type)s step %(step)s on node %(node)s : "
"%(err)s."
msgstr ""

#: ironic/drivers/modules/agent_base.py:1185
msgid ""
"The version of the IPA ramdisk used in the deployment do not support the "
"command \"sync\""
msgstr ""

#: ironic/drivers/modules/agent_base.py:1195
#, python-format
msgid "Error rebooting node %(node)s after deploy. %(cls)s: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_base.py:1341
#, python-format
msgid ""
"Failed to install a bootloader when deploying node %(node)s. Error: "
"%(error)s"
msgstr ""
"Не удалось установить загрузчик во время развертывания узла %(node)s. Ошибка:"
" %(error)s"

#: ironic/drivers/modules/agent_base.py:1363 ironic/drivers/modules/pxe.py:177
#, python-format
msgid ""
"Failed to change the boot device to %(boot_dev)s when deploying node "
"%(node)s. Error: %(error)s"
msgstr ""
"Не удалось изменить загрузочное устройство на %(boot_dev)s во время "
"развертывания узла %(node)s. Ошибка: %(error)s"

#: ironic/drivers/modules/agent_client.py:59
msgid "Invalid agent response"
msgstr ""

#: ironic/drivers/modules/agent_client.py:87
msgid "Agent driver requires agent_url in driver_internal_info"
msgstr "Для драйвера агента требуется agent_url в driver_internal_info"

#: ironic/drivers/modules/agent_client.py:115
#, python-format
msgid "Agent CA %s is neither a path nor a boolean"
msgstr ""

#: ironic/drivers/modules/agent_client.py:212
#, python-format
msgid ""
"Error invoking agent command %(method)s for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_client.py:223
#, python-format
msgid ""
"Unable to decode response as JSON.\n"
"Request URL: %(url)s\n"
"Request body: \"%(body)s\"\n"
"Response status code: %(code)s\n"
"Response: \"%(response)s\""
msgstr ""

#: ironic/drivers/modules/agent_client.py:323
#, python-format
msgid ""
"Failed to connect to the agent running on node %(node)s to collect commands "
"status. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_client.py:389
#, python-format
msgid ""
"Failed to connect to the agent running on node %(node)s for checking the "
"last command status after failing to invoke command %(method)s. Error: "
"%(error)s"
msgstr ""

#: ironic/drivers/modules/agent_client.py:397
#, python-format
msgid ""
"Failed to connect to the agent running on node %(node)s for invoking command "
"%(method)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/agent_client.py:738
msgid "Agent rescue requires rescue_password in instance_info"
msgstr ""

#: ironic/drivers/modules/agent_client.py:750
msgid ""
"Unable to rescue node due to an out of date agent ramdisk. Please contact "
"the administrator to update the rescue ramdisk to contain an ironic-python-"
"agent version of at least 6.0.0."
msgstr ""

#: ironic/drivers/modules/agent_power.py:45
#: ironic/drivers/modules/agent_power.py:66
msgid "[deploy]fast_track must be True to enable the agent power interface"
msgstr ""

#: ironic/drivers/modules/agent_power.py:71
#, python-format
msgid ""
"Agent seems offline for node %s, the agent power interface cannot be used"
msgstr ""

#: ironic/drivers/modules/agent_power.py:209
#, python-format
msgid ""
"Agent failed to come back on %(node)s with the \"agent\" power interface: "
"%(exc)s"
msgstr ""

#: ironic/drivers/modules/agent_power.py:219
#, python-format
msgid "Unexpected error when rebooting through the agent: %s"
msgstr ""

#: ironic/drivers/modules/boot_mode_utils.py:39
#, python-format
msgid ""
"Baremetal node %(uuid)s boot mode is not set to boot mode %(boot_mode)s: "
"%(error)s"
msgstr ""

#: ironic/drivers/modules/boot_mode_utils.py:47
#, python-format
msgid ""
"Baremetal node %(uuid)s boot mode is not set to boot mode %(boot_mode)s. "
"Assuming baremetal node is already in %(boot_mode)s or driver set boot mode "
"via some other mechanism: %(error)s"
msgstr ""

#: ironic/drivers/modules/boot_mode_utils.py:58
#, python-format
msgid ""
"Node %(uuid)s boot mode is not set. Attempt to set %(ironic_boot_mode)s boot "
"mode on the baremetal node failed with error %(error)s"
msgstr ""

#: ironic/drivers/modules/boot_mode_utils.py:143
#, python-format
msgid ""
"Boot mode %(node_boot_mode)s currently configured on node %(uuid)s does not "
"match the boot mode %(ironic_boot_mode)s requested for provisioning."
"Attempting to set node boot mode to %(ironic_boot_mode)s."
msgstr ""

#: ironic/drivers/modules/boot_mode_utils.py:271
#, python-format
msgid ""
"Node %(uuid)s boot mode %(boot_mode)s violates node properties/capabilities "
"%(caps)s"
msgstr ""

#: ironic/drivers/modules/console_utils.py:70
#, python-format
msgid ""
"Cannot create directory '%(path)s' for console PID file. Reason: %(reason)s."
msgstr ""
"Не удалось создать каталог '%(path)s' для файла PID консоли. Причина: "
"%(reason)s."

#: ironic/drivers/modules/console_utils.py:130
#, python-format
msgid "Could not stop the console for node '%(node)s'. Reason: %(err)s."
msgstr "Не удалось остановить консоль для узла '%(node)s'. Причина: %(err)s."

#: ironic/drivers/modules/console_utils.py:159
msgid ""
"[console]port_range should be in the format <start>:<stop> and start < stop"
msgstr ""

#: ironic/drivers/modules/console_utils.py:310
#: ironic/drivers/modules/console_utils.py:437
#, python-format
msgid "%(exec_error)s\n"
"Command: %(command)s"
msgstr "%(exec_error)s\n"
"Команда: %(command)s"

#: ironic/drivers/modules/console_utils.py:316
#, python-format
msgid ""
"Timeout or error while waiting for console subprocess to start for node: "
"%(node)s.\n"
"Command: %(command)s.\n"
msgstr ""

#: ironic/drivers/modules/console_utils.py:341
#, python-format
msgid "Exit code: %(return_code)s.\n"
"Stdout: %(stdout)r\n"
"Stderr: %(stderr)r"
msgstr ""

#: ironic/drivers/modules/console_utils.py:461
#, python-format
msgid "Command: %(command)s.\n"
"Exit code: %(return_code)s.\n"
"Stderr: %(error)r"
msgstr ""

#: ironic/drivers/modules/console_utils.py:472
#, python-format
msgid "Timeout while waiting for console subprocess to start for node %s."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:100
#, python-format
msgid ""
"Couldn't get the URL of the Ironic API service from the configuration file "
"or keystone catalog. Keystone error: %s"
msgstr ""
"Не удалось получить URL службы API Ironic из файла конфигурации или каталога "
"keystone. Ошибка Keystone: %s"

#: ironic/drivers/modules/deploy_utils.py:213
#, python-format
msgid "%(error_msg)s. Missing are: %(missing_info)s"
msgstr "%(error_msg)s. Отсутствующая информация: %(missing_info)s"

#: ironic/drivers/modules/deploy_utils.py:490
#, python-format
msgid ""
"The parameter '%(capability)s' from %(field)s has an invalid value: "
"'%(value)s'. Acceptable values are: %(valid_values)s."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:530
#, python-format
msgid "Failed to connect to Glance to get the properties of the image %s"
msgstr "Не удалось подключиться к Glance для получения свойств образа %s"

#: ironic/drivers/modules/deploy_utils.py:534
#, python-format
msgid "Image %s can not be found."
msgstr "Не найден образ %s."

#: ironic/drivers/modules/deploy_utils.py:561
#: ironic/drivers/modules/deploy_utils.py:796
#: ironic/drivers/modules/pxe_base.py:391
msgid ""
"An 'image_source' and 'boot_iso' parameter may not be specified at the same "
"time."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:593
#, python-format
msgid "Image %(image)s is missing the following properties: %(properties)s"
msgstr "В образе %(image)s отсутствуют следующие свойства: %(properties)s"

#: ironic/drivers/modules/deploy_utils.py:815
#, python-format
msgid ""
"Cannot validate image information for node %s because one or more parameters "
"are missing from its instance_info and insufficent information is present to "
"boot from a remote volume"
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:825
#, python-format
msgid ""
"Cannot validate parameter for driver deploy. Invalid parameter %(param)s. "
"Reason: %(reason)s"
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:856
msgid ""
"Cannot validate driver deploy. Some parameters were missing in node's "
"instance_info"
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:875
msgid "Cannot deploy whole disk image with swap or ephemeral size set"
msgstr ""
"Не удалось развернуть целый образ диска с заданным размером временной памяти "
"или пространства подкачки"

#: ironic/drivers/modules/deploy_utils.py:895
#, python-format
msgid "%s is not an integer value."
msgstr "%s не является целым числом."

#: ironic/drivers/modules/deploy_utils.py:934
#, python-format
msgid ""
" Deployed value of %(param)s was %(param_value)s but requested value is "
"%(request_value)s."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:940
#, python-format
msgid ""
"The following parameters have different values from previous deployment:"
"%(error_msg)s"
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:1243
#, python-format
msgid ""
"Node %(node)s has an iSCSI boot volume defined and no iSCSI boot support "
"available."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:1248
#, python-format
msgid ""
"Node %(node)s has a Fibre Channel boot volume defined and no Fibre Channel "
"boot support available."
msgstr ""

#: ironic/drivers/modules/deploy_utils.py:1408
#, python-format
msgid ""
"Failed to validate the root device hints %(hints)s (from the node's "
"%(source)s) for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/fake.py:61
#, python-format
msgid "set_power_state called with an invalid power state: %s."
msgstr "Функция set_power_state вызвана с недопустимым состоянием питания %s."

#: ironic/drivers/modules/fake.py:137
msgid "Parameter 'bar' not passed to method 'first_method'."
msgstr "Параметр 'bar' не проанализирован для метода 'first_method'."

#: ironic/drivers/modules/fake.py:141
msgid "Test if the value of bar is baz"
msgstr "Проверить наличие у параметра bar значения baz"

#: ironic/drivers/modules/fake.py:158
#, python-format
msgid "Parameter 'bar' not passed to method '%s'."
msgstr "Параметр 'bar' не передан в метод '%s'."

#: ironic/drivers/modules/fake.py:162
msgid "Test if the value of bar is kazoo"
msgstr "Проверить наличие у параметра bar значения kazoo"

#: ironic/drivers/modules/fake.py:167
msgid "Test if the value of bar is meow"
msgstr "Проверить наличие у параметра bar значения meow"

#: ironic/drivers/modules/fake.py:172
msgid "Test if the value of bar is woof"
msgstr ""

#: ironic/drivers/modules/fake.py:215
#: ironic/drivers/modules/ilo/management.py:333
#: ironic/drivers/modules/ipmitool.py:1148
#: ironic/drivers/modules/irmc/management.py:254
#, python-format
msgid "Invalid boot device %s specified."
msgstr "Указано недопустимое загрузочное устройство %s."

#: ironic/drivers/modules/fake.py:253
#, python-format
msgid "Invalid component %s specified."
msgstr ""

#: ironic/drivers/modules/fake.py:257
#, python-format
msgid "Invalid indicator %s specified."
msgstr ""

#: ironic/drivers/modules/image_cache.py:168
#, python-format
msgid ""
"Could not link image %(img_href)s from %(src_path)s to %(dst_path)s, error: "
"%(exc)s"
msgstr ""

#: ironic/drivers/modules/image_utils.py:424
#, python-format
msgid ""
"Unable to find kernel, ramdisk for building ISO, or explicit ISO for "
"%(node)s"
msgstr ""

#: ironic/drivers/modules/image_utils.py:655
#, python-format
msgid "Unable to find kernel or ramdisk for to generate boot ISO for %(node)s"
msgstr ""

#: ironic/drivers/modules/inspector.py:89
#, python-format
msgid "Loopback address %s cannot be used as an introspection callback URL"
msgstr ""

#: ironic/drivers/modules/inspector.py:114
#, python-format
msgid "unable to clean up ramdisk boot: %s"
msgstr ""

#: ironic/drivers/modules/inspector.py:121
#, python-format
msgid "unable to remove inspection ports: %s"
msgstr ""

#: ironic/drivers/modules/inspector.py:129
#, python-format
msgid "unable to power off the node: %s"
msgstr ""

#: ironic/drivers/modules/inspector.py:210
#, python-format
msgid "unable to start inspection: %s"
msgstr ""

#: ironic/drivers/modules/inspector.py:325
#, python-format
msgid "Failed to start inspection: %s"
msgstr "Не удалось начать проверку: %s"

#: ironic/drivers/modules/inspector.py:364
#, python-format
msgid "ironic-inspector inspection failed: %s"
msgstr ""

#: ironic/drivers/modules/inspector.py:376
#, python-format
msgid "Inspection clean up failed: %s"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:70
msgid "IP address or hostname of the node. Required."
msgstr "IP-адрес или имя хоста узла. Обязательный параметр."

#: ironic/drivers/modules/ipmitool.py:73
msgid "password. Optional."
msgstr "Пароль. Необязательный параметр."

#: ironic/drivers/modules/ipmitool.py:74
msgid ""
"Kg key for IPMIv2 authentication. The key is expected in hexadecimal format. "
"Optional."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:77
msgid "remote IPMI RMCP port. Optional."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:78
#, python-format
msgid "privilege level; default is ADMINISTRATOR. One of %s. Optional."
msgstr ""
"Уровень прав доступа; значение по умолчанию: ADMINISTRATOR. Один из %s. "
"Необязательный параметр."

#: ironic/drivers/modules/ipmitool.py:80
msgid "username; default is NULL user. Optional."
msgstr ""
"Имя пользователя; значение по умолчанию: NULL. Необязательный параметр."

#: ironic/drivers/modules/ipmitool.py:81
msgid ""
"bridging_type; default is \"no\". One of \"single\", \"dual\", \"no\". "
"Optional."
msgstr ""
"bridging_type; Значение по умолчанию: \"no\". Допустимые значения: "
"\"single\", \"dual\", \"no\". Необязательный параметр."

#: ironic/drivers/modules/ipmitool.py:83
msgid ""
"transit channel for bridged request. Required only if ipmi_bridging is set "
"to \"dual\"."
msgstr ""
"Канал передачи для запроса с мостами. Требуется только в том случае, если "
"параметру ipmi_bridging присвоено значение \"dual\"."

#: ironic/drivers/modules/ipmitool.py:85
msgid ""
"transit address for bridged request. Required only if ipmi_bridging is set "
"to \"dual\"."
msgstr ""
"Адрес передачи для запроса с мостами. Требуется только в том случае, если "
"параметру ipmi_bridging присвоено значение \"dual\"."

#: ironic/drivers/modules/ipmitool.py:87
msgid ""
"destination channel for bridged request. Required only if ipmi_bridging is "
"set to \"single\" or \"dual\"."
msgstr ""
"Целевой канал для запроса с мостами. Требуется только в том случае, если "
"параметру ipmi_bridging присвоено значение \"single\" или \"dual\"."

#: ironic/drivers/modules/ipmitool.py:90
msgid ""
"destination address for bridged request. Required only if ipmi_bridging is "
"set to \"single\" or \"dual\"."
msgstr ""
"Целевой адрес для запроса с мостами. Требуется только в том случае, если "
"параметру ipmi_bridging присвоено значение \"single\" или \"dual\"."

#: ironic/drivers/modules/ipmitool.py:93
msgid ""
"local IPMB address for bridged requests. Used only if ipmi_bridging is set "
"to \"single\" or \"dual\". Optional."
msgstr ""
"Локальный адрес IPMB для запросов с мостами. Используется только в том "
"случае, если параметру ipmi_bridging присвоено значение \"single\" или "
"\"dual\". Необязательный параметр."

#: ironic/drivers/modules/ipmitool.py:96
msgid ""
"the version of the IPMI protocol; default is \"2.0\". One of \"1.5\", \"2."
"0\". Optional."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:98
msgid ""
"Whether Ironic should specify the boot device to the BMC each time the "
"server is turned on, eg. because the BMC is not capable of remembering the "
"selected boot device across power cycles; default value is False. Optional."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:104
msgid ""
"By default ironic will send a raw IPMI command to disable the 60 second "
"timeout for booting. Setting this option to False will NOT send that command "
"on this node. The [ipmi]disable_boot_timeout will be used if this option is "
"not set. Optional."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:112
msgid ""
"The number of a cipher suite to use. Only 3 (AES-128 with SHA1) or 17 (AES-"
"128 with SHA256) should ever be used; 17 is preferred. The default value "
"depends on the ipmitool version, some recent versions have switched from 3 "
"to 17."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:92
#: ironic/drivers/modules/ipmitool.py:121
msgid "node's UDP port to connect to. Only required for console access."
msgstr ""
"Порт UDP узла для подключения. Требуется только для доступа к консоли."

#: ironic/drivers/modules/ipmitool.py:330
#, python-format
msgid "Missing the following IPMI credentials in node's driver_info: %s."
msgstr ""
"В driver_info узла отсутствуют следующие идентификационные данные IPMI: %s."

#: ironic/drivers/modules/ipmitool.py:361
#, python-format
msgid ""
"Invalid IPMI protocol version value %(version)s, the valid value can be one "
"of %(valid_versions)s"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:380
#, python-format
msgid ""
"Value for ipmi_bridging is provided as %s, but IPMI bridging is not "
"supported by the IPMI utility installed on host. Ensure ipmitool version is "
"> 1.8.11"
msgstr ""
"Значение ipmi_bridging указано как %s, но стыковка IPMI не поддерживается "
"утилитой IPMI, установленной на хосте. Убедитесь, что версия ipmitool > 1.8."
"11"

#: ironic/drivers/modules/ipmitool.py:403
#, python-format
msgid "%(param)s not provided"
msgstr "Не указан параметр %(param)s"

#: ironic/drivers/modules/ipmitool.py:406
#, python-format
msgid ""
"Invalid value for ipmi_bridging: %(bridging_type)s, the valid value can be "
"one of: %(bridging_types)s"
msgstr ""
"Недопустимое значение для ipmi_bridging: %(bridging_type)s, Допустимые "
"значения: %(bridging_types)s"

#: ironic/drivers/modules/ipmitool.py:414
#, python-format
msgid ""
"Invalid privilege level value:%(priv_level)s, the valid value can be one of "
"%(valid_levels)s"
msgstr ""
"Недопустимое значение уровня прав доступа: %(priv_level)s, Допустимые "
"значения: %(valid_levels)s"

#: ironic/drivers/modules/ipmitool.py:420
msgid "Number of ipmi_hex_kg_key characters is not even"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:427
#, python-format
msgid "Invalid cipher suite %s, expected a number"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:430
msgid "Cipher suites cannot be used with IPMI 1.5"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:821
#, python-format
msgid ""
"parse ipmi sensor data failed, unknown sensor type data: %(sensors_data)s"
msgstr ""
"Анализ данных датчика ipmi не выполнен, неизвестные данные типа датчика: "
"%(sensors_data)s"

#: ironic/drivers/modules/ipmitool.py:861
#, python-format
msgid ""
"parse ipmi sensor data failed, get nothing with input data: %(sensors_data)s"
msgstr ""
"Анализ данных датчика ipmi не выполнен, Не получены входные данные: "
"%(sensors_data)s"

#: ironic/drivers/modules/ipmitool.py:942
#, python-format
msgid ""
"Ipmitool drivers need to be able to create temporary files to pass password "
"to ipmitool. Encountered error: %s"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:958
msgid ""
"Unable to locate usable ipmitool command in the system path when checking "
"ipmitool version"
msgstr ""
"Не удалось найти применимую команду ipmitool в системном пути при проверке "
"версии ipmitool"

#: ironic/drivers/modules/ipmitool.py:1056 ironic/drivers/modules/snmp.py:1157
#, python-format
msgid "set_power_state called with invalid power state %s."
msgstr "Функция set_power_state вызвана с недопустимым состоянием питания %s."

#: ironic/drivers/modules/ipmitool.py:1376
msgid ""
"Send raw bytes to the BMC. Required argument: 'raw_bytes' - a string of raw "
"bytes (e.g. '0x00 0x01')."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:1395
msgid ""
"Reset the BMC. Required argument: 'warm' (Boolean) - for warm (True) or cold "
"(False) reset."
msgstr ""

#: ironic/drivers/modules/ipmitool.py:1457
msgid "Parameter raw_bytes (string of bytes) was not specified."
msgstr "Не указан параметр raw_bytes (строка байтов)."

#: ironic/drivers/modules/ipmitool.py:1486
msgid ""
"Either missing 'ipmi_terminal_port' parameter in node's driver_info or "
"[console]port_range is not configured"
msgstr ""

#: ironic/drivers/modules/ipmitool.py:1491
msgid ""
"Serial over lan only works with IPMI protocol version 2.0. Check the "
"'ipmi_protocol_version' parameter in node's driver_info"
msgstr ""

#: ironic/drivers/modules/noop_mgmt.py:46
#, python-format
msgid "Invalid boot device %(dev)s specified, supported are %(supported)s."
msgstr ""

#: ironic/drivers/modules/pxe.py:50
msgid ""
"Invalid configuration: The boot interface must have the `ramdisk_boot` "
"capability. You are using an incompatible boot interface."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:688
#: ironic/drivers/modules/pxe.py:192
#, python-format
msgid "Error rebooting node %(node)s after deploy. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/pxe_base.py:43
msgid ""
"UUID (from Glance) of the ramdisk that is mounted at boot time. Required."
msgstr ""
"UUID (из Glance) электронного диска, монтируемого во время загрузки. "
"Обязательный параметр."

#: ironic/drivers/modules/pxe_base.py:47
msgid ""
"UUID (from Glance) of the rescue kernel. This value is required for rescue "
"mode."
msgstr ""

#: ironic/drivers/modules/pxe_base.py:49
msgid ""
"UUID (from Glance) of the rescue ramdisk with agent that is used at node "
"rescue time. This value is required for rescue mode."
msgstr ""

#: ironic/drivers/modules/pxe_base.py:54
msgid ""
"Additional kernel parameters to pass down to instance kernel. These "
"parameters can be consumed by the kernel or by the applications by reading /"
"proc/cmdline. Mind severe cmdline size limit. Overrides [pxe]/"
"kernel_append_params ironic option."
msgstr ""

#: ironic/drivers/modules/pxe_base.py:344
#, python-format
msgid "Node %s does not have any port associated with it."
msgstr "Узел %s не содержит связанных с ним портов."

#: ironic/drivers/modules/pxe_base.py:349
msgid "iPXE boot is enabled but no HTTP URL or HTTP root was specified."
msgstr ""
"Загрузка iPXE разрешена, но не указан URL HTTP или корневой раздел HTTP."

#: ironic/drivers/modules/pxe_base.py:359
msgid ""
"'kickstart' boot option is set on the node but no HTTP URL or HTTP root was "
"specified."
msgstr ""

#: ironic/drivers/modules/pxe_base.py:364
msgid ""
"'kickstart' boot option is set on the node but no default kickstart template "
"is specified."
msgstr ""

#: ironic/drivers/modules/snmp.py:110
msgid "PDU manufacturer driver.  Required."
msgstr "Драйвер производителя PDU.  Обязательный параметр."

#: ironic/drivers/modules/snmp.py:111
msgid "PDU IPv4 address or hostname.  Required."
msgstr "Имя хоста или адрес IPv4 PDU.  Обязательный параметр."

#: ironic/drivers/modules/snmp.py:112
msgid "PDU power outlet index (1-based).  Required."
msgstr "Индекс розетки питания PDU (начиная с 1).  Обязательный параметр."

#: ironic/drivers/modules/snmp.py:116
#, python-format
msgid ""
"SNMP protocol version: %(v1)s, %(v2c)s or %(v3)s  (optional, default %(v1)s)."
""
msgstr ""

#: ironic/drivers/modules/snmp.py:120
#, python-format
msgid "SNMP port, default %(port)d."
msgstr ""

#: ironic/drivers/modules/snmp.py:122
#, python-format
msgid ""
"SNMP community name to use for read and/or write class SNMP commands unless "
"`snmp_community_read` and/or `snmp_community_write` properties are present "
"in which case the latter takes over. Applicable only to versions %(v1)s and "
"%(v2c)s."
msgstr ""

#: ironic/drivers/modules/snmp.py:128
#, python-format
msgid ""
"SNMP community name to use for read class SNMP commands. Takes precedence "
"over the `snmp_community` property. Applicable only to versions %(v1)s and "
"%(v2c)s."
msgstr ""

#: ironic/drivers/modules/snmp.py:133
#, python-format
msgid ""
"SNMP community name to use for write class SNMP commands. Takes precedence "
"over the `snmp_community` property. Applicable only to versions %(v1)s and "
"%(v2c)s."
msgstr ""

#: ironic/drivers/modules/snmp.py:138
#, python-format
msgid ""
"SNMPv3 User-based Security Model (USM) username. Required for version %(v3)s."
""
msgstr ""

#: ironic/drivers/modules/snmp.py:142
#, python-format
msgid ""
"SNMPv3 message authentication protocol ID. Known values are: %(auth)s. "
"Default is 'none' unless 'snmp_auth_key' is provided. In the latter case "
"'md5' is the default."
msgstr ""

#: ironic/drivers/modules/snmp.py:148
msgid ""
"SNMPv3 message authentication key. Must be 8+ characters long. Required when "
"message authentication is used. This key is used by the 'snmp_auth_protocol' "
"algorithm."
msgstr ""

#: ironic/drivers/modules/snmp.py:153
#, python-format
msgid ""
"SNMPv3 message privacy (encryption) protocol ID. Known values are: %(priv)s. "
"Using message privacy requires using message authentication. Default is "
"'none' unless 'snmp_priv_key' is provided. In the latter case 'des' is the "
"default."
msgstr ""

#: ironic/drivers/modules/snmp.py:160
msgid ""
"SNMPv3 message authentication key. Must be 8+ characters long. Required when "
"message authentication is used. This key is used by the 'snmp_priv_protocol' "
"algorithm."
msgstr ""

#: ironic/drivers/modules/snmp.py:165
msgid ""
"SNMPv3 context engine ID. Default is the value of authoritative engine ID."
msgstr ""

#: ironic/drivers/modules/snmp.py:168
msgid "SNMPv3 context name. Default is an empty string ('')."
msgstr ""

#: ironic/drivers/modules/snmp.py:175
#, python-format
msgid ""
"SNMPv3 User-based Security Model (USM) username. Required for version %(v3)s."
" This property is deprecated, please use `snmp_user` instead."
msgstr ""

#: ironic/drivers/modules/snmp.py:201
msgid "Unable to import python-pysnmp library"
msgstr ""

#: ironic/drivers/modules/snmp.py:816
#, python-format
msgid "SNMPDriverAuto: duplicate driver system ID prefix %(system_id)s"
msgstr ""

#: ironic/drivers/modules/snmp.py:843
#, python-format
msgid "SNMPDriverAuto: no driver matching %(system_id)s"
msgstr ""

#: ironic/drivers/modules/snmp.py:884
#, python-format
msgid ""
"SNMP driver requires `driver_info/snmp_user` to be set in node %(node)s "
"configuration for SNMP version %(ver)s."
msgstr ""

#: ironic/drivers/modules/snmp.py:914
#, python-format
msgid ""
"SNMPPowerDriver: unknown SNMPv3 authentication protocol `driver_info/"
"snmp_auth_protocol` %(proto)s in node %(node)s configuration, known "
"protocols are: %(protos)s"
msgstr ""

#: ironic/drivers/modules/snmp.py:927
#, python-format
msgid ""
"SNMPPowerDriver: unknown SNMPv3 privacy protocol `driver_info/"
"snmp_priv_protocol` %(proto)s in node %(node)s configuration, known "
"protocols are: %(protos)s"
msgstr ""

#: ironic/drivers/modules/snmp.py:937
#, python-format
msgid ""
"SNMPPowerDriver: short SNMPv3 authentication key `driver_info/snmp_auth_key` "
"in node %(node)s configuration (8+ chars required)"
msgstr ""

#: ironic/drivers/modules/snmp.py:950
#, python-format
msgid ""
"SNMPPowerDriver: short SNMPv3 privacy key `driver_info/snmp_priv_key` node "
"%(node)s configuration (8+ chars required)"
msgstr ""

#: ironic/drivers/modules/snmp.py:962
#, python-format
msgid ""
"SNMPPowerDriver: SNMPv3 privacy requires authentication. Please add "
"`driver_info/auth_protocol` property to node %(node)s configuration."
msgstr ""

#: ironic/drivers/modules/snmp.py:969
#, python-format
msgid ""
"SNMPPowerDriver: missing SNMPv3 authentication key while `driver_info/"
"snmp_auth_protocol` is present. Please add `driver_info/snmp_auth_key` to "
"node %(node)s configuration."
msgstr ""

#: ironic/drivers/modules/snmp.py:977
#, python-format
msgid ""
"SNMPPowerDriver: missing SNMPv3 privacy key while `driver_info/"
"snmp_priv_protocol` is present. Please add `driver_info/snmp_priv_key` to "
"node %(node)s configuration."
msgstr ""

#: ironic/drivers/modules/snmp.py:1012
#, python-format
msgid ""
"SNMP driver requires the following parameters to be set in node's "
"driver_info: %s."
msgstr ""
"Для драйвера SNMP необходимо в driver_info узла задать следующие параметры: "
"%s."

#: ironic/drivers/modules/snmp.py:1021
#, python-format
msgid "SNMPPowerDriver: unknown driver: '%s'"
msgstr "SNMPPowerDriver: неизвестный драйвер: '%s'"

#: ironic/drivers/modules/snmp.py:1027
#, python-format
msgid "SNMPPowerDriver: unknown SNMP version: '%s'"
msgstr "SNMPPowerDriver: неизвестная версия SNMP: '%s'"

#: ironic/drivers/modules/snmp.py:1036
#, python-format
msgid "SNMPPowerDriver: SNMP UDP port out of range: %d"
msgstr "SNMPPowerDriver: порт UDP SNMP вне диапазона: %d"

#: ironic/drivers/modules/snmp.py:1051
#, python-format
msgid ""
"SNMP driver requires `snmp_community` or `snmp_community_read`/"
"`snmp_community_write` properties to be set for version %s."
msgstr ""

#: ironic/drivers/modules/snmp.py:1069
#, python-format
msgid "SNMPPowerDriver: PDU power outlet index is not an integer: %s"
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:53
msgid ""
"Deploy ramdisk username for Ansible. This user must have passwordless sudo "
"permissions. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:56
msgid ""
"Full path to private SSH key file. If not specified, default keys for user "
"running ironic-conductor process will be used. Note that for keys with "
"password, those must be pre-loaded into ssh-agent. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:62
msgid ""
"Path to folder holding playbooks to use for this node. Optional. Default is "
"set in ironic config."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:65
msgid ""
"Name of the Ansible playbook file inside the \"ansible_playbooks_path\" "
"folder which is used for node deployment. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:68
msgid ""
"Name of the Ansible playbook file inside the \"ansible_playbooks_path\" "
"folder which is used for node shutdown. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:71
msgid ""
"Name of the Ansible playbook file inside the \"ansible_playbooks_path\" "
"folder which is used for node cleaning. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:74
msgid ""
"Name of the file inside the \"ansible_playbooks_path\" folder with cleaning "
"steps configuration. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:77
msgid ""
"Absolute path to the python interpreter on the managed machines. Optional."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:85
#, python-format
msgid "Failed to set ansible playbook for action %(action)s"
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:251
#, python-format
msgid ""
"Ansible-deploy does not support advanced root device hints based on oslo."
"utils operators. Present advanced hints for node %(node)s are %(hints)s."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:324
#, python-format
msgid "Malformed clean_steps file: %s"
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:329
msgid "Cleaning steps do not have unique names."
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:346
#, python-format
msgid "Failed to load clean steps from file %(file)s: %(exc)s"
msgstr ""

#: ironic/drivers/modules/ansible/deploy.py:401
#, python-format
msgid ""
"Node %(node)s is configured to use the ansible deploy interface, which does "
"not support netboot."
msgstr ""

#: ironic/drivers/modules/drac/bios.py:72
msgid "Unable to import dracclient.exceptions library"
msgstr ""

#: ironic/drivers/modules/drac/common.py:31
msgid "IP address or hostname of the DRAC card. Required."
msgstr "IP-адрес или имя хоста карты DRAC. Обязательный параметр."

#: ironic/drivers/modules/drac/common.py:32
msgid "username used for authentication. Required."
msgstr "Имя пользователя для идентификации. Обязательный параметр."

#: ironic/drivers/modules/drac/common.py:33
msgid "password used for authentication. Required."
msgstr "Пароль для идентификации. Обязательный параметр."

#: ironic/drivers/modules/drac/common.py:36
msgid "port used for WS-Man endpoint; default is 443. Optional."
msgstr ""
"Порт для конечной точки WS-Man; значение по умолчанию: 443. Необязательный "
"параметр."

#: ironic/drivers/modules/drac/common.py:37
msgid "path used for WS-Man endpoint; default is \"/wsman\". Optional."
msgstr ""
"Путь для конечной точки WS-Man; значение по умолчанию: \"/wsman\". "
"Необязательный параметр."

#: ironic/drivers/modules/drac/common.py:39
msgid ""
"protocol used for WS-Man endpoint; one of http, https; default is \"https\". "
"Optional."
msgstr ""
"Протокол, используемый для конечной точки WS-Man; допустимые значения: http, "
"https; значение по умолчанию: \"https\". Необязательный параметр."

#: ironic/drivers/modules/drac/common.py:67
#, python-format
msgid "'%s' not supplied to DracDriver."
msgstr "'%s' не передан в DracDriver."

#: ironic/drivers/modules/drac/common.py:69
#: ironic/drivers/modules/xclarity/common.py:75
#, python-format
msgid "'%s' contains non-ASCII symbol."
msgstr "'%s' содержит символ, отличный от ASCII."

#: ironic/drivers/modules/drac/common.py:77
msgid "'drac_path' contains non-ASCII symbol."
msgstr "'drac_path' содержит символ, отличный от ASCII."

#: ironic/drivers/modules/drac/common.py:84
msgid "'drac_protocol' must be either 'http' or 'https'."
msgstr ""

#: ironic/drivers/modules/drac/common.py:87
msgid "'drac_protocol' contains non-ASCII symbol."
msgstr "'drac_protocol' содержит символ, отличный от ASCII."

#: ironic/drivers/modules/drac/common.py:90
#: ironic/drivers/modules/irmc/common.py:129
#: ironic/drivers/modules/xclarity/common.py:99
#, python-format
msgid "The following errors were encountered while parsing driver_info:\n"
"%s"
msgstr "При анализе driver_info обнаружены следующие ошибки:\n"
"%s"

#: ironic/drivers/modules/drac/inspect.py:213
#, python-format
msgid "Failed to discover the following properties: %(missing_keys)s"
msgstr ""

#: ironic/drivers/modules/drac/job.py:49
#, python-format
msgid ""
"Unfinished config jobs found: %(jobs)r. Make sure they are completed before "
"retrying."
msgstr ""

#: ironic/drivers/modules/drac/job.py:112
#, python-format
msgid "There are unfinished jobs in the job queue on node %(node_uuid)s."
msgstr ""

#: ironic/drivers/modules/drac/management.py:153
#, python-format
msgid ""
"List of boot modes, %(list_boot_modes)s, does not contain a persistent mode"
msgstr ""

#: ironic/drivers/modules/drac/management.py:266
#, python-format
msgid "DRAC reported unknown boot mode '%(drac_boot_mode)s'"
msgstr ""

#: ironic/drivers/modules/drac/management.py:279
#: ironic/drivers/modules/drac/management.py:702
#, python-format
msgid ""
"set_boot_device called with invalid device '%(device)s' for node %(node_id)s."
""
msgstr ""

#: ironic/drivers/modules/drac/management.py:297
#, python-format
msgid ""
"Timed out waiting BIOS configuration for job %(job)s to reach Scheduled "
"state.  Job is still in %(status)s state."
msgstr ""

#: ironic/drivers/modules/drac/management.py:356
msgid "export_configuration_location missing"
msgstr ""

#: ironic/drivers/modules/drac/management.py:363
#, python-format
msgid "No managers found for %(node)s"
msgstr ""

#: ironic/drivers/modules/drac/management.py:378
#, python-format
msgid "No configuration exported for node %(node)s"
msgstr ""

#: ironic/drivers/modules/drac/management.py:399
msgid "import_configuration_location missing"
msgstr ""

#: ironic/drivers/modules/drac/management.py:405
#, python-format
msgid ""
"No configuration found for node %(node)s by name %(configuration_name)s"
msgstr ""

#: ironic/drivers/modules/drac/management.py:413
#, python-format
msgid ""
"Invalid configuration for node %(node)s in %(configuration_name)s. Supports "
"only idrac-redfish, but found %(interface)s"
msgstr ""

#: ironic/drivers/modules/drac/management.py:536
#, python-format
msgid "Failed export configuration. %(exc)sexc"
msgstr ""

#: ironic/drivers/modules/drac/management.py:550
#, python-format
msgid ""
"Failed import configuration task: %(task_monitor_url)s. Message: "
"'%(message)s'."
msgstr ""

#: ironic/drivers/modules/drac/power.py:157
#, python-format
msgid ""
"DRAC driver timed out while trying to set the power state for node "
"%(node_uuid)s to %(calc_power_state)s."
msgstr ""

#: ironic/drivers/modules/drac/raid.py:515
#: ironic/drivers/modules/redfish/raid.py:248
#, python-format
msgid "Cannot calculate spans for RAID level \"%s\""
msgstr ""

#: ironic/drivers/modules/drac/raid.py:535
#: ironic/drivers/modules/drac/raid.py:546
#: ironic/drivers/modules/drac/raid.py:567
#: ironic/drivers/modules/drac/raid.py:588
#: ironic/drivers/modules/redfish/raid.py:158
#, python-format
msgid ""
"RAID level %(raid_level)s is not supported by the driver. Supported RAID "
"levels: %(supported_raid_levels)s"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:554
#: ironic/drivers/modules/drac/raid.py:575
#: ironic/drivers/modules/drac/raid.py:596
#: ironic/drivers/modules/redfish/raid.py:184
#: ironic/drivers/modules/redfish/raid.py:345
#: ironic/drivers/modules/redfish/raid.py:362
msgid "Spanned RAID volumes cannot contain a single span"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:726
#: ironic/drivers/modules/redfish/raid.py:565
msgid "failed to find matching physical disks for all logical disks"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:753
msgid "invalid number of physical disks was provided"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:773
#: ironic/drivers/modules/redfish/raid.py:303
msgid "size set to 'MAX' but could not allocate physical disk space"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:780
msgid "not enough physical disk space for the logical disk"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:789
msgid "not enough free space on physical disks for the logical disk"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:1365
#: ironic/drivers/modules/redfish/raid.py:106
#, python-format
msgid ""
"create_configuration called with invalid target_raid_configuration for node "
"%(node_id)s. 'physical_disks' is missing from logical_disk while 'size_gb'="
"'MAX' was requested: %(logical_disk)s"
msgstr ""

#: ironic/drivers/modules/drac/raid.py:1623
#, python-format
msgid "Failed config job: %(config_job_id)s. Message: '%(message)s'."
msgstr ""

#: ironic/drivers/modules/drac/utils.py:77
#, python-format
msgid ""
"Search for Sushy OEM extension Python package 'sushy-oem-idrac' failed for "
"node %(node)s. Ensure it is installed. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/drac/utils.py:99
#, python-format
msgid "Manager %(manager)s: %(error)smanager"
msgstr ""

#: ironic/drivers/modules/drac/utils.py:112
#, python-format
msgid ""
"In system %(system)s for node %(node)s all managers failed: %(process_name)s."
" Errors: %(oem_error_msgs)ssystem"
msgstr ""

#: ironic/drivers/modules/drac/vendor_passthru.py:58
msgid "Returns a dictionary containing the BIOS settings from a node."
msgstr ""

#: ironic/drivers/modules/drac/vendor_passthru.py:78
msgid ""
"Change the BIOS configuration on a node. Required argument : a dictionary of "
"{'AttributeName': 'NewValue'}. Returns a dictionary containing the "
"'is_commit_required' key with a Boolean value indicating whether "
"commit_bios_config() needs to be called to make the changes, and the "
"'is_reboot_required' key with a value of 'true' or 'false'.  This key is "
"used to indicate to the commit_bios_config() call if a reboot should be "
"performed."
msgstr ""

#: ironic/drivers/modules/drac/vendor_passthru.py:110
msgid ""
"Commit a BIOS configuration job submitted through set_bios_config(). "
"Required argument: 'reboot' - indicates whether a reboot job should be "
"automatically created with the config job. Returns a dictionary containing "
"the 'job_id' key with the ID of the newly created config job, and the "
"'reboot_required' key indicating whether the node needs to be rebooted to "
"start the config job."
msgstr ""

#: ironic/drivers/modules/drac/vendor_passthru.py:142
msgid ""
"Abandon a BIOS configuration job previously submitted through "
"set_bios_config()."
msgstr ""

#: ironic/drivers/modules/drac/vendor_passthru.py:158
msgid ""
"Returns a dictionary containing the key \"unfinished_jobs\"; its value is a "
"list of dictionaries. Each dictionary represents an unfinished config Job "
"object."
msgstr ""

#: ironic/drivers/modules/ibmc/management.py:47
#: ironic/drivers/modules/ibmc/power.py:53
#: ironic/drivers/modules/ibmc/vendor.py:42
msgid "Unable to import the python-ibmcclient library"
msgstr ""

#: ironic/drivers/modules/ibmc/management.py:173
#, python-format
msgid ""
"Cannot change boot mode on node %(node)s because its boot device is not set."
msgstr ""

#: ironic/drivers/modules/ibmc/management.py:181
#, python-format
msgid ""
"Cannot change boot mode on node %(node)s because its boot source override is "
"not set."
msgstr ""

#: ironic/drivers/modules/ibmc/raid.py:161
#, python-format
msgid ""
"Invoke RAID create_configuration step for node %s(uuid). Current provision "
"state is: %(status)s. Target RAID configuration is: %(config)s."
msgstr ""

#: ironic/drivers/modules/ibmc/raid.py:178
#, python-format
msgid "Succeed to create raid configuration on node %s."
msgstr ""

#: ironic/drivers/modules/ibmc/raid.py:198
#, python-format
msgid "Succeed to delete raid configuration on node %s."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:37
msgid ""
"The URL address to the iBMC controller. It must include the authority "
"portion of the URL. If the scheme is missing, https is assumed. For example: "
"https://mgmt.vendor.com. Required."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:41
msgid "User account with admin/server-profile access privilege. Required."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:43
msgid "User account password. Required."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:47
msgid ""
"Either a Boolean value, a path to a CA_BUNDLE file or directory with "
"certificates of trusted CAs. If set to True the driver will verify the host "
"certificates; if False the driver will ignore verifying the SSL certificate. "
"If it's a path the driver will use the specified certificate or one of the "
"certificates in the directory. Defaults to True. Optional."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:73
#, python-format
msgid ""
"Missing the following iBMC properties in node %(node)s driver_info: %(info)s"
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:86
#, python-format
msgid ""
"Invalid iBMC address %(address)s set in driver_info/ibmc_address on node "
"%(node)s"
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:98
#: ironic/drivers/modules/ibmc/utils.py:105
#, python-format
msgid ""
"Invalid value type set in driver_info/ibmc_verify_ca on node %(node)s. The "
"value should be a Boolean or the path to a file/directory, not \"%(value)s\""
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:131
#, python-format
msgid ""
"Failed to connect to iBMC, will retry now. Max retry times is "
"%(retry_times)d."
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:157
#, python-format
msgid "Failed to connect to iBMC for node %(node)s, Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/ibmc/utils.py:164
#, python-format
msgid "Failed to %(action)s for node %(node)s, Error %(error)s"
msgstr ""

#: ironic/drivers/modules/ibmc/vendor.py:67
msgid ""
"Returns a dictionary, containing node boot up sequence, in ascending order"
msgstr ""

#: ironic/drivers/modules/ibmc/vendor.py:90
msgid ""
"Returns a list of dictionary, every dictionary represents a RAID controller "
"summary info"
msgstr ""

#: ironic/drivers/modules/ilo/bios.py:79 ironic/drivers/modules/ilo/bios.py:136
#, python-format
msgid "Could not find the step %(step)s for the node %(node)s."
msgstr ""

#: ironic/drivers/modules/ilo/bios.py:94 ironic/drivers/modules/ilo/bios.py:150
#: ironic/drivers/modules/ilo/bios.py:158
#, python-format
msgid "Step %(step)s failed on the node %(node)s with error: %(err)s"
msgstr ""

#: ironic/drivers/modules/ilo/bios.py:232
#, python-format
msgid "Caching BIOS settings failed on node %(node)s with error: %(err)s"
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:48
msgid "UUID (from Glance) of the deployment ISO. Required."
msgstr "UUID (из Glance) ISO развертывания. Обязательный параметр."

#: ironic/drivers/modules/ilo/boot.py:51 ironic/drivers/modules/irmc/boot.py:65
msgid ""
"UUID (from Glance) of the rescue ISO. Only required if rescue mode is being "
"used and ironic is managing booting the rescue ramdisk."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:56
msgid "URL or Glance UUID of the deployment kernel. Required."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:58
msgid ""
"URL or Glance UUID of the ramdisk that is mounted at boot time. Required."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:62
msgid ""
"URL or Glance UUID of the rescue kernel. This value is required for rescue "
"mode."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:64
msgid ""
"URL or Glance UUID of the rescue ramdisk with agent that is used at node "
"rescue time. The value is required for rescue mode."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:69
msgid ""
"URL or Glance UUID  of the EFI system partition image containing EFI boot "
"loader. This image will be used by ironic when building UEFI-bootable ISO "
"out of kernel and ramdisk. Required for UEFI boot from partition images."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:74
msgid ""
"Boolean value that indicates whether the certificates require to be added to "
"the iLO."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:77
msgid ""
"Additional kernel parameters to pass down to instance kernel. These "
"parameters can be consumed by the kernel or by the applications by reading /"
"proc/cmdline. Mind severe cmdline size limit. Overrides [ilo]/"
"kernel_append_params ironic option."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:114
#, python-format
msgid ""
"Error validating iLO boot for %s. Some parameters were missing in node's "
"driver_info"
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:800
#, python-format
msgid ""
"Secure URLs exposed over HTTPS are expected. Insecure URLs are provided for "
"%s"
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:852
#: ironic/drivers/modules/ilo/common.py:1015
#, python-format
msgid ""
"Invalid value type set in driver_info/ilo_add_certificates on node %(node)s. "
"The value should be a Boolean  not \"%(value)s\""
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:912
#, python-format
msgid ""
"Validation for 'ilo-uefi-https' boot interface failed. Could not determine "
"current boot mode for node %(node)s."
msgstr ""

#: ironic/drivers/modules/ilo/boot.py:918
msgid ""
"Validation for 'ilo-uefi-https' boot interface failed. The node is required "
"to be in 'UEFI' boot mode."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:51
msgid "IP address or hostname of the iLO. Required."
msgstr "IP-адрес или имя хоста iLO. Обязательный параметр."

#: ironic/drivers/modules/ilo/common.py:52
msgid "username for the iLO with administrator privileges. Required."
msgstr ""
"Имя пользователя для iLO с правами доступа администратора. Обязательный "
"параметр."

#: ironic/drivers/modules/ilo/common.py:54
msgid "password for ilo_username. Required."
msgstr "Пароль для ilo_username. Обязательный параметр."

#: ironic/drivers/modules/ilo/common.py:57
msgid "port to be used for iLO operations. Optional."
msgstr "Порт для операций iLO. Необязательный параметр."

#: ironic/drivers/modules/ilo/common.py:58
msgid "timeout (in seconds) for iLO operations. Optional."
msgstr "Тайм-аут (в секундах) для операций iLO. Необязательный параметр."

#: ironic/drivers/modules/ilo/common.py:59
msgid ""
"CA certificate file to validate iLO. This attibute is deprecated and will be "
"removed in future release. Optional"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:62
#: ironic/drivers/modules/redfish/utils.py:63
msgid ""
"Either a Boolean value, a path to a CA_BUNDLE file or directory with "
"certificates of trusted CAs. If set to True the driver will verify the host "
"certificates; if False the driver will ignore verifying the SSL certificate. "
"If it's a path the driver will use the specified certificate or one of the "
"certificates in the directory. Defaults to True. Optional"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:73
msgid "User for SNMPv3. Required for SNMP inspection"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:75
msgid "Authentication Protocol Passphrase. Required for SNMP inspection"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:77
msgid "Authentication Privacy Passphrase. Required for SNMP inspection"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:82
msgid ""
"Authentication Protocol. Optional, used for SNMP inspection. If not "
"specified, the default value as 'MD5' is used."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:85
msgid ""
"Privacy Protocol. Optional, used for SNMP inspection. If not specified, the "
"default value as 'DES' is used."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:96
msgid ""
"new password for iLO. Required if the clean step 'reset_ilo_credential' is "
"enabled."
msgstr ""
"новый пароль для iLO. Требуется, если шаг очистки reset_ilo_credential "
"включен."

#: ironic/drivers/modules/ilo/common.py:158
#, python-format
msgid ""
"Security parameter info: %(info)s is missing the required 'param' field."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:164
#, python-format
msgid ""
"Security parameter '%(param)s' is not a valid parameter. Supported values "
"are: %(supported_params)s"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:304
#, python-format
msgid ""
"The following required iLO parameters are missing from the node's "
"driver_info: %s"
msgstr ""
"В driver_info узла отсутствуют следующие обязательные параметры iLO: %s"

#: ironic/drivers/modules/ilo/common.py:347
#, python-format
msgid ""
"The following required SNMP parameters are missing from the node's "
"driver_info: %s"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:359
#, python-format
msgid "Invalid value %(value)s given for driver_info parameter %(param)s"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:393
#, python-format
msgid ""
"The following iLO parameters from the node's driver_info should be integers: "
"%s"
msgstr ""
"Следующие параметры iLO в driver_info узла должны быть целочисленными "
"значениями: %s"

#: ironic/drivers/modules/ilo/common.py:408
#, python-format
msgid "ca_file \"%(value)s\" is not found."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:422
#: ironic/drivers/modules/ilo/common.py:429
#, python-format
msgid ""
"Invalid value type set in driver_info/ilo_verify_ca on node %(node)s. The "
"value should be a Boolean or the path to a file/directory, not \"%(value)s\""
msgstr ""

#: ironic/drivers/modules/ilo/common.py:566
#, python-format
msgid "Inserting virtual media %s"
msgstr "Вставка виртуального носителя %s"

#: ironic/drivers/modules/ilo/common.py:597
#: ironic/drivers/modules/ilo/common.py:674
#, python-format
msgid "Setting %s as boot mode"
msgstr "Настройка %s в качестве режима загрузки"

#: ironic/drivers/modules/ilo/common.py:614
msgid "Get current boot mode"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:786
#, python-format
msgid "Eject virtual media %s"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:823
#, python-format
msgid "Get secure boot mode for node %s."
msgstr "Получение режима защищенной загрузки для узла %s."

#: ironic/drivers/modules/ilo/common.py:856
#, python-format
msgid "Setting secure boot to %(flag)s for node %(node)s."
msgstr "Установка режима защищенной загрузки %(flag)s для узла %(node)s."

#: ironic/drivers/modules/ilo/common.py:912
#, python-format
msgid ""
"Error verifying image checksum. Image %(image)s failed to verify against "
"checksum %(checksum)s. Actual checksum is: %(actual_checksum)s"
msgstr ""

#: ironic/drivers/modules/ilo/common.py:934
#, python-format
msgid "Get server post state for node %s."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:977
#, python-format
msgid "List of files is expected whereas \"%(atype)s\" type is provided."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:1039
#, python-format
msgid "Add certificates to %(node)s from paths %(cpath)s."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:1069
#, python-format
msgid "Clearing certificates from node %(node)s."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:1104
#, python-format
msgid "Setting up node %(node)s to boot from URL %(iso)s."
msgstr ""

#: ironic/drivers/modules/ilo/common.py:1108
#, python-format
msgid ""
"Error setting up node %(node)s to boot from URL %(iso)s. A secure URL is "
"expected that is exposed over HTTPS."
msgstr ""

#: ironic/drivers/modules/ilo/console.py:48
msgid "Missing 'console_port' parameter in node's driver_info."
msgstr "В driver_info узла отсутствует параметр 'console_port'."

#: ironic/drivers/modules/ilo/firmware_processor.py:68
#, python-format
msgid ""
"Invalid firmware update mode '%(mode)s' provided for node: %(node)s. 'ilo' "
"is the only supported firmware update mode."
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:76
msgid "Firmware images cannot be an empty list or None."
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:92
#, python-format
msgid ""
"Component '%(component)s' for firmware update is not supported in 'ilo' "
"based firmware update. Supported values are: %(supported_components)s"
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:113
#, python-format
msgid ""
"The component files '%s' provided are not supported in 'SUM' based firmware "
"update. The valid file extensions are 'scexe', 'exe', 'rpm'."
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:144
#, python-format
msgid ""
"Firmware image info: %(image_info)s is missing the required %(missing)s "
"field/s."
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:195
#, python-format
msgid ""
"This method does not support URL scheme %(url_scheme)s. Invalid URL %(url)s. "
"The supported firmware URL schemes are \"file\", \"http\", \"https\" and "
"\"swift\""
msgstr ""

#: ironic/drivers/modules/ilo/firmware_processor.py:356
msgid "Firmware file extracting as part of manual cleaning"
msgstr ""

#: ironic/drivers/modules/ilo/inspect.py:89
#, python-format
msgid "Server didn't return the key(s): %(key)s"
msgstr "Сервер не вернул ключи: %(key)s"

#: ironic/drivers/modules/ilo/inspect.py:94
#, python-format
msgid ""
"Essential properties are expected to be in dictionary format, received "
"%(properties)s from node %(node)s."
msgstr ""
"Основные свойства должны быть в формате словаря. Получены %(properties)s от "
"узла %(node)s."

#: ironic/drivers/modules/ilo/inspect.py:100
#, python-format
msgid "The node %s didn't return 'properties' as the key with inspection."
msgstr "Узел %s не вернул 'properties' в качестве ключа с проверкой."

#: ironic/drivers/modules/ilo/inspect.py:106
#, python-format
msgid "Node %(node)s didn't return MACs %(macs)s in dictionary format."
msgstr "Узел %(node)s не вернул MAC-адреса %(macs)s в формате словаря."

#: ironic/drivers/modules/ilo/inspect.py:111
#, python-format
msgid "The node %s didn't return 'macs' as the key with inspection."
msgstr "Узел %s не вернул 'macs' в качестве ключа с проверкой."

#: ironic/drivers/modules/ilo/inspect.py:220
#, python-format
msgid "Inspecting hardware (get_power_state) on %s"
msgstr "Проверка аппаратного обеспечения (get_power_state) в %s"

#: ironic/drivers/modules/ilo/management.py:208
#, python-format
msgid "Step '%s' not found. 'proliantutils' package needs to be updated."
msgstr ""

#: ironic/drivers/modules/ilo/management.py:222
#, python-format
msgid "Step %(step)s failed on node %(node)s with error: %(err)s"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:300
msgid "Get boot device"
msgstr "Получить загрузочное устройство"

#: ironic/drivers/modules/ilo/management.py:344
#, python-format
msgid "Setting %s as boot device"
msgstr "Настройка %s в качестве загрузочного устройства"

#: ironic/drivers/modules/ilo/management.py:482
#, python-format
msgid ""
"Value of 'ilo_license_key' must be a string instead of '%(value)s'. Step "
"'activate_license' is not executed for %(node)s."
msgstr ""

#: ironic/drivers/modules/ilo/management.py:782
#, python-format
msgid "Failed to get iSCSI target info for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:792
#: ironic/drivers/modules/ilo/management.py:798
#, python-format
msgid "Setting of target IQN %(target_iqn)s for node %(node)s"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:817
#: ironic/drivers/modules/ilo/management.py:822
#, python-format
msgid "Unsetting of iSCSI target for node %(node)s"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:843
#, python-format
msgid "Injecting NMI for node %(node)s"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:872
msgid "Get supported boot modes"
msgstr ""

#: ironic/drivers/modules/ilo/management.py:890
#, python-format
msgid "The given boot mode '%s' is not supported."
msgstr ""

#: ironic/drivers/modules/ilo/management.py:993
#, python-format
msgid ""
"Erase pattern '%(value)s' is invalid. Clean step 'erase_devices' is not "
"executed for %(node)s. Supported patterns are, for 'hdd': ('overwrite', "
"'crypto', 'zero') and for 'ssd': ('block', 'crypto', 'zero'). Ex. {'hdd': "
"'overwrite', 'ssd': 'block'}"
msgstr ""

#: ironic/drivers/modules/ilo/power.py:88
msgid "iLO get_power_status"
msgstr "get_power_status iLO"

#: ironic/drivers/modules/ilo/power.py:220
#: ironic/drivers/modules/irmc/power.py:178
#, python-format
msgid "_set_power_state called with invalid power state '%s'"
msgstr ""
"Функция 'set_power_state' вызвана с недопустимым состоянием питания '%s'"

#: ironic/drivers/modules/ilo/power.py:229
msgid "iLO set_power_state"
msgstr "set_power_state iLO"

#: ironic/drivers/modules/ilo/power.py:251
#, python-format
msgid "Powering on failed after soft power off for node %s"
msgstr ""

#: ironic/drivers/modules/ilo/raid.py:194
#, python-format
msgid ""
"Step create_configuration failed on node %(node)s with error: Unable to "
"create raid"
msgstr ""

#: ironic/drivers/modules/ilo/raid.py:203
#, python-format
msgid "Failed to create raid configuration on node %s"
msgstr ""

#: ironic/drivers/modules/ilo/raid.py:250
#, python-format
msgid ""
"Step delete_configuration failed on node %(node)s with error: Unable to "
"delete these logical disks: %(disks)s"
msgstr ""

#: ironic/drivers/modules/ilo/raid.py:264
#, python-format
msgid "Failed to delete raid configuration on node %s"
msgstr ""

#: ironic/drivers/modules/ilo/vendor.py:63
#, python-format
msgid ""
"The requested action 'boot_into_iso' can be performed only when node "
"%(node_uuid)s is in %(state)s state or in 'maintenance' mode"
msgstr ""

#: ironic/drivers/modules/ilo/vendor.py:71
msgid ""
"Error validating input for boot_into_iso vendor passthru. Some parameters "
"were not provided: "
msgstr ""

#: ironic/drivers/modules/ilo/vendor.py:79
msgid ""
"Attaches an ISO image and reboots the node. Required argument: "
"'boot_iso_href' - href of the image to be booted. This can be a Glance UUID "
"or an HTTP(S) URL."
msgstr ""

#: ironic/drivers/modules/intel_ipmi/management.py:36
#, python-format
msgid ""
"Invalid Intel SST-PP configuration value %(config)s specified. Valid values "
"are %(config_list)s."
msgstr ""

#: ironic/drivers/modules/intel_ipmi/management.py:46
#, python-format
msgid ""
"Invalid number of socket %(socket)s value specified. Expected a positive "
"integer."
msgstr ""

#: ironic/drivers/modules/intel_ipmi/management.py:79
#, python-format
msgid ""
"Failed to set Intel SST-PP configuration level %(cfg)s on socket number "
"%(skt)s due to reason %(exc)s."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:61
msgid "Deployment ISO image file name. Required."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:72
msgid ""
"Physical IDs of PCI cards. A dictionary of pairs of resource UUID and its "
"physical ID like '<UUID>:<Physical ID>,...'. The resources are Ports and "
"Volume connectors. The Physical ID consists of card type, slot No, and port "
"No. The format is {LAN|FC|CNA}<slot-No>-<Port-No>. This parameter is "
"necessary for booting a node from a remote volume. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:79
msgid ""
"Size of the network for iSCSI storage network. This is the size of the IPv4 "
"subnet mask that the storage network is configured to utilize, in a range "
"between 1 and 31 inclusive. This is necessary for booting a node from a "
"remote iSCSI volume. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:83
msgid ""
"Additional kernel parameters to pass down to instance kernel. These "
"parameters can be consumed by the kernel or by the applications by reading /"
"proc/cmdline. Mind severe cmdline size limit. Overrides [irmc]/"
"kernel_append_params ironic option."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:122
#, python-format
msgid ""
"Value '%s' for remote_image_share_root isn't a directory or doesn't exist."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:126
#, python-format
msgid "The following errors were encountered while parsing config file:%s"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:154
#, python-format
msgid ""
"Error validating iRMC virtual media for %s. Some parameters were missing in "
"node's driver_info"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:162
#, python-format
msgid "%(mode)s ISO file, %(iso_file)s, not found for node: %(node)s."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:206
#: ironic/tests/unit/drivers/modules/irmc/test_boot.py:344
#, python-format
msgid "Boot ISO file, %(boot_iso)s, not found for node: %(node)s."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:372
msgid "Copying floppy image file"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:488
msgid "Inserting virtual cdrom"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:511
msgid "Ejecting virtual cdrom"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:544
msgid "Inserting virtual floppy"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:567
msgid "Ejecting virtual floppy"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:646
#, python-format
msgid ""
"Physical port information of volume connector %(connector)s is invalid: "
"%(error)s"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:678
#, python-format
msgid ""
"Failed to validate for node %(node)s because of missing volume connector(s) "
"with type(s) %(types)s"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:685
#, python-format
msgid ""
"Failed to validate for node %(node)s because of missing physical port "
"information for iSCSI connector. This information must be set in "
"\"pci_physical_ids\" parameter of node's driver_info as <connector uuid>:"
"<physical id>."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:706
#, python-format
msgid ""
"Failed to validate for node %(node)s because of missing physical port "
"information for FC connector. This information must be set in "
"\"pci_physical_ids\" parameter of node's driver_info as <connector uuid>:"
"<physical id>."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:728
#, python-format
msgid ""
"Failed to validate for node %(node)s because of missing physical port "
"information of port %(port)s. This information should be contained in "
"\"pci_physical_ids\" parameter of node's driver_info."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:738
#, python-format
msgid ""
"Failed to validate for node %(node)s because the physical port ID for port "
"%(port)s in node's driver_info is invalid: %(reason)s"
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:761
#, python-format
msgid ""
"Failed to validate for node %(node)s because of missing "
"\"irmc_storage_network_size\" parameter in the node's driver_info. This "
"should be a positive integer smaller than 32."
msgstr ""

#: ironic/drivers/modules/irmc/boot.py:770
#: ironic/drivers/modules/irmc/boot.py:778
#, python-format
msgid ""
"Failed to validate for node %(node)s because \"irmc_storage_network_size\" "
"parameter in the node's driver_info is invalid. This should be a positive "
"integer smaller than 32."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:30
msgid "IP address or hostname of the iRMC. Required."
msgstr "IP-адрес или имя хоста iRMC. Обязательный параметр."

#: ironic/drivers/modules/irmc/common.py:31
msgid "Username for the iRMC with administrator privileges. Required."
msgstr ""
"Имя пользователя для iRMC с правами доступа администратора. Обязательный "
"параметр."

#: ironic/drivers/modules/irmc/common.py:33
msgid "Password for irmc_username. Required."
msgstr "Пароль для irmc_username. Обязательный параметр."

#: ironic/drivers/modules/irmc/common.py:36
msgid ""
"Port to be used for iRMC operations; either 80 or 443. The default value is "
"443. Optional."
msgstr ""
"Порт для операций iRMC; Возможные значения: 80 или 443. значение по "
"умолчанию: 443. Необязательный параметр."

#: ironic/drivers/modules/irmc/common.py:38
msgid ""
"Authentication method for iRMC operations; either 'basic' or 'digest'. The "
"default value is 'basic'. Optional."
msgstr ""
"Способ идентификации для операций iRMC; возможные значения: 'basic' или "
"'digest'. Значение по умолчанию - basic. Необязательный параметр."

#: ironic/drivers/modules/irmc/common.py:41
msgid ""
"Timeout (in seconds) for iRMC operations. The default value is 60. Optional."
msgstr ""
"Тайм-аут (в секундах) для операций iRMC. Значение по умолчанию: 60. "
"Необязательный параметр."

#: ironic/drivers/modules/irmc/common.py:43
msgid ""
"Sensor data retrieval method; either 'ipmitool' or 'scci'. The default value "
"is 'ipmitool'. Optional."
msgstr ""
"Метод получения данных датчика (ipmitool или scci). По умолчанию установлено "
"значение ipmitool. Необязательный параметр."

#: ironic/drivers/modules/irmc/common.py:46
msgid ""
"SNMP protocol version; either 'v1', 'v2c', or 'v3'. The default value is "
"'v2c'. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:48
msgid "SNMP port. The default is 161. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:49
msgid ""
"SNMP community required for versions 'v1' and 'v2c'. The default value is "
"'public'. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:52
msgid "SNMP security name required for version 'v3'. Optional."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:77
#, python-format
msgid "Missing the following iRMC parameters in node's driver_info: %s."
msgstr "В driver_info узла отсутствуют следующие параметры iRMC: %s."

#: ironic/drivers/modules/irmc/common.py:91
#, python-format
msgid "Value '%s' is not supported for 'irmc_auth_method'."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:95
#, python-format
msgid "Value '%s' is not supported for 'irmc_port'."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:99
#, python-format
msgid "Value '%s' is not an integer for 'irmc_client_timeout'"
msgstr ""

#: ironic/drivers/modules/irmc/common.py:103
#, python-format
msgid "Value '%s' is not supported for 'irmc_sensor_method'."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:107
#, python-format
msgid "Value '%s' is not supported for 'irmc_snmp_version'."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:111
#, python-format
msgid "Value '%s' is not an integer for 'irmc_snmp_port'"
msgstr ""

#: ironic/drivers/modules/irmc/common.py:117
#, python-format
msgid "Value '%s' is not a string for 'irmc_snmp_community'"
msgstr ""

#: ironic/drivers/modules/irmc/common.py:123
#, python-format
msgid "Value '%s' is not a string for 'irmc_snmp_security'"
msgstr ""

#: ironic/drivers/modules/irmc/common.py:127
msgid "'irmc_snmp_security' has to be set for SNMP version 3."
msgstr ""

#: ironic/drivers/modules/irmc/common.py:218
msgid "getting secure boot mode"
msgstr ""

#: ironic/drivers/modules/irmc/common.py:240
msgid "setting secure boot mode"
msgstr ""

#: ironic/drivers/modules/irmc/inspect.py:189
#, python-format
msgid ""
"Inspection failed for node %(node_id)s with the following error: %(error)s"
msgstr ""

#: ironic/drivers/modules/irmc/inspect.py:208
msgid "Invalid [irmc]/gpu_ids configuration option."
msgstr ""

#: ironic/drivers/modules/irmc/inspect.py:213
msgid "Invalid [irmc]/fpga_ids configuration option."
msgstr ""

#: ironic/drivers/modules/irmc/power.py:142
#, python-format
msgid "iRMC returned unexpected boot status value %s"
msgstr ""

#: ironic/drivers/modules/irmc/power.py:151
msgid "unexpected boot status value"
msgstr ""

#: ironic/drivers/modules/irmc/power.py:187
msgid "iRMC set_power_state"
msgstr "set_power_state iRMC"

#: ironic/drivers/modules/network/common.py:240
#, python-format
msgid "Tenant VIF is not associated with %(obj_name)s %(obj_id)s"
msgstr ""

#: ironic/drivers/modules/network/common.py:300
#, python-format
msgid ""
"Could not add public network VIF %(vif)s to node %(node)s, possible network "
"issue. %(exc)s"
msgstr ""

#: ironic/drivers/modules/network/common.py:464
#, python-format
msgid ""
"Port group %(portgroup)s doesn't support standalone ports. This port "
"%(port)s cannot be  a member of that port group because of: %(reason)s"
msgstr ""

#: ironic/drivers/modules/network/common.py:505
#, python-format
msgid ""
"standalone_ports_supported can not be set to False, because the port group "
"%(pg_id)s contains port with %(reason)s"
msgstr ""

#: ironic/drivers/modules/network/common.py:550
msgid ""
"Node has ports which map to multiple segments of the routed network to which "
"the VIF is attached. Currently neutron only supports hosts which map to one "
"segment of a routed network"
msgstr ""

#: ironic/drivers/modules/network/common.py:567
#, python-format
msgid ""
"Unable to attach VIF %(vif)s because Ironic can not update Neutron port "
"%(port)s MAC address to match physical MAC address %(mac)s"
msgstr ""

#: ironic/drivers/modules/network/flat.py:73
#, python-format
msgid ""
"Unable to set binding:host_id for neutron port %(port_id)s. Error: %(err)s"
msgstr ""

#: ironic/drivers/modules/network/neutron.py:51
#, python-format
msgid "The following [neutron] group configuration options are missing: %s"
msgstr ""

#: ironic/drivers/modules/network/neutron.py:68
#, python-format
msgid ""
"The node %s cannot perform \"local\" boot for whole disk image when node is "
"using \"neutron\" network and is configured with \"netboot\" boot option."
msgstr ""

#: ironic/drivers/modules/network/neutron.py:187
#, python-format
msgid "No ports are associated with node %s"
msgstr ""

#: ironic/drivers/modules/network/neutron.py:205
#, python-format
msgid "No neutron ports or portgroups are associated with node %s"
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:56
#: ironic/drivers/modules/redfish/boot.py:361
#: ironic/drivers/modules/redfish/inspect.py:62
#: ironic/drivers/modules/redfish/management.py:152
#: ironic/drivers/modules/redfish/power.py:84
#: ironic/drivers/modules/redfish/raid.py:695
msgid "Unable to import the sushy library"
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:93
#, python-format
msgid ""
"Cannot fetch BIOS attributes for node %s, BIOS settings are not supported."
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:167
#: ironic/drivers/modules/redfish/bios.py:214
#, python-format
msgid ""
"Redfish BIOS factory reset failed for node %s, because BIOS settings are not "
"supported."
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:182
#, python-format
msgid "Redfish BIOS factory reset failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:241
#, python-format
msgid ""
"Redfish BIOS apply configuration failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:382
#, python-format
msgid ""
"Redfish BIOS apply_configuration step failed for node %(node)s. Attributes "
"%(attrs)s are not updated."
msgstr ""

#: ironic/drivers/modules/redfish/bios.py:385
#, python-format
msgid ""
"Redfish BIOS apply_configuration step failed. Attributes %(attrs)s are not "
"updated."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:36
msgid ""
"URL or Glance UUID of the deployment kernel. Required if deploy_iso is not "
"set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:38
msgid ""
"URL or Glance UUID of the ramdisk that is mounted at boot time. Required if "
"deploy_iso is not set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:40
msgid ""
"URL or Glance UUID of the deployment ISO to use. Required if deploy_kernel/"
"deploy_ramdisk are not set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:45
msgid ""
"Boolean value to indicate whether or not the driver should use virtual media "
"USB or floppy device for passing configuration information to the ramdisk. "
"Defaults to False. Optional."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:49
msgid ""
"Additional kernel parameters to pass down to instance kernel. These "
"parameters can be consumed by the kernel or by the applications by reading /"
"proc/cmdline. Mind severe cmdline size limit. Overrides [redfish]/"
"kernel_append_params ironic option."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:56
msgid ""
"URL or Glance UUID  of the EFI system partition image containing EFI boot "
"loader. This image will be used by ironic when building UEFI-bootable ISO "
"out of kernel and ramdisk. Required for UEFI when deploy_iso is not provided."
""
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:65
msgid ""
"URL or Glance UUID of the rescue kernel. Required for rescue mode if "
"rescue_iso is not set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:67
msgid ""
"URL or Glance UUID of the rescue ramdisk with agent that is used at node "
"rescue time. Required for rescue mode if rescue_iso is not set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:70
msgid ""
"URL or Glance UUID of the rescue ISO to use. Required for rescue mode if "
"rescue_kernel/rescue_ramdisk are not set."
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:112
msgid ""
"Error validating Redfish virtual media. Some parameters were missing in "
"node's driver_info"
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:213
msgid "No suitable virtual media device found"
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:417
#, python-format
msgid ""
"The %(iface)s boot interface is not suitable for node %(node)s with vendor "
"%(vendor)s, use idrac-redfish-virtual-media instead"
msgstr ""

#: ironic/drivers/modules/redfish/boot.py:664
#, python-format
msgid ""
"Cannot attach configdrive for node %s: no suitable virtual USB slot has been "
"found"
msgstr ""

#: ironic/drivers/modules/redfish/inspect.py:146
#, python-format
msgid ""
"Failed to discover the following properties: %(missing_keys)s on node "
"%(node)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:234
#, python-format
msgid "Redfish set boot device failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:305
#, python-format
msgid ""
"Setting boot mode to %(mode)s failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:317
#, python-format
msgid ""
"Attempt to set boot mode on node %(node)s failed to set boot mode as the "
"node does not appear to support overriding the boot mode. Possibly partial "
"Redfish implementation?"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:506
#, python-format
msgid "Redfish inject NMI failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:647
#, python-format
msgid ""
"Redfish set %(component)s indicator %(indicator)s state %(state)s failed for "
"node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:657
#: ironic/drivers/modules/redfish/management.py:706
#, python-format
msgid ""
"Unknown indicator %(indicator)s for component %(component)s of node %(uuid)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:697
#, python-format
msgid ""
"Redfish get %(component)s indicator %(indicator)s state failed for node "
"%(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:1041
#, python-format
msgid ""
"Firmware update failed for node %(node)s, firmware %(firmware_image)s. Error:"
" %(errors)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:1105
#, python-format
msgid "Configuring secure boot requires UEFI for node %s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:1113
#, python-format
msgid "Failed to set secure boot state on node %(node)s to %(value)s: %(exc)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:1136
#, python-format
msgid "Failed to reset secure boot keys on node %(node)s: %(exc)s"
msgstr ""

#: ironic/drivers/modules/redfish/management.py:1183
#, python-format
msgid "Failed to get network interface information on node %(node)s: %(exc)s"
msgstr ""

#: ironic/drivers/modules/redfish/power.py:136
#, python-format
msgid ""
"Setting power state to %(state)s failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/power.py:168
#, python-format
msgid ""
"Reboot failed for node %(node)s when setting power state to %(state)s. Error:"
" %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:144
#, python-format
msgid ""
"Cannot get the list of physical disks for node %(node_uuid)s. Reason: "
"%(error)s.node_uuid"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:206
#, python-format
msgid ""
"The number of physical drives (%(drives)s) is too few for the required "
"number of overhead drives (%(overhead)s)drives"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:281
#, python-format
msgid ""
"For RAID level %(raid_level)s, the number of physical disks provided "
"(%(num_disks)s) must be a multiple of the spans count "
"(%(spans_count)s)raid_levelraid_level"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:309
#, python-format
msgid ""
"The physical disk space (%(max_vol_size)s bytes) is not enough for the size "
"of the logical disk (%(logical_size)s bytes)max_vol_size"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:321
#, python-format
msgid ""
"The free space of a disk (%(free_space)s bytes) is not enough for the per-"
"disk size of the logical disk (%(disk_usage)s bytes)free_space"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:656
#, python-format
msgid "No storage controller found for node %(node_uuid)snode_uuid"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:711
#, python-format
msgid ""
"The %(iface)s raid interface is not suitable for node %(node)s with vendor "
"%(vendor)s, use idrac-redfish instead"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:746
msgid "interface type `scsi` not supported by Redfish RAID"
msgstr ""

#: ironic/drivers/modules/redfish/raid.py:889
#, python-format
msgid ""
"Cannot get the list of volumes to delete for node %(node_uuid)s. Reason: "
"%(error)s.node_uuid"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:37
msgid ""
"The URL address to the Redfish controller. It must include the authority "
"portion of the URL. If the scheme is missing, https is assumed. For example: "
"https://mgmt.vendor.com. If a path is added, it will be used as the API "
"endpoint root_prefix. Required"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:46
msgid ""
"The canonical path to the ComputerSystem resource that the driver will "
"interact with. It should include the root service, version and the unique "
"resource path to a ComputerSystem within the same authority as the "
"redfish_address property. For example: /redfish/v1/Systems/1. This property "
"is only required if target BMC manages more than one ComputerSystem. "
"Otherwise ironic will pick the only available ComputerSystem automatically."
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:56
msgid ""
"User account with admin/server-profile access privilege. Although this "
"property is not mandatory it's highly recommended to set a username. "
"Optional"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:60
msgid ""
"User account password. Although this property is not mandatory, it's highly "
"recommended to set a password. Optional"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:71
msgid ""
"Redfish HTTP client authentication method. Can be \"basic\", \"session\" or "
"\"auto\". If not set, the default value is taken from Ironic configuration "
"as ``[redfish]auth_type`` option."
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:93
#, python-format
msgid ""
"Missing the following Redfish properties in node %(node)s driver_info: "
"%(info)s"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:104
#: ironic/drivers/modules/redfish/utils.py:114
#, python-format
msgid ""
"Invalid Redfish address %(address)s set in driver_info/redfish_address on "
"node %(node)s"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:129
#, python-format
msgid ""
"Invalid value \"%(value)s\" set in driver_info/redfish_system_id on node "
"%(node)s. The value should be a path (string) to the resource that the "
"driver will interact with. For example: /redfish/v1/Systems/1"
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:146
#: ironic/drivers/modules/redfish/utils.py:156
#, python-format
msgid ""
"Invalid value type set in driver_info/redfish_verify_ca on node %(node)s. "
"The value should be a Boolean or the path to a file/directory, not "
"\"%(value)s\""
msgstr ""

#: ironic/drivers/modules/redfish/utils.py:164
#, python-format
msgid ""
"Invalid value \"%(value)s\" set in driver_info/redfish_auth_type on node "
"%(node)s. The value should be one of \"basic\", \"session\" or \"auto\"."
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:84
#, python-format
msgid "Boot device %s is not a valid value "
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:89
msgid ""
"Eject a virtual media device. If no device is provided then all attached "
"devices will be ejected. Optional arguments: 'boot_device' - the boot device "
"to eject, either 'cd', 'dvd', 'usb', or 'floppy'"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:125
#, python-format
msgid "EventTypes %s is not a valid value, allowed values %s"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:133
#, python-format
msgid "Context %s is not a valid string"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:136
#, python-format
msgid "Protocol %s is not a string"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:147
#, python-format
msgid "Destination %s is not a valid URI"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:156
msgid ""
"Creates a subscription on a node. Required argument: a dictionary of "
"{'destination': 'destination_url'}"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:179
#, python-format
msgid ""
"Failed to create subscription on node %(node)s. Subscription payload: "
"%(payload)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:192
msgid "id can't be None"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:196
msgid ""
"Delete a subscription on a node. Required argument: a dictionary of {'id': "
"'subscription_bmc_id'}"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:218
#, python-format
msgid "Sucessfuly deleted subscription %(id)s on node %(node)s"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:223
#, python-format
msgid ""
"Redfish delete_subscription failed for subscription %(id)s on node %(node)s. "
"Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:233
msgid "Returns all subscriptions on the node."
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:247
#, python-format
msgid "Redfish get_subscriptions failed for node %(node)s. Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:256
msgid ""
"Get a subscription on the node. Required argument: a dictionary of {'id': "
"'subscription_bmc_id'}"
msgstr ""

#: ironic/drivers/modules/redfish/vendor.py:279
#, python-format
msgid ""
"Redfish get_subscription failed for subscription %(id)s on node %(node)s. "
"Error: %(error)s"
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:52
#, python-format
msgid ""
"Failed to validate cinder storage interface for node %(node)s. %(reason)s"
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:88
msgid ""
"The [pxe]/ipxe_enabled option must be set to True or the boot interface must "
"be set to ``ipxe`` to support network booting to an iSCSI volume."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:112
#, python-format
msgid ""
"Cinder requires both wwnn and wwpn entries for FCoE connections. There must "
"be a wwpn entry for every wwnn entry. There are %(wwpn)d wwpn entries and "
"%(wwnn)s wwnn entries."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:139
#, python-format
msgid "volume_id missing from target %(id)s."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:155
#, python-format
msgid ""
"Volume target %(id)s is configured for 'fibre_channel', however the "
"capability 'fibre_channel_boot' is not set on node."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:161
#, python-format
msgid ""
"Volume target %(id)s is configured for 'fibre_channel', however no Fibre "
"Channel WWPNs are configured for the node volume connectors."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:170
#, python-format
msgid ""
"Volume target %(id)s is configured for 'iscsi', however the capability "
"'iscsi_boot' is not set for the node."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:176
#, python-format
msgid ""
"Volume target %(id)s is configured for 'iscsi', however no iSCSI connectors "
"are configured for the node."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:184
#, python-format
msgid ""
"Volume target %(id)s is of an unknown type '%(type)s'. Supported types: "
"'iscsi' or 'fibre_channel'"
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:218
#, python-format
msgid ""
"In order to enable the 'iscsi_boot' capability for the node, an associated "
"volume_connector type must be valid for iSCSI (%(options)s)."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:226
#, python-format
msgid ""
"In order to enable the 'fibre_channel_boot' capability for the node, an "
"associated volume_connector type must be valid for Fibre Channel "
"(%(options)s)."
msgstr ""

#: ironic/drivers/modules/storage/cinder.py:422
#, python-format
msgid ""
"Insufficient or incompatible volume connection records for node %(uuid)s. "
"Valid connector types: %(types)s"
msgstr ""

#: ironic/drivers/modules/storage/external.py:32
#, python-format
msgid ""
"Failed to validate external storage interface for node %(node)s. %(reason)s"
msgstr ""

#: ironic/drivers/modules/storage/external.py:40
msgid ""
"The [pxe]/ipxe_enabled option must be set to True to support network booting "
"to an iSCSI volume or the boot interface must be set to ``ipxe``."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:32
msgid "IP address of the XClarity Controller."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:33
msgid "Username for the XClarity Controller with administrator privileges."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:35
msgid "Password for xclarity_username."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:36
msgid "Server Hardware ID managed by XClarity."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:40
msgid "Port to be used for XClarity Controller connection. Optional"
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:73
#: ironic/drivers/modules/xclarity/common.py:92
#, python-format
msgid "'%s' not provided to XClarity."
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:125
#, python-format
msgid "Error getting connection to XClarity address: %(ip)s. Error: %(exc)s"
msgstr ""

#: ironic/drivers/modules/xclarity/common.py:144
#, python-format
msgid ""
"Error validating node driver info, server uuid: %s missing "
"xclarity_hardware_id"
msgstr ""

#: ironic/drivers/modules/xclarity/management.py:90
#, python-format
msgid "Unsupported boot device %(device)s for node: %(node)s "
msgstr ""

#: ironic/objects/conductor.py:87
msgid "Cannot update a conductor record directly."
msgstr "Не удается обновить непосредственно запись проводника."

#: ironic/objects/node.py:212
#, python-format
msgid ""
"The following properties for node %(node)s should be non-negative integers, "
"but provided values are: %(msgs)s"
msgstr ""

#: ironic/tests/unit/drivers/modules/irmc/test_boot.py:225
#, python-format
msgid "Deploy ISO file, %(deploy_iso)s, not found for node: %(node)s."
msgstr ""

#: ironic/tests/unit/objects/utils.py:36
#, python-format
msgid ""
"Unknown keyword arguments (%(extra)s) were passed while creating a test "
"%(object_type)s object."
msgstr ""

