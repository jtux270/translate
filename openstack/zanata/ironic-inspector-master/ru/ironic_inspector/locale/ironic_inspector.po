# 
msgid ""
msgstr ""
"Project-Id-Version: ironic-inspector VERSION\n"
"Report-Msgid-Bugs-To: https://bugs.launchpad.net/openstack-i18n/\n"
"POT-Creation-Date: 2021-08-11 01:05+0000\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"Language: ru\n"
"X-Generator: Zanata 4.3.3\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"

#: ironic_inspector/api_tools.py:38
#, python-format
msgid "Bad request: %s"
msgstr ""

#: ironic_inspector/api_tools.py:69
msgid "Marker not UUID-like"
msgstr ""

#: ironic_inspector/api_tools.py:82
msgid "Limit cannot be negative"
msgstr ""

#: ironic_inspector/api_tools.py:83
#, python-format
msgid "Limit over %s"
msgstr ""

#: ironic_inspector/introspect.py:55
#, python-format
msgid "Failed validation of power interface: %s"
msgstr ""

#: ironic_inspector/introspect.py:69
#, python-format
msgid "Failed to submit introspection job: %s"
msgstr ""

#: ironic_inspector/introspect.py:116
msgid ""
"No lookup attributes were found, inspector won't be able to find it after "
"introspection, consider creating ironic ports or providing an IPMI address"
msgstr ""

#: ironic_inspector/introspect.py:130
#, python-format
msgid "Failed to set boot device to PXE: %s"
msgstr ""

#: ironic_inspector/introspect.py:139
#, python-format
msgid ""
"Failed to power on the node, check its power management configuration: %s"
msgstr ""

#: ironic_inspector/introspect.py:165
msgid "Node is locked, please, retry later"
msgstr ""

#: ironic_inspector/introspect.py:186
msgid "Canceled by operator"
msgstr ""

#: ironic_inspector/main.py:121
msgid "Malformed API version: expected string in form of X.Y or latest"
msgstr ""

#: ironic_inspector/main.py:174
msgid "Internal server error"
msgstr ""

#: ironic_inspector/main.py:196
#, python-format
msgid ""
"Unsupported API version %(requested)s, supported range is %(min)s to %(max)s"
msgstr ""

#: ironic_inspector/main.py:323
#, python-format
msgid "Version %s not found."
msgstr ""

#: ironic_inspector/main.py:333 ironic_inspector/main.py:434
#: ironic_inspector/main.py:437
#, python-format
msgid "Invalid data: expected a JSON object, got %s"
msgstr ""

#: ironic_inspector/main.py:359
#, python-format
msgid "Invalid boolean value for manage_boot: %s"
msgstr ""

#: ironic_inspector/main.py:363
msgid ""
"Managed boot is requested, but this installation cannot manage boot "
"((can_manage_boot set to False)"
msgstr ""

#: ironic_inspector/main.py:407
msgid ""
"Inspector is not configured to store data. Set the [processing]store_data "
"configuration option to change this."
msgstr ""

#: ironic_inspector/main.py:473
msgid "Invalid UUID value"
msgstr ""

#: ironic_inspector/main.py:476
msgid "Invalid scope: the length of the scope should be within 255 characters"
msgstr ""

#: ironic_inspector/node_cache.py:89
msgid "state"
msgstr ""

#: ironic_inspector/node_cache.py:130
msgid "Node not found in the cache"
msgstr ""

#: ironic_inspector/node_cache.py:213
#, python-format
msgid "Invalid event: %s"
msgstr ""

#: ironic_inspector/node_cache.py:794
#, python-format
msgid "Could not find node %s in cache"
msgstr ""

#: ironic_inspector/node_cache.py:830
#, python-format
msgid "Could not find a node for attributes %s"
msgstr ""

#: ironic_inspector/node_cache.py:844
#, python-format
msgid "Multiple nodes match the same number of attributes %(attr)s: %(found)s"
msgstr ""

#: ironic_inspector/node_cache.py:858
#, python-format
msgid ""
"Could not find node %s in introspection cache, probably it's not on "
"introspection now"
msgstr ""

#: ironic_inspector/node_cache.py:863
#, python-format
msgid "Introspection for node %(node)s already finished on %(finish)s"
msgstr ""

#: ironic_inspector/node_cache.py:952
msgid ""
"Existing node cannot be found since neither MAC addresses nor BMC addresses "
"are present in the inventory"
msgstr ""

#: ironic_inspector/node_cache.py:964
#, python-format
msgid ""
"Existing node was not found by MAC address(es) %(macs)s and BMC address(es) "
"%(addr)s"
msgstr ""

#: ironic_inspector/node_cache.py:971
#, python-format
msgid "Node %(node)s is not active, its provision state is %(state)s"
msgstr ""

#: ironic_inspector/node_cache.py:994
#, python-format
msgid "Node not found for marker: %s"
msgstr ""

#: ironic_inspector/node_cache.py:1040
#, python-format
msgid ""
"Introspection data not found for node %(node)s, processed=%(processed)s"
msgstr ""

#: ironic_inspector/process.py:103 ironic_inspector/process.py:122
#, python-format
msgid "Look up error: %s"
msgstr ""

#: ironic_inspector/process.py:118
msgid "Node not found hook returned nothing"
msgstr ""

#: ironic_inspector/process.py:120
#, python-format
msgid "Node not found hook failed: %s"
msgstr ""

#: ironic_inspector/process.py:146
#, python-format
msgid ""
"Unexpected exception %(exc_class)s during preprocessing in hook %(hook)s: "
"%(error)s"
msgstr ""

#: ironic_inspector/process.py:213
#, python-format
msgid ""
"The following failures happened during running pre-processing hooks:\n"
"%s"
msgstr ""

#: ironic_inspector/process.py:225
#, python-format
msgid "Node processing already finished with error: %s"
msgstr ""

#: ironic_inspector/process.py:250
#, python-format
msgid "Unexpected exception %(exc_class)s during processing: %(error)s"
msgstr ""

#: ironic_inspector/process.py:312
#, python-format
msgid ""
"Failed to power off node %(node)s, check its power management configuration: "
"%(exc)s"
msgstr ""

#: ironic_inspector/process.py:345
msgid "Node locked, please, try again later"
msgstr ""

#: ironic_inspector/process.py:359
#, python-format
msgid "Encountered an exception while getting the Ironic client: %s"
msgstr ""

#: ironic_inspector/process.py:368
#, python-format
msgid "Failed reapply for node %(node)s, Error: %(exc)s"
msgstr ""

#: ironic_inspector/process.py:386
#, python-format
msgid ""
"Pre-processing failures detected reapplying introspection on stored data:\n"
"%s"
msgstr ""

#: ironic_inspector/rules.py:256
#, python-format
msgid "Invalid formatting variable key provided in value %(val)s: %(e)s"
msgstr ""

#: ironic_inspector/rules.py:298
#, python-format
msgid "Validation failed for conditions: %s"
msgstr ""

#: ironic_inspector/rules.py:309
#, python-format
msgid "Unsupported scheme for field: %s, valid values are node:// or data://"
msgstr ""

#: ironic_inspector/rules.py:315
#, python-format
msgid "Unable to parse field JSON path %(field)s: %(error)s"
msgstr ""

#: ironic_inspector/rules.py:324
#, python-format
msgid "Invalid parameters for operator %(op)s: %(error)s"
msgstr ""

#: ironic_inspector/rules.py:344
#, python-format
msgid "Validation failed for actions: %s"
msgstr ""

#: ironic_inspector/rules.py:354
#, python-format
msgid "Invalid parameters for action %(act)s: %(error)s"
msgstr ""

#: ironic_inspector/rules.py:410
#, python-format
msgid "Rule with UUID %s already exists"
msgstr ""

#: ironic_inspector/rules.py:428 ironic_inspector/rules.py:456
#, python-format
msgid "Rule %s was not found"
msgstr ""

#: ironic_inspector/utils.py:102
#, python-format
msgid "[node: %s]"
msgstr ""

#: ironic_inspector/utils.py:104
msgid "[unidentified node]"
msgstr ""

#: ironic_inspector/utils.py:149
msgid ""
"Node state mismatch detected between the DB and the cached node_info object"
msgstr ""

#: ironic_inspector/utils.py:261
msgid "Authentication required"
msgstr ""

#: ironic_inspector/utils.py:266
msgid "Access denied by policy"
msgstr ""

#: ironic_inspector/utils.py:281
msgid "Hardware inventory is empty or missing"
msgstr ""

#: ironic_inspector/utils.py:285
msgid "No network interfaces provided in the inventory"
msgstr ""

#: ironic_inspector/cmd/all.py:33
msgid ""
"To run ironic-inspector in standalone mode, [DEFAULT]standalone should be "
"set to True."
msgstr ""

#: ironic_inspector/cmd/conductor.py:32
msgid ""
"To run ironic-inspector-conductor, [DEFAULT]standalone should be set to "
"False."
msgstr ""

#: ironic_inspector/cmd/migration.py:30
msgid "The database storage backend"
msgstr ""

#: ironic_inspector/cmd/migration.py:31
msgid "The Swift storage backend"
msgstr ""

#: ironic_inspector/cmd/migration.py:37
msgid "The source storage where the introspected data will be read from."
msgstr ""

#: ironic_inspector/cmd/migration.py:43
msgid "The target storage where the introspected data will be saved to."
msgstr ""

#: ironic_inspector/cmd/migration.py:87
msgid "Source and destination can not be the same."
msgstr ""

#: ironic_inspector/cmd/migration.py:117
msgid "... terminating migration tool"
msgstr ""

#: ironic_inspector/cmd/status.py:47
msgid "Policy File JSON to YAML Migration"
msgstr ""

#: ironic_inspector/cmd/wsgi.py:30
msgid ""
"To run ironic-inspector-api, [DEFAULT]standalone should be set to False."
msgstr ""

#: ironic_inspector/common/ironic.py:44
#, python-format
msgid "Node %s was not found in Ironic"
msgstr ""

#: ironic_inspector/common/ironic.py:120
#, python-format
msgid "Failed to resolve the hostname (%(value)s) for node %(uuid)s"
msgstr ""

#: ironic_inspector/common/ironic.py:148
#, python-format
msgid ""
"Invalid provision state for introspection: \"%(state)s\", valid states are "
"\"%(valid)s\""
msgstr ""

#: ironic_inspector/common/ironic.py:184
#, python-format
msgid "Cannot get node %(node)s: %(exc)s"
msgstr ""

#: ironic_inspector/common/ironic.py:218
#, python-format
msgid "Port %(mac)s already exists, uuid: %(uuid)s"
msgstr ""

#: ironic_inspector/common/ironic.py:224
#, python-format
msgid "MAC addresses %(macs)s correspond to more than one node: %(nodes)s"
msgstr ""

#: ironic_inspector/common/ironic.py:255
#, python-format
msgid "Node %(uuid)s already has BMC address %(addr)s"
msgstr ""

#: ironic_inspector/common/ironic.py:262
#, python-format
msgid "BMC addresses %(addr)s correspond to more than one node: %(nodes)s"
msgstr ""

#: ironic_inspector/common/ironic.py:282
#, python-format
msgid ""
"MAC addresses %(mac)s and BMC addresses %(addr)s correspond to different "
"nodes: %(node1)s and %(node2)s"
msgstr ""

#: ironic_inspector/common/lldp_parsers.py:361
msgid "Invalid index for mau type"
msgstr ""

#: ironic_inspector/common/swift.py:60
#, python-format
msgid "Could not connect to the object storage service: %s"
msgstr ""

#: ironic_inspector/common/swift.py:78
#, python-format
msgid "Swift failed to create container %(container)s. Error was: %(error)s"
msgstr ""

#: ironic_inspector/common/swift.py:91
#, python-format
msgid ""
"Swift failed to create object %(object)s in container %(container)s. Error "
"was: %(error)s"
msgstr ""

#: ironic_inspector/common/swift.py:111
#, python-format
msgid ""
"Swift failed to get object %(object)s in container %(container)s. Error was: "
"%(error)s"
msgstr ""

#: ironic_inspector/conductor/manager.py:199
msgid ""
"Inspector is not configured to store introspection data. Set the "
"[processing]store_data configuration option to change this."
msgstr ""

#: ironic_inspector/conf/accelerators.py:25
msgid ""
"The predefined accelerator devices which contains information used for "
"identifying accelerators."
msgstr ""

#: ironic_inspector/conf/capabilities.py:32
msgid "Whether to store the boot mode (BIOS or UEFI)."
msgstr ""

#: ironic_inspector/conf/capabilities.py:35
msgid ""
"Mapping between a CPU flag and a capability to set if this flag is present."
msgstr ""

#: ironic_inspector/conf/coordination.py:25
msgid "The backend URL to use for distributed coordination. EXPERIMENTAL."
msgstr ""

#: ironic_inspector/conf/default.py:24
msgid "IP to listen on."
msgstr ""

#: ironic_inspector/conf/default.py:27
msgid "Port to listen on."
msgstr ""

#: ironic_inspector/conf/default.py:31
msgid ""
"Name of this node. This can be an opaque identifier. It is not necessarily a "
"hostname, FQDN, or IP address. However, the node name must be valid within "
"an AMQP key, and if using ZeroMQ, a valid hostname, FQDN, or IP address."
msgstr ""

#: ironic_inspector/conf/default.py:38
msgid "no authentication"
msgstr ""

#: ironic_inspector/conf/default.py:39
msgid "use the Identity service for authentication"
msgstr ""

#: ironic_inspector/conf/default.py:41
msgid "HTTP basic authentication"
msgstr ""

#: ironic_inspector/conf/default.py:42
msgid ""
"Authentication method used on the ironic-inspector API. \"noauth\", "
"\"keystone\" or \"http_basic\" are valid options. \"noauth\" will disable "
"all authentication."
msgstr ""

#: ironic_inspector/conf/default.py:47
msgid ""
"Path to Apache format user authentication file used when auth_strategy="
"http_basic"
msgstr ""

#: ironic_inspector/conf/default.py:54
msgid ""
"Timeout after which introspection is considered failed, set to 0 to disable."
msgstr ""

#: ironic_inspector/conf/default.py:59
msgid ""
"Amount of time in seconds, after which repeat clean up of timed out nodes "
"and old nodes status information. WARNING: If set to a value of 0, then the "
"periodic task is disabled and inspector will not sync with ironic to "
"complete the internal clean-up process. Not advisable if the deployment uses "
"a PXE filter, and will result in the ironic-inspector ceasing periodic "
"cleanup activities."
msgstr ""

#: ironic_inspector/conf/default.py:69
msgid "Interval (in seconds) between leader elections."
msgstr ""

#: ironic_inspector/conf/default.py:72
msgid "SSL Enabled/Disabled"
msgstr ""

#: ironic_inspector/conf/default.py:75
msgid "The green thread pool size."
msgstr ""

#: ironic_inspector/conf/default.py:78
msgid ""
"Delay (in seconds) between two introspections. Only applies when boot is "
"managed by ironic-inspector (i.e. manage_boot==True)."
msgstr ""

#: ironic_inspector/conf/default.py:84
msgid "Ironic driver_info fields that are equivalent to ipmi_address."
msgstr ""

#: ironic_inspector/conf/default.py:88
msgid ""
"Path to the rootwrap configuration file to use for running commands as root"
msgstr ""

#: ironic_inspector/conf/default.py:91
msgid "Limit the number of elements an API list-call returns"
msgstr ""

#: ironic_inspector/conf/default.py:94
msgid ""
"Whether the current installation of ironic-inspector can manage PXE booting "
"of nodes. If set to False, the API will reject introspection requests with "
"manage_boot missing or set to True."
msgstr ""

#: ironic_inspector/conf/default.py:99
msgid ""
"Whether to enable publishing the ironic-inspector API endpoint via multicast "
"DNS."
msgstr ""

#: ironic_inspector/conf/default.py:102
msgid ""
"Whether to run ironic-inspector as a standalone service. It's EXPERIMENTAL "
"to set to False."
msgstr ""

#: ironic_inspector/conf/discovery.py:22
msgid ""
"The name of the Ironic driver used by the enroll hook when creating a new "
"node in Ironic."
msgstr ""

#: ironic_inspector/conf/discovery.py:25
msgid "Additional fields to set on newly discovered nodes."
msgstr ""

#: ironic_inspector/conf/discovery.py:28
msgid ""
"IP version of BMC address that will be used when enrolling a new node in "
"Ironic. Defaults to \"4,6\". Could be \"4\" (use v4 address only), \"4,6\" "
"(v4 address have higher priority and if both addresses found v6 version is "
"ignored), \"6,4\" (v6 is desired but fall back to v4 address for BMCs having "
"v4 address, opposite to \"4,6\"), \"6\" (use v6 address only and ignore v4 "
"version)."
msgstr ""

#: ironic_inspector/conf/dnsmasq_pxe_filter.py:22
msgid ""
"The MAC address cache directory, exposed to dnsmasq.This directory is "
"expected to be in exclusive control of the driver."
msgstr ""

#: ironic_inspector/conf/dnsmasq_pxe_filter.py:26
msgid ""
"Purge the hostsdir upon driver initialization. Setting to false should only "
"be performed when the deployment of inspector is such that there are "
"multiple processes executing inside of the same host and namespace. In this "
"case, the Operator is responsible for setting up a custom cleaning facility."
msgstr ""

#: ironic_inspector/conf/dnsmasq_pxe_filter.py:34
msgid ""
"A (shell) command line to start the dnsmasq service upon filter "
"initialization. Default: don't start."
msgstr ""

#: ironic_inspector/conf/dnsmasq_pxe_filter.py:37
msgid ""
"A (shell) command line to stop the dnsmasq service upon inspector (error) "
"exit. Default: don't stop."
msgstr ""

#: ironic_inspector/conf/extra_hardware.py:22
msgid ""
"If True, refuse to parse extra data if at least one record is too short. "
"Additionally, remove the incoming \"data\" even if parsing failed."
msgstr ""

#: ironic_inspector/conf/iptables.py:22
msgid "Interface on which dnsmasq listens, the default is for VM's."
msgstr ""

#: ironic_inspector/conf/iptables.py:26
msgid "iptables chain name to use."
msgstr ""

#: ironic_inspector/conf/iptables.py:29
msgid ""
"List of Ethernet Over InfiniBand interfaces on the Inspector host which are "
"used for physical access to the DHCP network. Multiple interfaces would be "
"attached to a bond or bridge specified in dnsmasq_interface. The MACs of the "
"InfiniBand nodes which are not in desired state are going to be blacklisted "
"based on the list of neighbor MACs on these interfaces."
msgstr ""

#: ironic_inspector/conf/iptables.py:39
msgid "IPv4"
msgstr ""

#: ironic_inspector/conf/iptables.py:40
msgid "IPv6"
msgstr ""

#: ironic_inspector/conf/iptables.py:41
msgid "The IP version that will be used for iptables filter. Defaults to 4."
msgstr ""

#: ironic_inspector/conf/ironic.py:27
msgid "Interval between retries in case of conflict error (HTTP 409)."
msgstr ""

#: ironic_inspector/conf/ironic.py:31
msgid "Maximum number of retries in case of conflict error (HTTP 409)."
msgstr ""

#: ironic_inspector/conf/pci_devices.py:22
msgid ""
"An alias for PCI device identified by 'vendor_id' and 'product_id' fields. "
"Format: {\"vendor_id\": \"1234\", \"product_id\": \"5678\", \"name\": "
"\"pci_dev1\"}"
msgstr ""

#: ironic_inspector/conf/port_physnet.py:24
msgid ""
"Mapping of IP subnet CIDR to physical network. When the physnet_cidr_map "
"processing hook is enabled the physical_network property of baremetal ports "
"is populated based on this mapping."
msgstr ""

#: ironic_inspector/conf/processing.py:26
msgid ""
"Which MAC addresses to add as ports during introspection. Possible values: "
"all (all MAC addresses), active (MAC addresses of NIC with IP addresses), "
"pxe (only MAC address of NIC node PXE booted from, falls back to \"active\" "
"if PXE MAC is not supplied by the ramdisk)."
msgstr ""

#: ironic_inspector/conf/processing.py:35
msgid ""
"Which ports (already present on a node) to keep after introspection. "
"Possible values: all (do not delete anything), present (keep ports which "
"MACs were present in introspection data), added (keep only MACs that we "
"added during introspection)."
msgstr ""

#: ironic_inspector/conf/processing.py:43
msgid ""
"Whether to overwrite existing values in node database. Disable this option "
"to make introspection a non-destructive operation."
msgstr ""

#: ironic_inspector/conf/processing.py:49
msgid ""
"Comma-separated list of default hooks for processing pipeline. Hook "
"'scheduler' updates the node with the minimum properties required by the "
"Nova scheduler. Hook 'validate_interfaces' ensures that valid NIC data was "
"provided by the ramdisk. Do not exclude these two unless you really know "
"what you're doing."
msgstr ""

#: ironic_inspector/conf/processing.py:58
msgid ""
"Comma-separated list of enabled hooks for processing pipeline. The default "
"for this is $default_processing_hooks, hooks can be added before or after "
"the defaults like this: \"prehook,$default_processing_hooks,posthook\"."
msgstr ""

#: ironic_inspector/conf/processing.py:64
msgid "If set, logs from ramdisk will be stored in this directory."
msgstr ""

#: ironic_inspector/conf/processing.py:68
msgid ""
"Whether to store ramdisk logs even if it did not return an error message "
"(dependent upon \"ramdisk_logs_dir\" option being set)."
msgstr ""

#: ironic_inspector/conf/processing.py:72
msgid ""
"The name of the hook to run when inspector receives inspection information "
"from a node it isn't already aware of. This hook is ignored by default."
msgstr ""

#: ironic_inspector/conf/processing.py:77
msgid ""
"The storage backend for storing introspection data. Possible values are: "
"'none', 'database' and 'swift'. If set to 'none', introspection data will "
"not be stored."
msgstr ""

#: ironic_inspector/conf/processing.py:83
msgid ""
"Whether to leave 1 GiB of disk size untouched for partitioning. Only has "
"effect when used with the IPA as a ramdisk, for older ramdisk local_gb is "
"calculated on the ramdisk side."
msgstr ""

#: ironic_inspector/conf/processing.py:89
msgid ""
"File name template for storing ramdisk logs. The following replacements can "
"be used: {uuid} - node UUID or \"unknown\", {bmc} - node BMC address or "
"\"unknown\", {dt} - current UTC date and time, {mac} - PXE booting MAC or "
"\"unknown\"."
msgstr ""

#: ironic_inspector/conf/processing.py:97
msgid ""
"Whether to power off a node after introspection.Nodes in active or rescue "
"states which submit introspection data will be left on if the feature is "
"enabled via the 'permit_active_introspection' configuration option."
msgstr ""

#: ironic_inspector/conf/processing.py:104
msgid "Whether to process nodes that are in running states."
msgstr ""

#: ironic_inspector/conf/processing.py:108
msgid ""
"Whether to update the pxe_enabled value according to the introspection data. "
"This option has no effect if [processing]overwrite_existing is set to False"
msgstr ""

#: ironic_inspector/conf/pxe_filter.py:21
msgid ""
"PXE boot filter driver to use, possible filters are: \"iptables\", "
"\"dnsmasq\" and \"noop\". Set \"noop \" to disable the firewall filtering."
msgstr ""

#: ironic_inspector/conf/pxe_filter.py:25
msgid ""
"Amount of time in seconds, after which repeat periodic update of the filter."
msgstr ""

#: ironic_inspector/conf/pxe_filter.py:28
msgid ""
"By default inspector will open the DHCP server for any node when "
"introspection is active. Opening DHCP for unknown MAC addresses when "
"introspection is active allow for users to add nodes with no ports to ironic "
"and have ironic-inspector enroll ports based on node introspection results. "
"NOTE: If this option is True, nodes must have at least one enrolled port "
"prior to introspection."
msgstr ""

#: ironic_inspector/conf/swift.py:27
msgid ""
"Number of seconds that the Swift object will last before being deleted. (set "
"to 0 to never delete the object)."
msgstr ""

#: ironic_inspector/conf/swift.py:32
msgid "Default Swift container to use when creating objects."
msgstr ""

#: ironic_inspector/plugins/base.py:88
#, python-format
msgid "missing required parameter(s): %s"
msgstr ""

#: ironic_inspector/plugins/base.py:91
#, python-format
msgid "unexpected parameter(s): %s"
msgstr ""

#: ironic_inspector/plugins/base.py:161
#, python-format
msgid "The following hook(s) are missing or failed to load: %s"
msgstr ""

#: ironic_inspector/plugins/rules.py:98
#, python-format
msgid "invalid regular expression: %s"
msgstr ""

#: ironic_inspector/plugins/rules.py:146
msgid ""
"Cannot pass reset_interfaces to set-attribute, requires API 1.46 and "
"ironicclient >= 2.5.0"
msgstr ""

#: ironic_inspector/plugins/rules.py:159
msgid "missing required parameter(s): value"
msgstr ""

#: ironic_inspector/plugins/standard.py:54
#, python-format
msgid ""
"No disks could be found using the root device hints %(hints)s because they "
"failed to validate. Error: %(error)s"
msgstr ""

#: ironic_inspector/plugins/standard.py:60
msgid "No disks satisfied root device hints"
msgstr ""

#: ironic_inspector/plugins/standard.py:146
msgid ""
"Configuration error: add_ports set to disabled and keep_ports set to added. "
"Please change keep_ports to all."
msgstr ""

#: ironic_inspector/plugins/standard.py:207
msgid "No interfaces supplied by the ramdisk"
msgstr ""

#: ironic_inspector/plugins/standard.py:238
#, python-format
msgid "No suitable interfaces found in %s"
msgstr ""

#: ironic_inspector/plugins/standard.py:330
#, python-format
msgid "Ramdisk reported error: %s"
msgstr ""

#: ironic_inspector/pxe_filter/base.py:108
msgid ""
"Configuration error: [pxe_filter]deny_unknown_macs isenabled and "
"[processing]node_not_found_hook is enabled.These options cannot both be "
"enabled simultaneously."
msgstr ""

#: ironic_inspector/pxe_filter/base.py:153
#, python-format
msgid ""
"The PXE filter driver %(driver)s: my fsm encountered an exception: %(error)s"
msgstr ""

