module.help.usage = @PROGRAM_NAME@ aaa [options] action [options]
module.help.header = AAA interface test module
module.help.footer = \
Available actions:\n\
\  authn-authenticate_credentials - authenticate using credentials\n\
\  authz-fetch_principal_record   - fetch principal by name.\n\
\  login-user                     - complete login sequence\n\
\  search                         - search authz
module.arg.output.name = output
module.arg.output.type = required_argument
module.arg.output.default = log
module.arg.output.matcher = log|stdout
module.arg.output.help = Output to use, Valid values: @CLI_PRM_PATTERN@, default: @CLI_PRM_DEFAULT@.
module.arg.key.name = key
module.arg.key.type = required_argument
module.arg.key.multivalue = true
module.arg.key.help = Key to output, default all, can be specified multiple times.
module.arg.format.name = format
module.arg.format.type = required_argument
module.arg.format.default = {name}: {value}
module.arg.format.help = Format to use, place holders: {key}, {value}, {name}, default: @CLI_PRM_DEFAULT@.
module.arg.help.name = help
module.arg.help.help = Show help for aaa module.
module.arg.help.valuetype = java.lang.Boolean
module.arg.help.value = true
module.arg.help.default = false

authn-authenticate_credentials.arg.extension-name.name = extension-name
authn-authenticate_credentials.arg.extension-name.mandatory = true
authn-authenticate_credentials.arg.extension-name.type = required_argument
authn-authenticate_credentials.arg.extension-name.help = Extension name to be used for authenticate
authn-authenticate_credentials.arg.user-name.name = user-name
authn-authenticate_credentials.arg.user-name.mandatory = true
authn-authenticate_credentials.arg.user-name.type = required_argument
authn-authenticate_credentials.arg.user-name.help = User name to authenticate with
authn-authenticate_credentials.arg.password.name = password
authn-authenticate_credentials.arg.password.type = required_argument
authn-authenticate_credentials.arg.password.mandatory = true
authn-authenticate_credentials.arg.password.default = interactive:
authn-authenticate_credentials.arg.password.metavar = PASSWORD
authn-authenticate_credentials.arg.password.matcher = (interactive:|pass:.*|env:.*|file:.*)
authn-authenticate_credentials.arg.password.help = \
Password can be specified in one of the following format:\n\
\  interactive: - query password interactively [default].\n\
\  pass:STRING - provide a password as STRING.\n\
\  env:KEY - provide a password using environment KEY.\n\
\  file:FILE - provide a password as 1st line of FILE.
authn-authenticate_credentials.arg.help.name = help
authn-authenticate_credentials.arg.help.help = Show help for authn action.
authn-authenticate_credentials.arg.help.valuetype = java.lang.Boolean
authn-authenticate_credentials.arg.help.value = true
authn-authenticate_credentials.arg.help.default = false
authn-authenticate_credentials.help.header = Authn action of aaa interface test module
authn-authenticate_credentials.help.usage = @PROGRAM_NAME@ aaa authn-authenticate_credentials [options]
authn-authenticate_credentials.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ aaa authn-authenticate_credentials --extension-name=my_ldap-authn --user-name=user

authz-fetch_principal_record.arg.extension-name.name = extension-name
authz-fetch_principal_record.arg.extension-name.mandatory = true
authz-fetch_principal_record.arg.extension-name.type = required_argument
authz-fetch_principal_record.arg.extension-name.help = Extension name to be used for fetch of principal
authz-fetch_principal_record.arg.authz-flag.name = authz-flag
authz-fetch_principal_record.arg.authz-flag.type = required_argument
authz-fetch_principal_record.arg.authz-flag.help = \
Authz flags to be used, can be specified multiple times.\n\
Valid values: @CLI_PRM_PATTERN@
authz-fetch_principal_record.arg.authz-flag.metavar = FLAG
authz-fetch_principal_record.arg.authz-flag.multivalue = true
authz-fetch_principal_record.arg.authz-flag.matcher = resolve-groups-recursive|resolve-groups
authz-fetch_principal_record.arg.principal-name.name = principal-name
authz-fetch_principal_record.arg.principal-name.mandatory = true
authz-fetch_principal_record.arg.principal-name.type = required_argument
authz-fetch_principal_record.arg.principal-name.help = Principal name to fetch
authz-fetch_principal_record.arg.help.name = help
authz-fetch_principal_record.arg.help.help = Show help for authz action.
authz-fetch_principal_record.arg.help.valuetype = java.lang.Boolean
authz-fetch_principal_record.arg.help.value = true
authz-fetch_principal_record.arg.help.default = false
authz-fetch_principal_record.help.header = Authz fetch principal action of aaa interface test module
authz-fetch_principal_record.help.usage = @PROGRAM_NAME@ aaa authz-fetch_principal_record [options]
authz-fetch_principal_record.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ aaa authz-fetch_principal_record --extension-name=my_ldap-authz --principal-name=user

login-user.arg.profile.name = profile
login-user.arg.profile.mandatory = true
login-user.arg.profile.type = required_argument
login-user.arg.profile.help = Name of profile to perform login with
login-user.arg.user-name.name = user-name
login-user.arg.user-name.mandatory = true
login-user.arg.user-name.type = required_argument
login-user.arg.user-name.help = User name to login with
login-user.arg.password.name = password
login-user.arg.password.type = required_argument
login-user.arg.password.mandatory = true
login-user.arg.password.default = interactive:
login-user.arg.password.metavar = PASSWORD
login-user.arg.password.matcher = (interactive:|pass:.*|env:.*|file:.*)
login-user.arg.password.help = Password can be specified in one of the following format:\n\
\  interactive: - query password interactively [default].\n\
\  pass:STRING - provide a password as STRING.\n\
\  env:KEY - provide a password using environment KEY.\n\
\  file:FILE - provide a password as 1st line of FILE.
login-user.arg.help.name = help
login-user.arg.help.help = Show help for login-user action.
login-user.arg.help.valuetype = java.lang.Boolean
login-user.arg.help.value = true
login-user.arg.help.default = false
login-user.help.header = Login action of aaa interface test module
login-user.help.usage = @PROGRAM_NAME@ aaa login-user [options]
login-user.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ aaa login-user --profile=my_ldap --user-name=user

search.arg.extension-name.name = extension-name
search.arg.extension-name.mandatory = true
search.arg.extension-name.type = required_argument
search.arg.extension-name.help = Name of extension to perform search with
search.arg.namespace.name = namespace
search.arg.namespace.type = required_argument
search.arg.namespace.multivalue = true
search.arg.namespace.help = \
Namespace to search within, see extension context for available namespaces, default: all.\n\
Can be specified multiple times.
search.arg.entity.name = entity
search.arg.entity.mandatory = true
search.arg.entity.type = required_argument
search.arg.entity.help =\
Type of entity to search for\n\
Valid values: @CLI_PRM_PATTERN@, default: @CLI_PRM_DEFAULT@.
search.arg.entity.matcher = principal|group
search.arg.entity.metavar = ENTITY
search.arg.entity.default = principal
search.arg.entity-name.name = entity-name
search.arg.entity-name.type = required_argument
search.arg.entity-name.multivalue = true
search.arg.entity-name.default = *
search.arg.entity-name.help = Entity name to search, can be followed by '*' as wildcard, default: @CLI_PRM_DEFAULT@.
search.arg.entity-id.name = entity-id
search.arg.entity-id.type = required_argument
search.arg.entity-id.multivalue = true
search.arg.entity-id.help = Entity id to search.
search.arg.page-size.name = page-size
search.arg.page-size.type = required_argument
search.arg.page-size.valuetype = java.lang.Integer
search.arg.page-size.default = 100
search.arg.page-size.help = Page size, default: @CLI_PRM_DEFAULT@
search.arg.authz-flag.name = authz-flag
search.arg.authz-flag.type = required_argument
search.arg.authz-flag.help =\
Authz flags to be used, can be specified multiple times.\n\
Valid values: @CLI_PRM_PATTERN@
search.arg.authz-flag.metavar = FLAG
search.arg.authz-flag.multivalue = true
search.arg.authz-flag.matcher = resolve-groups-recursive|resolve-groups
search.arg.help.name = help
search.arg.help.help = Show help for search action.
search.arg.help.valuetype = java.lang.Boolean
search.arg.help.value = true
search.arg.help.default = false
search.help.header = Search action of aaa interface test module
search.help.usage = @PROGRAM_NAME@ aaa search [options]
search.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ aaa search --extension-name=my_ldap --entity-name=user
