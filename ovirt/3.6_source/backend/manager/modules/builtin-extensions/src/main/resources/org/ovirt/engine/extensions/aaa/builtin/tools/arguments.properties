module.help.usage = @PROGRAM_NAME@ [options] <action> [<args>]
module.help.header = \
Available actions:\n\
\  add         add a domain using specified provider and user\n\
\  edit        edit an existing domain\n\
\  delete      delete an existing domain\n\
\  validate    validate the current configuration\n\
\  list        list the current configuration\n\
\n\
Add domain:\n\
\  engine-manage-domains add --domain=DOMAIN --provider=PROVIDER --user=USER  [--add-permissions] [--config-file=CFG_FILE] [--ldap-servers=SERVERS] [--resolve-kdc] [--password-file=PASS_FILE] [--change-password-msg]\n\
\n\
Edit domain:\n\
\  engine-manage-domains edit --domain=DOMAIN [--provider=PROVIDER] [--user=USER]  [--add-permissions] [--config-file=CFG_FILE] [--ldap-servers=SERVERS] [--resolve-kdc]  [--password-file=PASS_FILE] [--change-password-msg]\n\
\n\
Delete domain:\n\
\  engine-manage-domains delete --domain=DOMAIN [--force] [--config-file=CFG_FILE] [--password-file=PASS_FILE]\n\
\n\
Validate configuration:\n\
\  engine-manage-domains validate [--report] [--config-file=CFG_FILE]\n\
\n\
List configuration:\n\
\  engine-manage-domains list [--config-file=CFG_FILE]
module.help.footer = \
If you need custom logging setup, please create your own java.util.logging properties file,\n\
set a path to this file into OVIRT_LOGGING_PROPERTIES environment variable and execute engine-manage-domains.
module.arg.help.name = help
module.arg.help.help = Show manage domains help.
module.arg.help.valuetype = java.lang.Boolean
module.arg.help.value = true
module.arg.help.default = false
module.arg.version.name = version
module.arg.version.help = Show manage domains version.
module.arg.version.valuetype = java.lang.Boolean
module.arg.version.value = true
module.arg.version.default = false
module.arg.log-file.name = log-file
module.arg.log-file.help = Sets file to write logging into (if not set nothing is logged).
module.arg.log-file.type = required_argument
module.arg.log-level.name = log-level
module.arg.log-level.help = Sets log level, one of FINE, INFO (default), WARNING, SEVERE (case insensitive).
module.arg.log-level.type = required_argument
module.arg.log-level.default = INFO
module.arg.log-level.matcher = FINEST|FINER|FINE|CONFIG|INFO|WARNING|SEVERE|ALL
add.arg.domain.name = domain
add.arg.domain.mandatory = true
add.arg.domain.help = The domain you wish to perform the action on.
add.arg.domain.type = required_argument
add.arg.add-permissions.name = add-permissions
add.arg.add-permissions.help = Add engine superuser permissions to the user.
add.arg.help.name = help
add.arg.help.help = Show help.
add.arg.help.valuetype = java.lang.Boolean
add.arg.help.value = true
add.arg.help.default = false
add.arg.provider.name = provider
add.arg.provider.mandatory = true
add.arg.provider.help = The LDAP provider type of server used for the domain, can be one of (case insensitive):\n\
\  ad        Microsoft Active Directory\n\
\  ipa       freeIPA\n\
\  rhds      Red Hat Directory Server\n\
\  itds      IBM Tivoli Directory Server\n\
\  oldap     OpenLDAP
add.arg.provider.matcher = (?i)ad|activeDirectory|ipa|rhds|itds|oldap|openldap
add.arg.provider.type = required_argument
add.arg.ldap-servers.name = ldap-servers
add.arg.ldap-servers.help = A comma delimited list of LDAP servers to be set to the domain.
add.arg.ldap-servers.type = required_argument
add.arg.resolve-kdc.name = resolve-kdc
add.arg.resolve-kdc.help = Resolve KDC servers using DNS (don't assume they are the same as LDAP servers).
add.arg.user.name = user
add.arg.user.mandatory = true
add.arg.user.help = The domain user.
add.arg.user.type = required_argument
add.arg.password-file.name = password-file
add.arg.password-file.help = A file containing the password (if it's not set, the password will be read interactively).
add.arg.password-file.type = required_argument
add.arg.change-password-msg.name = change-password-msg
add.arg.change-password-msg.help = Reads interactively a URL or a message to be returned to the user in case the password has expired.
add.arg.config-file.name = config-file
add.arg.config-file.help = Use the given alternate configuration file, default: @CLI_PRM_DEFAULT@
add.arg.config-file.type = required_argument
add.arg.config-file.default = @ENGINE_ETC@/engine-manage-domains/engine-manage-domains.conf
add.help.header = Add a domain using specified provider and user
add.help.usage = @PROGRAM_NAME@ add [options]
add.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ add --domain=DOMAIN --provider=PROVIDER --user=USER  [--add-permissions] [--config-file=CFG_FILE] [--ldap-servers=SERVERS] [--resolve-kdc] [--password-file=PASS_FILE] [--change-password-msg]
edit.arg.domain.name = domain
edit.arg.domain.mandatory = true
edit.arg.domain.help = The domain you wish to perform the action on.
edit.arg.domain.type = required_argument
edit.arg.add-permissions.name = add-permissions
edit.arg.add-permissions.help = Add engine superuser permissions to the user.
edit.arg.help.name = help
edit.arg.help.help = Show help.
edit.arg.help.valuetype = java.lang.Boolean
edit.arg.help.value = true
edit.arg.help.default = false
edit.arg.provider.name = provider
edit.arg.provider.help = The LDAP provider type of server used for the domain, can be one of (case insensitive):\n\
\  ad        Microsoft Active Directory\n\
\  ipa       freeIPA\n\
\  rhds      Red Hat Directory Server\n\
\  itds      IBM Tivoli Directory Server\n\
\  oldap     OpenLDAP
edit.arg.provider.matcher = ad|activeDirectory|ipa|rhds|itds|oldap|openldap
edit.arg.provider.type = required_argument
edit.arg.ldap-servers.name = ldap-servers
edit.arg.ldap-servers.help = A comma delimited list of LDAP servers to be set to the domain.
edit.arg.ldap-servers.type = required_argument
edit.arg.resolve-kdc.name = resolve-kdc
edit.arg.resolve-kdc.help = Resolve KDC servers using DNS (don't assume they are the same as LDAP servers).
edit.arg.user.name = user
edit.arg.user.help = The domain user.
edit.arg.user.type = required_argument
edit.arg.password-file.name = password-file
edit.arg.password-file.help = A file containing the password (if it's not set, the password will be read interactively).
edit.arg.password-file.type = required_argument
edit.arg.change-password-msg.name = change-password-msg
edit.arg.change-password-msg.help = Reads interactively a URL or a message to be returned to the user in case the password has expired.
edit.arg.config-file.name = config-file
edit.arg.config-file.help = Use the given alternate configuration file, default: @CLI_PRM_DEFAULT@
edit.arg.config-file.type = required_argument
edit.arg.config-file.default = @ENGINE_ETC@/engine-manage-domains/engine-manage-domains.conf
edit.help.header = Edit an existing domain
edit.help.usage = @PROGRAM_NAME@ edit [options]
edit.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ edit --domain=DOMAIN [--provider=PROVIDER] [--user=USER]  [--add-permissions] [--config-file=CFG_FILE] [--ldap-servers=SERVERS] [--resolve-kdc]  [--password-file=PASS_FILE] [--change-password-msg]
delete.arg.domain.name = domain
delete.arg.domain.mandatory = true
delete.arg.domain.help = The domain you wish to perform the action on.
delete.arg.domain.type = required_argument
delete.arg.force.name = force
delete.arg.force.help = Skip confirmation of a delete operation.
delete.arg.force.valuetype = java.lang.Boolean
delete.arg.force.default = false
delete.arg.help.name = help
delete.arg.help.help = Show help.
delete.arg.help.valuetype = java.lang.Boolean
delete.arg.help.value = true
delete.arg.help.default = false
delete.arg.password-file.name = password-file
delete.arg.password-file.help = A file containing the password (if it's not set, the password will be read interactively).
delete.arg.password-file.type = required_argument
delete.arg.config-file.name = config-file
delete.arg.config-file.help = Use the given alternate configuration file, default: @CLI_PRM_DEFAULT@
delete.arg.config-file.type = required_argument
delete.arg.config-file.default = @ENGINE_ETC@/engine-manage-domains/engine-manage-domains.conf
delete.help.header = Delete an existing domain
delete.help.usage = @PROGRAM_NAME@ delete [options]
delete.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ delete --domain=DOMAIN [--force] [--config-file=CFG_FILE] [--password-file=PASS_FILE]
validate.arg.report.name = report
validate.arg.report.help = Report all validation error, if occured (default behaviour is to exit when a validation error occurs).
validate.arg.report.valuetype = java.lang.Boolean
validate.arg.report.default = false
validate.arg.help.name = help
validate.arg.help.help = Show help.
validate.arg.help.valuetype = java.lang.Boolean
validate.arg.help.value = true
validate.arg.help.default = false
validate.arg.config-file.name = config-file
validate.arg.config-file.help = Use the given alternate configuration file, default: @CLI_PRM_DEFAULT@
validate.arg.config-file.type = required_argument
validate.arg.config-file.default = @ENGINE_ETC@/engine-manage-domains/engine-manage-domains.conf
validate.help.header = Validate the current configuration
validate.help.usage = @PROGRAM_NAME@ validate [options]
validate.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ validate [--report] [--config-file=CFG_FILE]
list.arg.help.name = help
list.arg.help.help = Show help.
list.arg.help.valuetype = java.lang.Boolean
list.arg.help.value = true
list.arg.help.default = false
list.arg.config-file.name = config-file
list.arg.config-file.help = Use the given alternate configuration file, default: @CLI_PRM_DEFAULT@
list.arg.config-file.type = required_argument
list.arg.config-file.default = @ENGINE_ETC@/engine-manage-domains/engine-manage-domains.conf
list.help.header = List the current configuration
list.help.usage = @PROGRAM_NAME@ list [options]
list.help.footer = \
Example:\n\
\  @PROGRAM_NAME@ list [--config-file=CFG_FILE]
