


!!org.ovirt.engine.api.rsdl.MetaData
actions:
- name: /vms|rel=get
  description: get all the virtual machines in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}|rel=get
  description: get the virtual machine in the system for the given virtual machine id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}|rel=delete
  description: deletes the virtual machine in the system for the given virtual machine id
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.vm.disks.detach_only: 'xs:boolean',
          action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: deletes the virtual machine in the system for the given virtual machine id with optional arguments where the vm can be forced to be removed and option to just detach the disks associated with the vm.
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}|rel=update
  description: update the virtual machine in the system for the given virtual machine id
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          vm.instance_type.id|name: xs:string
          vm.name: xs:string
          vm.cluster.id|name: xs:string
          vm.timezone: xs:string
          vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.usb.type: xs:string
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.single_qxl_pci: xs:boolean
          vm.display.type: xs:string
          vm.display.allow_override: xs:boolean
          vm.display.smartcard_enabled: xs:boolean
          vm.display.file_transfer_enabled: xs:boolean
          vm.display.copy_paste_enabled: xs:boolean
          vm.display.keyboard_layout: xs:string
          vm.os.cmdline: xs:string
          vm.cpu.mode: xs:string
          vm.cpu.architecture: xs:string
          vm.cpu.topology.cores: xs:int
          vm.cpu_shares: xs:int
          vm.memory: xs:long
          vm.memory_policy.guaranteed: xs:long
          vm.memory_policy.ballooning: xs:boolean
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.comment: xs:string
          vm.stateless: xs:boolean
          vm.delete_protected: xs:boolean
          vm.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
          vm.rng_device.rate.bytes: xs:int
          vm.rng_device.rate.period: xs:int
          vm.rng_device.source: xs:string
          vm.console.enabled: xs:boolean
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.tunnel_migration: xs:boolean
          vm.migration_downtime: xs:int
          vm.virtio_scsi.enabled: xs:boolean
          vm.soundcard_enabled: xs:boolean
          vm.use_latest_template_version: xs:boolean
          vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.volume_id: 'xs:string', payload.files.file--COLLECTION: {file.name: 'xs:string', file.content: 'xs:string'}}
          vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
          vm.serial_number.policy: xs:string
          vm.serial_number.value: xs:string
          vm.bios.boot_menu.enabled: xs:boolean
          vm.numa_tune_mode: xs:string
          vm.cpu_profile.id: xs:string
        description: update the virtual machine in the system for the given virtual machine id with the values specified in the request
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/applications|rel=get
  description: get all the applications installed on the vm identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /vms/{vm:id}/applications/{application:id}|rel=get
  description: get the application installed on the specified vm
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /vms|rel=add
  description: add a virtual machine to the system
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {vm.name: 'xs:string', vm.template.id|name: 'xs:string', vm.cluster.id|name: 'xs:string'}
        optionalArguments:
          vm.instance_type.id|name: xs:string
          vm.quota.id: xs:string
          vm.timezone: xs:string
          vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.usb.type: xs:string
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.single_qxl_pci: xs:boolean
          vm.display.type: xs:string
          vm.display.allow_override: xs:boolean
          vm.display.smartcard_enabled: xs:boolean
          vm.display.file_transfer_enabled: xs:boolean
          vm.display.copy_paste_enabled: xs:boolean
          vm.display.keyboard_layout: xs:string
          vm.os.cmdline: xs:string
          vm.cpu.topology.cores: xs:int
          vm.cpu.architecture: xs:string
          vm.memory: xs:long
          vm.memory_policy.guaranteed: xs:long
          vm.memory_policy.ballooning: xs:boolean
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.comment: xs:string
          vm.stateless: xs:boolean
          vm.permissions.clone: xs:boolean
          vm.delete_protected: xs:boolean
          vm.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
          vm.rng_device.rate.bytes: xs:int
          vm.rng_device.rate.period: xs:int
          vm.rng_device.source: xs:string
          vm.console.enabled: xs:boolean
          vm.cpu.mode: xs:string
          vm.cpu.topology.sockets: xs:int
          vm.cpu_shares: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.disks.clone: xs:boolean
          vm.disks.disk--COLLECTION: {disk.id: 'xs:string', storage_domains.storage_domain--COLLECTION: {storage_domain.id: 'xs:string'}}
          vm.tunnel_migration: xs:boolean
          vm.migration_downtime: xs:int
          vm.virtio_scsi.enabled: xs:boolean
          vm.soundcard_enabled: xs:boolean
          vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.volume_id: 'xs:string', payload.files.file--COLLECTION: {file.name: 'xs:string', file.content: 'xs:string'}}
          vm.initialization.configuration.type: 'xs:string'
          vm.initialization.configuration.data: 'xs:string'
          vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
          vm.use_latest_template_version: xs:boolean
          vm.serial_number.policy: xs:string
          vm.serial_number.value: xs:string
          vm.bios.boot_menu.enabled: xs:boolean
          vm.numa_tune_mode: xs:string
          vm.cpu_profile.id: xs:string
        description: add a virtual machine to the system from scratch
      # the following signature is for clone VM from a Snapshot - requires the Snapshot ID
      - mandatoryArguments: {vm.name: 'xs:string', vm.template.id|name: 'xs:string', vm.cluster.id|name: 'xs:string',
          vm.snapshots.snapshot--COLLECTION: {snapshot.id: 'xs:string'}}
        optionalArguments:
          vm.quota.id: xs:string
          vm.timezone: xs:string
          vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          vm.os.type: xs:string
          vm.usb.enabled: xs:boolean
          vm.usb.type: xs:string
          vm.type: xs:string
          vm.os.initRd: xs:string
          vm.display.monitors: xs:int
          vm.display.single_qxl_pci: xs:boolean
          vm.display.type: xs:string
          vm.display.allow_override: xs:boolean
          vm.display.smartcard_enabled: xs:boolean
          vm.display.file_transfer_enabled: xs:boolean
          vm.display.copy_paste_enabled: xs:boolean
          vm.display.keyboard_layout: xs:string
          vm.os.cmdline: xs:string
          vm.cpu.topology.cores: xs:int
          vm.cpu_shares: xs:int
          vm.cpu.architecture: xs:string
          vm.memory: xs:long
          vm.memory_policy.guaranteed: xs:long
          vm.memory_policy.ballooning: xs:boolean
          vm.high_availability.priority: xs:int
          vm.high_availability.enabled: xs:boolean
          vm.domain.name: xs:string
          vm.description: xs:string
          vm.comment: xs:string
          vm.stateless: xs:boolean
          vm.delete_protected: xs:boolean
          vm.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
          vm.rng_device.rate.bytes: xs:int
          vm.rng_device.rate.period: xs:int
          vm.rng_device.source: xs:string
          vm.console.enabled: xs:boolean
          vm.cpu.topology.sockets: xs:int
          vm.placement_policy.affinity: xs:string
          vm.placement_policy.host.id|name: xs:string
          vm.origin: xs:string
          vm.os.kernel: xs:string
          vm.tunnel_migration: xs:boolean
          vm.migration_downtime: xs:int
          vm.virtio_scsi.enabled: xs:boolean
          vm.soundcard_enabled: xs:boolean
          vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.volume_id: 'xs:string', payload.files.file--COLLECTION: {file.name: 'xs:string', file.content: 'xs:string'}}
          vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
          vm.serial_number.policy: xs:string
          vm.serial_number.value: xs:string
          vm.bios.boot_menu.enabled: xs:boolean
          vm.numa_tune_mode: xs:string
          vm.cpu_profile.id: xs:string
        description: add a virtual machine to the system by cloning from a snapshot
      # the following signature is for adding VM from a configuration - requires the configuration type and the configuration data
      - mandatoryArguments: {vm.initialization.configuration.type: 'xs:string', vm.initialization.configuration.data: 'xs:string'}
        optionalArguments:
                vm.name: 'xs:string'
                vm.quota.id: xs:string
                vm.timezone: xs:string
                vm.os.boot--COLLECTION: {boot.dev: 'xs:string'}
                vm.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
                vm.os.type: xs:string
                vm.usb.enabled: xs:boolean
                vm.usb.type: xs:string
                vm.type: xs:string
                vm.os.initRd: xs:string
                vm.display.monitors: xs:int
                vm.display.type: xs:string
                vm.display.allow_override: xs:boolean
                vm.display.smartcard_enabled: xs:boolean
                vm.display.file_transfer_enabled: xs:boolean
                vm.display.copy_paste_enabled: xs:boolean
                vm.display.keyboard_layout: xs:string
                vm.os.cmdline: xs:string
                vm.cpu.topology.cores: xs:int
                vm.memory: xs:long
                vm.memory_policy.guaranteed: xs:long
                vm.memory_policy.ballooning: xs:boolean
                vm.high_availability.priority: xs:int
                vm.high_availability.enabled: xs:boolean
                vm.domain.name: xs:string
                vm.description: xs:string
                vm.comment: xs:string
                vm.stateless: xs:boolean
                vm.permissions.clone: xs:boolean
                vm.delete_protected: xs:boolean
                vm.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
                vm.rng_device.rate.bytes: xs:int
                vm.rng_device.rate.period: xs:int
                vm.rng_device.source: xs:string
                vm.cpu.mode: xs:string
                vm.cpu.topology.sockets: xs:int
                vm.placement_policy.affinity: xs:string
                vm.placement_policy.host.id|name: xs:string
                vm.origin: xs:string
                vm.os.kernel: xs:string
                vm.disks.clone: xs:boolean
                vm.disks.disk--COLLECTION: {disk.id: 'xs:string', storage_domains.storage_domain--COLLECTION: {storage_domain.id: 'xs:string'}}
                vm.tunnel_migration: xs:boolean
                vm.migration_downtime: xs:int
                vm.virtio_scsi.enabled: xs:boolean
                vm.payloads.payload--COLLECTION: {payload.type: 'xs:string', payload.volume_id: 'xs:string', payload.files.file--COLLECTION: {file.name: 'xs:string', file.content: 'xs:string'}}
                vm.initialization.configuration.type: 'xs:string'
                vm.initialization.configuration.data: 'xs:string'
                vm.initialization.regenerate_ids: 'xs:boolean'
                vm.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
                vm.serial_number.policy: xs:string
                vm.serial_number.value: xs:string
                vm.bios.boot_menu.enabled: xs:boolean
                vm.numa_tune_mode: xs:string
                vm.cpu_profile.id: xs:string
        description: add a virtual machine to the system from a configuration - requires the configuration type and the configuration data
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Expect: {value: 201-created, required: false}
- name: /vms/{vm:id}/shutdown|rel=shutdown
  description: shutdown a virtual machine in the system identified by the given id
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: shutdown a virtual machine in the system identified by the given id
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/stop|rel=stop
  description: stop a virtual machine in the system identified by the given id
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: stop a virtual machine in the system identified by the given id
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/reboot|rel=reboot
  description: reboot a virtual machine in the system identified by the given id
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/start|rel=start
  description: start a virtual machine in the system identified by the given id
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.vm.os.initRd: 'xs:string', action.vm.domain.name: 'xs:string',
          action.vm.placement_policy.host.id|name: 'xs:string', action.vm.placement_policy.affinity: 'xs:string',
          action.async: 'xs:boolean', action.vm.os.kernel: 'xs:string', action.grace_period.expiry: 'xs:long',
          action.vm.display.type: 'xs:string', action.vm.stateless: 'xs:boolean', action.vm.os.cmdline: 'xs:string',
          action.vm.domain.user.username: 'xs:string', action.pause: 'xs:boolean',
          action.vm.os.boot--COLLECTION: {boot.dev: 'xs:string'},action.vm.domain.user.password: 'xs:string',
          action.vm.initialization.cloud_init.host.address: 'xs:string',
          action.vm.initialization.cloud_init.network_configuration.nics.nic--COLLECTION: {nic.name: 'xs:string',
          nic.boot_protocol: 'xs:string',
          nic.network.address.ip: 'xs:string',
          nic.network.address.netmask: 'xs:string',
          nic.network.address.gateway: 'xs:string',
          nic.onboot: 'xs:boolean'},
          action.vm.initialization.cloud_init.network_configuration.dns.servers.host--COLLECTION: {host.address: 'xs:string'},
          action.vm.initialization.cloud_init.network_configuration.dns.search_domains.host--COLLECTION: {host.address: 'xs:string'},
          action.vm.initialization.cloud_init.authorized_keys.authorized_key--COLLECTION: {authorized_key.key: 'xs:string',
          authorized_key.user.name: 'xs:string'},
          action.vm.initialization.cloud_init.regenerate_ssh_keys: 'xs:boolean',
          action.vm.initialization.cloud_init.timezone: 'xs:string',
          action.vm.initialization.cloud_init.users.user--COLLECTION: {user.password: 'xs:string', user.name: 'xs:string'},
          action.vm.initialization.cloud_init.payload_files.payload_file--COLLECTION: {payload_file.name: 'xs:string',
          payload_file.content: 'xs:string',payload_file.type: 'xs:string'}}
        description: start a virtual machine in the system identified by the given id with the options specified in the request body
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /vms/{vm:id}/suspend|rel=suspend
  description: suspend a virtual machine in the system identified by the given id
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: suspend a virtual machine in the system identified by the given id
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/export|rel=export
  description: export a virtual machine in the system identified by the given id to the export domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.discard_snapshots: 'xs:boolean', action.storage_domain.id|name: 'xs:string',
          action.grace_period.expiry: 'xs:long'}
        description: export a virtual machine in the system identified by the given id to the export domain with the options specified in the request body
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/preview_snapshot|rel=preview_snapshot
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.snapshot.id: xs:string
        optionalArguments:
          action.restore_memory: xs:boolean
          action.disks.disk--COLLECTION:
            disk.id: xs:string
            disk.image_id: xs:string
            disk.snapshot.id: xs:string
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/commit_snapshot|rel=commit_snapshot
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/undo_snapshot|rel=undo_snapshot
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/clone|rel=clone
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.vm.name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/detach|rel=detach
  description: detach a virtual machine in the system identified by the given id from the storage domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: detach a virtual machine in the system identified by the given id from the storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/migrate|rel=migrate
  description: migrate a virtual machine in the system identified by the given id to another host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.host.id|name: 'xs:string', action.async: 'xs:boolean',
          action.force: 'xs:boolean', action.grace_period.expiry: 'xs:long', action.cluster.id: 'xs:string'}
        description: migrate a virtual machine in the system identified by the given id to another host with options specified in the request body
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/move|rel=move #deprecated, replaced by '/vms/{vm:id}/disks/{disk:id}/move|rel=move'
  description: This action is deprecated. Move a virtual machine's disk
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: This action is deprecated. Move a virtual machine's disk to the target storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/ticket|rel=ticket
  description: Create a ticket for connecting to the VM using the display protocol.
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.ticket.value: 'xs:string', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: Create a ticket for connecting to the VM using the display protocol.
    urlparams: {}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/logon|rel=logon
  description: Perform automatic logon on the VM using the guest agent.
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {}
        description: Perform automatic logon on the VM using the guest agent.
    urlparams: {}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/cdroms|rel=get
  description: get all the cdroms for a virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
      current: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /vms/{vm:id}/cdroms/{cdrom:id}|rel=get
  description: get the cdrom for a virtual machine identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      current: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /vms/{vm:id}/cdroms/{cdrom:id}|rel=delete
  description: delete the cdrom for a virtual machine identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/cdroms/{cdrom:id}|rel=update
  description: update the cdrom for a virtual machine identified by the given id
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cdrom.file.id: 'xs:string'}
        description: update the cdrom for a virtual machine identified by the given id with a new file
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      current: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/cdroms|rel=add
  description: add a cdrom to a virtual machine identified by the given id
  request:
    body:
      parameterType: CdRom
      signatures:
      - mandatoryArguments: {cdrom.file.id: 'xs:string'}
        description: add a cdrom to a virtual machine identified by the given id and attach a file to the cdrom
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/watchdogs|rel=get
  description: get all the watchdogs for the virtual machine identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/watchdogs/{watchdog:id}|rel=get
  description: get the watchdog identified by the id for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/watchdogs/{watchdog:id}|rel=delete
  description: delete the watchdog for the virtual machine identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/watchdogs/{watchdog:id}|rel=update
  description: update the watchdog for the virtual machine identified by the given id
  request:
    body:
      parameterType: WatchDog
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {watchdog.action: 'xs:string', watchdog.model: 'xs:string'}
        description: update the watchdog for the virtual machine identified by the given id with a new action and model as specified in the request data
    urlparams:
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/watchdogs|rel=add
  description: add a watchdog to the virtual machine identified by the given id
  request:
    body:
      parameterType: WatchDog
      signatures:
      - mandatoryArguments: {watchdog.action: 'xs:string', watchdog.model: 'xs:string'}
        description: add a watchdog to the virtual machine identified by the given id
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks|rel=get
  description: get all disks for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/disks/{disk:id}|rel=get
  description: get the details of a disk for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/disks/{disk:id}|rel=delete
  description: delete or detach a disk for a given virtual machine
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.detach: 'xs:boolean'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: delete or detach a disk for a given virtual machine based on detach flag provided
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks/{disk:id}|rel=update
  description: update the parameters of the disk attached to the virtual machine
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          size: xs:int #deprecated, replaced by 'provisioned_size'
          provisioned_size: xs:int
          disk.interface: xs:string
          disk.format: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.disk_profile.id: xs:string
          disk.sgio: xs:string
          disk.read_only: xs:boolean
          description: update the size, boot flag and other parameters of the disk attached to the virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks|rel=add
  description: add a new or existing disk to the virtual machine
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.disk_profile.id: xs:string
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
        description: add a new disk to the virtual machine allocating space from the storage domain
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.sgio: xs:string
          disk.lun_storage.host: xs:string
        description: add a new direct lun disk to the virtual machine, this operation does not require size but needs lun connection details
      - mandatoryArguments: {disk.id: 'xs:string'}
        optionalArguments:
          disk.active: xs:boolean
          disk.read_only: xs:boolean
        description: attach a disk to the virtual machine
      - mandatoryArguments: {disk.id: 'xs:string', disk.snapshot.id: 'xs:string'}
        optionalArguments: {disk.active: 'xs:boolean'}
        description: attach a disk snapshot to the virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks/{disk:id}/activate|rel=activate
  description: activate a disk attached to a virtual machine
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: activate a disk attached to a virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks/{disk:id}/deactivate|rel=deactivate
  description: deactivate a disk attached to a virtual machine
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: deactivate a disk attached to a virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/disks/{disk:id}/move|rel=move
  description: move a disk attached to a virtual machine to a different storage domain. If the virtual machine is running this will trigger a live storage migration
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: move a disk attached to a virtual machine to a different storage domain. If the virtual machine is running this will trigger a live storage migration
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /vms/{vm:id}/disks/{disk:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /vms/{vm:id}/nics|rel=get
  description: get all the network interfaces for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}/nics/{nic:id}|rel=get
  description: get the details of a network interface for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}/nics/{nic:id}|rel=delete
  description: remove the network interface from the given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/nics/{nic:id}|rel=update
  description: update the network interface for the given virtual machine
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {nic.vnic_profile.id: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.plugged: 'xs:boolean'}
        description: update the network interface for the given virtual machine
      - mandatoryArguments: {}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}, nic.plugged: 'xs:boolean'}
        deprecated: true
        description: update the network interface for the given virtual machine with port mirroring options
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/nics/{nic:id}/activate|rel=activate #deprecated, replaced by 'add/edit'
  description: Deprecated, replaced by add/edit
  request:
    body:
      parameterType: Action
      signatures: []
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/nics/{nic:id}/deactivate|rel=deactivate #deprecated, replaced by 'add/edit'
  description: Deprecated, replaced by add/edit
  request:
    body:
      parameterType: Action
      signatures: []
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
    urlparams: {}
- name: /vms/{vm:id}/nics|rel=add
  description: add a new network interface to the given virtual machine
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {nic.name: 'xs:string'}
        optionalArguments: {nic.vnic_profile.id: 'xs:string', nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.plugged: 'xs:boolean'}
        description: add a new network interface to the given virtual machine with vnic profile id
      - mandatoryArguments: {nic.name: 'xs:string'}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}, nic.plugged: 'xs:boolean'}
        deprecated: true
        description: add a new network interface to the given virtual machine with port mirroring options
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/permissions|rel=get
  description: get all the permissions for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/permissions/{permission:id}|rel=get
  description: get details of a permission for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/permissions/{permission:id}|rel=delete
  description: delete a permission for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/permissions|rel=add
  description: add a new permission for a given virtual machine
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission for a given virtual machine
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission for a given virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/statistics|rel=get
  description: get the memory and cpu statistics for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/statistics/{statistic:id}|rel=get
  description: get the detail statistics for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots|rel=get
  description: get all snapshots for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}/snapshots/{snapshot:id}|rel=get
  description: get the details of a snapshot for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      All-Content: {value: true|false, required: false}
- name: /vms/{vm:id}/snapshots/{snapshot:id}|rel=delete
  description: delete the snapshot for a given virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/snapshots|rel=add
  description: create a new snapshot for a given virtual machine
  request:
    body:
      parameterType: Snapshot
      signatures:
      - mandatoryArguments: {snapshot.description: 'xs:string'}
        optionalArguments:
          snapshot.persist_memorystate: xs:boolean
          snapshot.disks.disk--COLLECTION: {disk.id: 'xs:string'}
        description: create a new snapshot for a given virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/restore|rel=restore
  description: restore the virtual machine from a given snapshot
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.restore_memory: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long', action.disks.disk--COLLECTION: {disk.id: 'xs:string', disk.image_id: 'xs:string'}}
        description: restore the virtual machine from a given snapshot
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/cdroms|rel=get
  description: get the list of cdroms attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/cdroms/{cdrom:id}|rel=get
  description: get the details of a cdrom attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/disks|rel=get
  description: get the list of disks attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/disks/{disk:id}|rel=get
  description: get the details of a disk attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/disks/{disk:id}|rel=delete
  description: delete a disk from a VM snapshot
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/nics|rel=get
  description: get the list of network interfaces attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/snapshots/{snapshot:id}/nics/{nic:id}|rel=get
  description: get the details of a network interface attached to the virtual machine at the time the snapshot was created
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/tags|rel=get
  description: get the list of tags added to the virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/tags/{tag:id}|rel=get
  description: get the details of the tag added to the virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/tags/{tag:id}|rel=delete
  description: delete a tag added to the virtual machine
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/tags|rel=add
  description: add a new tag to the virtual machine
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        description: add a new tag to the virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/sessions|rel=get
  description: get the open user-sessions of this VM
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/sessions/{session:id}|rel=get
  description: get the deails of a VM user session.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/maintenance|rel=maintenance
  description: enable or disable maintenance mode for this virtual machine
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.maintenance_enabled: 'xs:boolean'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: enable or disable maintenance mode for this virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /disks|rel=get
  description: get a list of disks in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /disks/{disk:id}|rel=get
  description: get the details of a disk in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /disks/{disk:id}|rel=delete
  description: delete the specified disk in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /disks/{disk:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.storage_domain.id|name: xs:string
        optionalArguments:
          action.async: xs:boolean
          action.grace_period.expiry: xs:long
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /disks/{disk:id}/move|rel=move
  description: move a disk to a different storage domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.storage_domain.id|name: xs:string
        optionalArguments:
          action.async: xs:boolean
          action.grace_period.expiry: xs:long
        description: move a disk to a different storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /disks/{disk:id}/copy|rel=copy
  description: copy a disk to a different storage domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.storage_domain.id|name: xs:string
        optionalArguments:
          action.async: xs:boolean
          action.grace_period.expiry: xs:long
        description: copy a disk to a different storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /disks|rel=add
  description: add a new disk to the system
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.disk_profile.id: xs:string
          disk.storage_domains.storage_domain--COLLECTION: {storage_domain.id|name: 'xs:string'}
        description: add a new disk to the system with specified size, space will be allocated from the storage domain for the disk
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.sgio: xs:string
          disk.lun_storage.host: xs:string
        description: add a new lun disk to the system, this operation does not require size but requires lun connection details
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /disks/{disk:id}/statistics|rel=get
  description: get the disk statistics for the specified disk in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /disks/{disk:id}/statistics/{statistic:id}|rel=get
  description: get the disk statistics for the specified disk in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /disks/{disk:id}/permissions|rel=get
  description: get the list of permissions for the disk in the system. Disk inherits permissions from the VM it is attached to and from the storage domain it resides on (if there is one)
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /disks/{disk:id}/permissions/{permission:id}|rel=get
  description: get the details of the permission for the specified disk in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /capabilities|rel=get
  description: get the capabilities of the system listing the features that are supported for all versions of cluster/data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /capabilities/{version:id}|rel=get
  description: get the capabilities of the system for the specified version, lists the features that are supported for the provided version of the cluster/data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/networks|rel=get
  description: get networks for the datacenter in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/networks/{network:id}|rel=get
  description: get the specified network in the datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/networks/{network:id}|rel=delete
  description: delete the specified network in the datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/networks/{network:id}|rel=update
  description: update the specified network in the datacenter
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.display: 'xs:boolean', network.usages.usage--COLLECTION: {usage: 'xs:string'}}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/networks|rel=add
  description: add a new network to the datacenter
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.id|name: 'xs:string'}
        optionalArguments: {
            network.description: 'xs:string',
            network.comment: 'xs:string',
            network.vlan.id: 'xs:string',
            network.ip.address: 'xs:string',
            network.ip.gateway: 'xs:string',
            network.ip.netmask: 'xs:string',
            network.stp: 'xs:boolean',
            network.mtu: 'xs:int',
            network.profile_required: 'xs:boolean',
            network.usages.usage--COLLECTION: {usage: 'xs:string'}
        }
        description: add a new network to the datacenter
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/networks/{network:id}/labels|rel=get
  description: get the labels of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/networks/{network:id}/labels|rel=add
  description: add a new label to the network
  request:
    body:
      parameterType: Label
      signatures:
      - mandatoryArguments: {label.id: 'xs:string'}
        description: add a new label to the network
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/networks/{network:id}/labels/{label:id}|rel=get
  description: get a specific label of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/networks/{network:id}/labels/{label:id}|rel=delete
  description: delete the specified label of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/qoss|rel=get
  description: get QoSs for the datacenter in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/qoss/{qos:id}|rel=get
  description: get the specified QoS in the datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/qoss/{qos:id}|rel=delete
  description: delete the specified QoS in the datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/qoss/{qos:id}|rel=update
  description: update the specified QoS in the datacenter
  request:
    body:
      parameterType: QoS
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {qos.name: 'xs:string',
                           qos.description: 'xs:string',
                           qos.max_throughput: 'xs:int',
                           qos.max_read_throughput: 'xs:int',
                           qos.max_write_throughput: 'xs:int',
                           qos.max_iops: 'xs:int',
                           qos.max_read_iops: 'xs:int',
                           qos.max_write_iops: 'xs:int',
                           qos.cpu_limit: 'xs:int',
                           qos.inbound_average: 'xs:int',
                           qos.inbound_peak: 'xs:int',
                           qos.inbound_burst: 'xs:int',
                           qos.outbound_average: 'xs:int',
                           qos.outbound_peak: 'xs:int',
                           qos.outbound_burst: 'xs:int'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/qoss|rel=add
  description: add a new QoS to the datacenter
  request:
    body:
      parameterType: QoS
      signatures:
      - mandatoryArguments: {qos.name: 'xs:string', qos.type: 'xs:string'}
        optionalArguments: {qos.description: 'xs:string',
                           qos.max_throughput: 'xs:int',
                           qos.max_read_throughput: 'xs:int',
                           qos.max_write_throughput: 'xs:int',
                           qos.max_iops: 'xs:int',
                           qos.max_read_iops: 'xs:int',
                           qos.max_write_iops: 'xs:int',
                           qos.cpu_limit: 'xs:int',
                           qos.inbound_average: 'xs:int',
                           qos.inbound_peak: 'xs:int',
                           qos.inbound_burst: 'xs:int',
                           qos.outbound_average: 'xs:int',
                           qos.outbound_peak: 'xs:int',
                           qos.outbound_burst: 'xs:int'}
        description: add a new QoS to the datacenter
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains|rel=get
  description: get storage domains in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /storagedomains/{storagedomain:id}|rel=get
  description: get the details of the specified storage domain in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /storagedomains/{storagedomain:id}|rel=delete
  description: delete the specified storage domain in the system
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string'}
        optionalArguments: {storagedomain.format: 'xs:boolean'}
        description: delete the specified storage domain in the system with options to format the storage domain
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}|rel=update
  description: update the storage domain
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {storagedomain.name: 'xs:string'}
        description: update the storage domain
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string', storagedomain.storage.logical_unit--COLLECTION: {logical_unit.address: 'xs:string',
            logical_unit.port: 'xs:int', logical_unit.target: 'xs:string', logical_unit.username: 'xs:string', logical_unit.password: 'xs:string',
            logical_unit.serial: 'xs:string', logical_unit.vendor_id: 'xs:string', logical_unit.product_id: 'xs:string',
            logical_unit.lun_mapping: 'xs:int', logical_unit.portal: 'xs:string', logical_unit.paths: 'xs:int', logical_unit.id: 'xs:string'}}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.comment: 'xs:string', storagedomain.storage.override_luns: 'xs:boolean'}
        description: update the storage domain
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains|rel=add
  description: add a new storage domain to the system
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.address: 'xs:string',
          storagedomain.storage.logical_unit--COLLECTION: {logical_unit.address: 'xs:string',
            logical_unit.port: 'xs:int', logical_unit.target: 'xs:string', logical_unit.username: 'xs:string', logical_unit.password: 'xs:string',
            logical_unit.serial: 'xs:string', logical_unit.vendor_id: 'xs:string', logical_unit.product_id: 'xs:string',
            logical_unit.lun_mapping: 'xs:int', logical_unit.portal: 'xs:string', logical_unit.paths: 'xs:int', logical_unit.id: 'xs:string'}}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.comment: 'xs:string', storagedomain.storage.override_luns: 'xs:boolean', storagedomain.storage_format: 'xs:string'}
        description: add a new storage domain to the system using a direct lun
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string', storagedomain.import: 'xs:boolean'}
        optionalArguments: {storagedomain.storage.address: 'xs:string', storagedomain.format: 'xs:boolean', storagedomain.comment: 'xs:string'}
        description: Import an existing block storage domain to the system using the targets already connected to the host
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean',storagedomain.storage.address: 'xs:string',
          storagedomain.storage.path: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.comment: 'xs:string', storagedomain.storage_format: 'xs:string'}
        description: add a new storage domain to the system using the storage on the given host and path
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.path: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.comment: 'xs:string', storagedomain.storage_format: 'xs:string'}
        description: add a new storage domain to the system using the storage on the localhost at the given path
      - mandatoryArguments: {storagedomain.host.id|name: 'xs:string',
          storagedomain.type: 'xs:string', storagedomain.storage.type: 'xs:string',
          storagedomain.format: 'xs:boolean', storagedomain.storage.path: 'xs:string', storagedomain.storage.vfs_type: 'xs:string'}
        optionalArguments: {storagedomain.name: 'xs:string', storagedomain.comment: 'xs:string', storagedomain.storage.address: 'xs:string', storagedomain.storage.mount_options: 'xs:string', storagedomain.storage_format: 'xs:string'}
        description: add a new storage domain to the system using the gluster or posixfs storage
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/files|rel=get
  description: get the files stored in the iso storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/files/{file:id}|rel=get
  description: get the details of the specified file stored in the iso storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/images|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/images/{images:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/images/{images:id}/import|rel=import
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long', action.import_as_template: 'xs:boolean', action.cluster.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/permissions|rel=get
  description: get the list of permissions for the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission for the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/permissions|rel=add
  description: add a new user or group level permission on the storage domain
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the storage domain
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}|rel=delete
  description: delete the specified template from the export or data domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/templates|rel=get
  description: get the list of templates in the export or data domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}|rel=get
  description: get the details of the specified template in the export or data domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}/register|rel=register
  description: Register the Template means importing the Template from the data domain, by inserting the configuration of the Template and disks into the DB without the copy process
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.clone: 'xs:boolen', action.exclusive: 'xs:boolen', action.template.name: 'xs:string'}
        description: Register the Template means importing the Template from the data domain, by inserting the configuration of the Template and disks into the DB without the copy process
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}/import|rel=import
  description: import the template from the export or data domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.storage_domain.id|name: 'xs:string', action.clone: 'xs:boolen', action.exclusive: 'xs:boolen', action.template.name: 'xs:string', action.vm.disks.disk--COLLECTION: {disk.id: 'xs:string'}, action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: import the template from the export or data domain identified by storagedomain-identifier into the destination storage domain identified by storage_domain.id|name
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}/disks|rel=get
  description: get the list of disks attached to the template in the export or data domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/templates/{template:id}/disks/{disk:id}|rel=get
  description: get the details of the specified disk attached to the template in the export or data domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/vms|rel=get
  description: get the list of virtual machines in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}|rel=delete
  description: delete the specified virtual machine from the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}|rel=get
  description: get the details of the specified virtual machine in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}/register|rel=register
  description: Register the VM means importing the VM from the data domain, by inserting the configuration of the VM and disks into the DB without the copy process
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.clone: 'xs:boolen', action.vm.name: 'xs:string'}
        description: Register the VM means importing the VM from the data domain, by inserting the configuration of the VM and disks into the DB without the copy process
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}/import|rel=import
  description: import the specified virtual machine in the storage domain into the system
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.cluster.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean',action.storage_domain.id|name: 'xs:string', action.vm.snapshots.collapse_snapshots: 'xs:boolean', action.clone: 'xs:boolen', action.exclusive: 'xs:boolen', action.vm.name: 'xs:string', action.vm.disks.disk--COLLECTION: {disk.id: 'xs:string'}, action.grace_period.expiry: 'xs:long'}
        description: import the specified virtual machine from the source storagedomain identified by storagedomain-identifier into the destination storage domain identified by storage_domain.id|name
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/disksnapshots|rel=get
  description: get the list of disk snapshots in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/disksnapshots/{disksnapshot:id}|rel=delete
  description: delete the specified disk snapshot from the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/disksnapshots/{disksnapshot:id}|rel=get
  description: get the details of the specified disk snapshot in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters|rel=get
  description: get the list of clusters in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}/disks|rel=get
  description: get the list of disks attached to the virtual machine in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/vms/{vm:id}/disks/{disk:id}|rel=get
  description: get the details of the specified disk attached to the virtual machine in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}|rel=get
  description: get the details of the specified cluster in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /storagedomains/{storagedomain:id}/storageconnections|rel=get
  description: get the list of storage connections in the storage domain. allow sediting just the connection details without editing the storage domain itself. multiple storage domains could use a single storage connection in the case of iSCSI.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/storageconnections/{storageconnection:id}|rel=get
  description: get the details of the specified storage connection in the storage domain. allow sediting just the connection details without editing the storage domain itself. multiple storage domains could use a single storage connection in the case of iSCSI.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/storageconnections/{storageconnection:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/storageconnections|rel=add
  request:
    body:
      parameterType: StorageConnection
      signatures:
      - mandatoryArguments: {storageconnection.id: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}|rel=delete
  description: get the details of the specified cluster in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}|rel=update
  description: update the specified cluster in the system
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cluster.name: 'xs:string', cluster.description: 'xs:string', cluster.comment: 'xs:string', cluster.data_center.id: 'xs:string', cluster.cpu.id: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int',
        cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean', cluster.scheduling_policy.policy--DEPRECATED: 'xs:string',
        cluster.scheduling_policy.thresholds.low--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.high--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.duration--DEPRECATED: 'xs:int',
        cluster.scheduling_policy.id: 'xs:string', cluster.scheduling_policy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'},
        cluster.error_handling.on_error: 'xs:string', cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean', cluster.tunnel_migration: 'xs:boolean', cluster.ballooning_enabled: 'xs:boolean',
        cluster.cpu.architecture: 'xs:string', cluster.display.proxy: 'xs:string', cluster.ksm.enabled: 'xs:boolean'}
        description: update the specified cluster in the system. The capabilities like virt service, cluster service, tarnsparent huge pages etc can be changed.
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters|rel=add
  description: add a new cluster to the system
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {cluster.data_center.id|name: 'xs:string', cluster.name: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int', cluster.cpu.id: 'xs:string'}
        optionalArguments: {cluster.description: 'xs:string', cluster.comment: 'xs:string', cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean',
        cluster.scheduling_policy.policy--DEPRECATED: 'xs:string', cluster.scheduling_policy.thresholds.low--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.high--DEPRECATED: 'xs:int',
        cluster.scheduling_policy.thresholds.duration--DEPRECATED: 'xs:int', cluster.scheduling_policy.id: 'xs:string', cluster.scheduling_policy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'}, cluster.error_handling.on_error: 'xs:string', cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean',
        cluster.tunnel_migration: 'xs:boolean', cluster.trusted_service: 'xs:boolean',  cluster.ha_reservation: 'xs:boolean', cluster.ballooning_enabled: 'xs:boolean', cluster.cpu.architecture: 'xs:string', cluster.display.proxy: 'xs:string',
        cluster.ksm.enabled: 'xs:boolean'}
        description: add a new cluster to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/networks|rel=get
  description: get the list of networks in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/networks/{network:id}|rel=get
  description: get the details of the specified network in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/networks/{network:id}|rel=delete
  description: delete the specified network in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/networks/{network:id}|rel=update
  description: update the specified network in the cluster
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.display: 'xs:boolean', network.usages.usage--COLLECTION: {usage: 'xs:string'}}
        description: update the specified network in the cluster with network usage. Display is provided here for backwards compatibility.
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/networks|rel=add
  description: add a new network to the cluster
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.id|name: 'xs:string'}
        optionalArguments: {network.usages.usage--COLLECTION: {usage: 'xs:string'}}
        description: add a new network to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/permissions|rel=get
  description: get the list of permissions on the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/permissions/{permission:id}|rel=get
  description: get the details of the permission on the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/permissions/{permission:id}|rel=delete
  description: delete the permission on the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/permissions|rel=add
  description: add a new permission on the cluster
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the cluster
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}|rel=update
  description: update the specified data center in the system
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          datacenter.name: xs:string
          datacenter.description: xs:string
          datacenter.comment: xs:string
          datacenter.storage_type--DEPRECATED: xs:string
          datacenter.local: xs:boolean
          datacenter.version.major: xs:int
          datacenter.version.minor: xs:int
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
        description: update the specified data center in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters|rel=get
  description: get a list of data centers in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}|rel=get
  description: get the details of the specified data center in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}|rel=delete
  description: delete the specified data center in the system
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: delete the specified data center in the system
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters|rel=add
  description: add a new data center to the system
  request:
    body:
      parameterType: DataCenter
      signatures:
      - mandatoryArguments:
          datacenter.local: xs:boolean
          datacenter.name: xs:string
        optionalArguments:
          datacenter.comment: xs:string
          datacenter.description: xs:string
          datacenter.storage_format: xs:string
          datacenter.storage_type--DEPRECATED: xs:string
          datacenter.version.major: xs:int
          datacenter.version.minor: xs:int
        description: add a new data center to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/permissions|rel=get
  description: get the list of permissions on the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/permissions/{permission:id}|rel=get
  description: get details of the specified permission on the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/permissions|rel=add
  description: add a new permission on the data center
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the data center
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new role permission on the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains|rel=get
  description: get the list of storage domains in a data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=get
  description: get details of the specified storage domain in a data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}|rel=delete
  description: delete the specified storage domain in a data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains|rel=add
  description: add a new storage domain to the data center
  request:
    body:
      parameterType: StorageDomain
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {}
        description: add a new storage domain to the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/activate|rel=activate
  description: activate the specified storage domain in the data center
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: activate the specified storage domain in the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/deactivate|rel=deactivate
  description: deactivate the specified storage domain in the data center
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: deactivate the specified storage domain in the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters|rel=get
  description: get the list of clusters in the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}|rel=get
  description: get the details of the specified cluster in the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}|rel=delete
  description: delete specified cluster from the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}|rel=update
  description: update specified cluster in the data center
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cluster.name: 'xs:string', cluster.description: 'xs:string', cluster.cpu.id: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int',
        cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean', cluster.scheduling_policy.policy--DEPRECATED: 'xs:string',
        cluster.scheduling_policy.thresholds.low--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.high--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.duration--DEPRECATED: 'xs:int',
        cluster.scheduling_policy.id: 'xs:string', cluster.scheduling_policy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'},
        cluster.error_handling.on_error: 'xs:string', cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean', cluster.tunnel_migration: 'xs:boolean', cluster.trusted_service: 'xs:boolean', cluster.ha_reservation: 'xs:boolean', cluster.ballooning_enabled: 'xs:boolean',
        cluster.cpu.architecture: 'xs:string', cluster.display.proxy: 'xs:string', cluster.ksm.enabled: 'xs:boolean',}
        description: update specified cluster in the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters|rel=add
  description: add a new cluster to the data center
  request:
    body:
      parameterType: Cluster
      signatures:
      - mandatoryArguments: {cluster.name: 'xs:string', cluster.version.major: 'xs:int', cluster.version.minor: 'xs:int', cluster.cpu.id: 'xs:string'}
        optionalArguments: {cluster.description: 'xs:string', cluster.memory_policy.overcommit.percent: 'xs:double', cluster.memory_policy.transparent_hugepages.enabled: 'xs:boolean',
        cluster.scheduling_policy.policy--DEPRECATED: 'xs:string', cluster.scheduling_policy.thresholds.low--DEPRECATED: 'xs:int', cluster.scheduling_policy.thresholds.high--DEPRECATED: 'xs:int',
        cluster.scheduling_policy.thresholds.duration--DEPRECATED: 'xs:int', cluster.scheduling_policy.id: 'xs:string',
        cluster.scheduling_policy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'}, cluster.error_handling.on_error: 'xs:string',
        cluster.virt_service: 'xs:boolean', cluster.gluster_service: 'xs:boolean', cluster.threads_as_cores: 'xs:boolean',
        cluster.tunnel_migration: 'xs:boolean', cluster.ballooning_enabled: 'xs:boolean', cluster.cpu.architecture: 'xs:string', cluster.display.proxy: 'xs:string', cluster.ksm.enabled: 'xs:boolean',}
        description: add a new cluster to the data center
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/networks|rel=get
  description: get the list of networks for a cluster in a data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/networks/{network:id}|rel=get
  description: get the details of the specified network in a cluster in the specified data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/networks/{network:id}|rel=delete
  description: delete the specified network in a cluster in the specified data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/networks/{network:id}|rel=update
  description: update the specified network in a cluster in the specified data center
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.display: 'xs:boolean', network.usages.usage--COLLECTION: {usage: 'xs:string'}}
        description: update the specified network in a cluster in the specified data center. Display is provided here for backwards compatibility.
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/networks|rel=add
  description: add a new network to a cluster in the specified data center.
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {network.id|name: 'xs:string'}
        optionalArguments: {network.usages.usage--COLLECTION: {usage: 'xs:string'}}
        description: add a new network to a cluster in the specified data center.
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/permissions|rel=get
  description: get the list of permissions on the cluster in the specified data center.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission on the cluster in the specified data center.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on the cluster in the specified data center.
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/clusters/{cluster:id}/permissions|rel=add
  description: add a new permission on the cluster in the specified data center.
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the cluster in the specified data center.
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the cluster in the specified data center.
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /domains|rel=get
  description: get a list of domains in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /domains/{domain:id}|rel=get
  description: get the details of the specified domain in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /domains/{domain:id}/groups|rel=get
  description: get the list of groups in the specified domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /domains/{domain:id}/groups/{group:id}|rel=get
  description: get the details of the specified group in the domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /domains/{domain:id}/users|rel=get
  description: get the list of users in the domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /domains/{domain:id}/users/{user:id}|rel=get
  description: get the details of the specified user in the domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /events|rel=get
  description: get the list of events in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      from: {context: matrix, type: 'xs:string', value: event_id, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /events/undelete|rel=undelete
  description: undoes the delete operation performed on the events
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: undoes the delete operation performed on the events
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /events/{event:id}|rel=get
  description: get the details of the specified event in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups|rel=get
  description: get the list of groups in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /events/{event:id}|rel=delete
  description: delete the specified event from the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /events|rel=add
  description: add a new event to the system
  request:
    body:
      parameterType: Event
      signatures:
      - mandatoryArguments: {event.description: 'xs:string', event.severity: 'xs:string', event.origin: 'xs:string', event.custom_id: 'xs:int'}
        optionalArguments:  {event.flood_rate: 'xs:int', event.host.id: 'xs:string',event.user.id: 'xs:string',
                           event.vm.id: 'xs:string',event.storage_domain.id: 'xs:string',event.template.id: 'xs:string',
                           event.cluster.id: 'xs:string',event.data_center.id: 'xs:string'}
        description: add a new event to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}|rel=get
  description: get the details of the specified group in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups/{group:id}|rel=delete
  description: delete the specified group in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /groups|rel=add
  description: add a new group to the system
  request:
    body:
      parameterType: Group
      signatures:
      - mandatoryArguments: {group.name: 'xs:string'}
        description: add a new group to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/permissions|rel=get
  description: get list of permissions for the group in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /groups/{group:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission for the group in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups/{group:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission from the group in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/permissions|rel=add
  description: add a new permission to the group in the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the data center to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the cluster to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the host to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the storage domain to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the vm to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the vm pool to the group in the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
        description: add a new permission on the template to the group in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/roles|rel=get
  description: get the list of roles assigned to the specified group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /groups/{group:id}/roles/{role:id}|rel=get
  description: get the details of the specified role assigned to a group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups/{group:id}/roles/{role:id}/permits|rel=get
  description: get the permits for the specified role in a group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=get
  description: get details of the specified permit for a role in a group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups/{group:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  description: delete the specified permit for a role in a group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/roles/{role:id}/permits|rel=add
  description: add a new permit for a role in a group
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/tags|rel=get
  description: get the list of tags attached to a given group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /groups/{group:id}/tags/{tag:id}|rel=get
  description: get details of the specified tag attached to a given group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /groups/{group:id}/tags/{tag:id}|rel=delete
  description: delete the specified tag attached to a given group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /groups/{group:id}/tags|rel=add
  description: add a new tag to a given group
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts|rel=get
  description: get the list of hosts in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /hosts/{host:id}|rel=get
  description: get the details of the specified host in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      force: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /hosts/{host:id}|rel=delete
  description: delete the specified host in the system
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: delete the specified host in the system
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}|rel=update
  description: update the specified host in the system
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {host.name: 'xs:string', host.comment: 'xs:string', host.address: 'xs:string', host.root_password--DEPRECATED: 'xs:string',
          host.display.address: 'xs:string', host.cluster.id|name: 'xs:string', host.port: 'xs:int',
          host.spm.priority: 'xs:int',
          host.power_management.type: 'xs:string', host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string',
          host.power_management.username: 'xs:string', host.power_management.password: 'xs:string', host.power_management.automatic_pm_enabled: 'xs:boolean',
          host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'},
          host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'}, host.power_management.agents.agent--COLLECTION:{type: 'xs:string',
          address: 'xs:string', username: 'xs:string', password: 'xs:string', options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}},
          host.power_management.kdump_detection: 'xs:boolean'}
        description: update the specified host in the system. This is deprecated and is provided only for backwards compatibility
      - mandatoryArguments: {}
        optionalArguments: {host.name: 'xs:string', host.comment: 'xs:string', host.address: 'xs:string',
          host.ssh.port: 'xs:int', host.ssh.user.user_name: 'xs:string', host.ssh.fingerprint: 'xs:string', host.display.address: 'xs:string',
          host.cluster.id|name: 'xs:string', host.port: 'xs:int',
          host.spm.priority: 'xs:int',
          host.power_management.type: 'xs:string',
          host.power_management.automatic_pm_enabled: 'xs:boolean',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.username: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string',
          option.value: 'xs:string'},  host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'},
          host.power_management.agents.agent--COLLECTION:{type: 'xs:string', address: 'xs:string', username: 'xs:string', password: 'xs:string',
          options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}},
          host.power_management.kdump_detection: 'xs:boolean'}
        description: update the specified host in the system
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts|rel=add
  description: add a new host to the system
  request:
    body:
      parameterType: Host
      signatures:
      - mandatoryArguments: {host.name: 'xs:string', host.address: 'xs:string', host.root_password--DEPRECATED: 'xs:string', host.cluster.id|name: 'xs:string'}
        optionalArguments: {host.comment: 'xs:string', host.port: 'xs:int',
          host.display.address: 'xs:string',
          host.spm.priority: 'xs:int',
          host.power_management.type: 'xs:string',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.username: 'xs:string', host.power_management.automatic_pm_enabled: 'xs:boolean',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'},
          host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'}, host.power_management.agents.agent--COLLECTION:{type: 'xs:string',
          address: 'xs:string', username: 'xs:string', password: 'xs:string', options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}}, host.reboot_after_installation: 'xs:boolean', host.override_iptables: 'xs:boolean',
          host.power_management.kdump_detection: 'xs:boolean', host.protocol: 'xs:int'}
        description: add a new host to the system providing the host root password. This has been deprecated and provided for backwards compatibility
      - mandatoryArguments: {host.name: 'xs:string', host.address: 'xs:string', host.cluster.id|name: 'xs:string'}
        optionalArguments: {host.comment: 'xs:string', host.ssh.port: 'xs:int', host.ssh.fingerprint: 'xs:string', host.ssh.authentication_method: 'xs:string',
          host.ssh.user.user_name: 'xs:string', host.ssh.user.password: 'xs:string', host.port: 'xs:int',
          host.display.address: 'xs:string',
          host.spm.priority: 'xs:int',
          host.power_management.type: 'xs:string', host.power_management.automatic_pm_enabled: 'xs:boolean',
          host.power_management.enabled: 'xs:boolean', host.power_management.address: 'xs:string', host.power_management.username: 'xs:string',
          host.power_management.password: 'xs:string', host.power_management.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'},
          host.power_management.pm_proxy--COLLECTION: {propietary : 'xs:string'}, host.power_management.agents.agent--COLLECTION:{type: 'xs:string', address: 'xs:string',
          username: 'xs:string', password: 'xs:string', options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}}, host.reboot_after_installation: 'xs:boolean', host.override_iptables: 'xs:boolean',
          host.power_management.kdump_detection: 'xs:boolean', host.protocol: 'xs:int'}
        description: add a new host to the system providing the ssh password or fingerprint
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/activate|rel=activate
  description: activate the specified host in the system
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: activate the specified host in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/forceselectspm|rel=forceselectspm
  description: force the specified to be selected as storage pool manager
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: force the specified to be selected as storage pool manager
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/approve|rel=approve
  description: approve specified host to be added to the engine
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.cluster.id|name: 'xs:string', action.async: 'xs:boolean',
          action.grace_period.expiry: 'xs:long', host.root_password--DEPRECATED: 'xs:string'}
        description: approve specified host to be added to the engine by using root password (deprecated verb). this occurs when the host registers itself with the engine
      - mandatoryArguments: {}
        optionalArguments: {action.cluster.id|name: 'xs:string', action.async: 'xs:boolean',
          action.grace_period.expiry: 'xs:long', host.ssh.authentication_method: 'xs:string',
          host.ssh.user.user_name: 'xs:string', host.ssh.user.password: 'xs:string'}
        description: approve specified host to be added to the engine by using ssh authentication. this occurs when the host registers itself with the engine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/commitnetconfig|rel=commitnetconfig
  description: commit the changes made to network configuration of the host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: commit the changes made to network configuration of the host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/deactivate|rel=deactivate
  description: deactivate the specified host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: deactivate the specified host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/fence|rel=fence
  description: initiate the fence operation on the host which has become non-responsive after multiple retries to connect to it
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.fence_type: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: initiate the fence operation on the host which has become non-responsive after multiple retries to connect to it
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/install|rel=install
  description: install vdsm and other packages required to get the host ready to be used in the engine
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          action.root_password: xs:string
          action.image: xs:string
          action.host.override_iptables: xs:boolean
        deprecated: true
        description: install vdsm and other packages required to get the host ready to be used in the engine providing the root password. This has been deprecated
      - mandatoryArguments: {}
        optionalArguments:
          action.ssh.port: xs:int
          action.ssh.fingerprint: xs:string
          action.ssh.authentication_method: xs:string
          action.ssh.user.user_name: xs:string
          action.ssh.user.password: xs:string
          action.image: xs:string
          action.async: xs:boolean
          action.grace_period.expiry: xs:long
          action.host.override_iptables: xs:boolean
        description: install vdsm and other packages required to get the host ready to be used in the engine providing thre ssh password
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/iscsidiscover|rel=iscsidiscover
  description: initiate the command to discover the iscsi targets and map the targets to the storage server connections
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: initiate the command to discover the iscsi targets and map the targets to the storage server connections
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/iscsilogin|rel=iscsilogin
  description: login to the specified iscsi target at the specified address
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string', action.iscsi.target: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: login to the specified iscsi target at the specified address
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/unregisteredstoragedomainsdiscover|rel=unregisteredstoragedomainsdiscover
  description: Discover the Storage Domains which are candidiates to be imported to the setup
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.iscsi.address: 'xs:string', action.target: 'xs:string'}
        description: Discover the Storage Domains which are candidiates to be imported to the setup
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics|rel=get
  description: get the list of network interfaces for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}|rel=get
  description: get the details of the specified network interface for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}|rel=delete
  description: delete the specified network interface for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/{nic:id}|rel=update
  description: update the specified network interface for the host
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}
          hostnic.network.id|name: xs:string
          hostnic.name: xs:string
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
          hostnic.ip.gateway: xs:string
          hostnic.boot_protocol: xs:string
          hostnic.mac: xs:string
          hostnic.ip.address: xs:string
          hostnic.ip.netmask: xs:string
        description: update the specified network interface for the host
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics|rel=add
  description: add a new network interface for the host
  request:
    body:
      parameterType: HostNIC
      signatures:
      - mandatoryArguments: {hostnic.network.id|name: 'xs:string', hostnic.name: 'xs:string', hostnic.bonding.slaves.host_nic--COLLECTION: {host_nic.id|name: 'xs:string'}}
        optionalArguments:
          hostnic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string',
            type: 'xs:string'}
        description: add a new network interface for the host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/setupnetworks|rel=setupnetworks
  description: initiate the command to setup networks for the network interface card of the specified host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          action.host_nics.host_nic--COLLECTION: {host_nic.network.id|name: 'xs:string', host_nic.name: 'xs:string', host_nic.base_interface: 'xs:string', host_nic.ip.gateway: 'xs:string',
            host_nic.boot_protocol: 'xs:string', host_nic.mac: 'xs:string', host_nic.ip.address: 'xs:string', host_nic.ip.netmask: 'xs:string',
            host_nic.bonding.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string', option.type: 'xs:string'},
            bonding.slaves.host_nic--COLLECTION: {host_nic.name|id: 'xs:string'},
            host_nic.override_configuration: 'xs:boolean',
            host_nic.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'},
            action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
          action.checkConnectivity: xs:boolean
          action.connectivityTimeout: xs:int
          action.force: xs:boolean
        description: initiate the command to setup networks for the network interface card of the specified host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/{nic:id}/attach|rel=attach
  description: attach the network interface card to the specified host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.network.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: attach the network interface card to the specified host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/{nic:id}/detach|rel=detach
  description: detach the network interface card from the specified host
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: detach the network interface card from the specified host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/{nic:id}/statistics|rel=get
  description: get the statistics for the network interface card attached to the specified host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}/statistics/{statistic:id}|rel=get
  description: get the details of the specified statistics for the network interface card attached to the specified host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}/labels|rel=get
  description: get the labels of an interface
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}/labels|rel=add
  description: add a new label to the interface
  request:
    body:
      parameterType: Label
      signatures:
      - mandatoryArguments: {label.id: 'xs:string'}
        description: add a new label to the interface
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/nics/{nic:id}/labels/{label:id}|rel=get
  description: get a specific label of an interface
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/nics/{nic:id}/labels/{label:id}|rel=delete
  description: delete the specified label of an interface
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/permissions|rel=get
  description: get the list of permissions for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/permissions|rel=add
  description: add a new permission for the host
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission for the host
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission for the host
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/statistics|rel=get
  description: get the statistics for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/statistics/{statistic:id}|rel=get
  description: get the details of the specified statistics for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/storage|rel=get
  description: get the list of all logical units and volume groups for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/storage/{storag:id}|rel=get
  description: get the details of the specified logical unit or volume group for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/tags|rel=get
  description: get the list of all tags added to the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/tags/{tag:id}|rel=get
  description: get the details of the specified tag added to the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/tags/{tag:id}|rel=delete
  description: delete the specified tag added to the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /hosts/{host:id}/tags|rel=add
  description: add a new tag to the host
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks|rel=get
  description: get the list of all networks in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /networks/{network:id}|rel=get
  description: get the details of the specified network in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /networks/{network:id}|rel=delete
  description: delete the specified network in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}|rel=update
  description: update the specified network in the system
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {network.name: 'xs:string', network.description: 'xs:string', network.comment: 'xs:string', network.vlan.id: 'xs:string',
          network.ip.address: 'xs:string', network.ip.gateway: 'xs:string', network.ip.netmask: 'xs:string',
          network.display: 'xs:boolean', network.stp: 'xs:boolean', network.mtu: 'xs:int'}
        description: update the specified network in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks|rel=add
  description: add a new network to the system
  request:
    body:
      parameterType: Network
      signatures:
      - mandatoryArguments: {
            network.data_center.id|name: 'xs:string',
            network.name: 'xs:string'
        }
        optionalArguments: {
            network.description: 'xs:string',
            network.comment: 'xs:string',
            network.vlan.id: 'xs:string',
            network.ip.address: 'xs:string',
            network.ip.gateway: 'xs:string',
            network.ip.netmask: 'xs:string',
            network.stp: 'xs:boolean',
            network.mtu: 'xs:int',
            network.profile_required: 'xs:boolean',
            network.usages.usage--COLLECTION: {usage: 'xs:string'}
        }
        description: add a new network to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/permissions|rel=get
  description: get the list of all permissions on a network in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /networks/{network:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission on a network in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /networks/{network:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on a network in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/permissions|rel=add
  description: add a new permission on a network in the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on a network in the system
      - mandatoryArguments: {permission.group.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on a network in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/vnicprofiles|rel=get
  description: get the list of all virtual network interface card profiles for the network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /networks/{network:id}/vnicprofiles/{vnicprofile:id}|rel=get
  description: get the details of the specified virtual network interface card profile for the network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /networks/{network:id}/vnicprofiles/{vnicprofile:id}|rel=delete
  description: delete the specified virtual network interface card profile for the network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/vnicprofiles|rel=add
  description: add a new virtual network interface card profile for the network
  request:
    body:
      parameterType: VnicProfile
      signatures:
      - mandatoryArguments: {vnicprofile.name: 'xs:string'}
        optionalArguments: {vnicprofile.description: 'xs:string', vnicprofile.port_mirroring: 'xs:boolean',
        vnicprofile.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}}
        description: add a new virtual network interface card profile for the network
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/labels|rel=get
  description: get the labels of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /networks/{network:id}/labels|rel=add
  description: add a new label to the network
  request:
    body:
      parameterType: Label
      signatures:
      - mandatoryArguments: {label.id: 'xs:string'}
        description: add a new label to the network
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /networks/{network:id}/labels/{label:id}|rel=get
  description: get a specific label of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /networks/{network:id}/labels/{label:id}|rel=delete
  description: delete the specified label of a network
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vnicprofiles|rel=get
  description: get the list of all virtual network interface card profiles in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vnicprofiles/{vnicprofile:id}|rel=get
  description: get the details of the specified virtual network interface card profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vnicprofiles/{vnicprofile:id}|rel=delete
  description: delete the specified virtual network interface card profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vnicprofiles/{vnicprofile:id}|rel=update
  description: update the specified virtual network interface card profile in the system
  request:
    body:
      parameterType: VnicProfile
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {vnicprofile.name: 'xs:string', vnicprofile.description: 'xs:string', vnicprofile.port_mirroring: 'xs:boolean',
        vnicprofile.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}}
        description: update the specified virtual network interface card profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vnicprofiles|rel=add
  description: add a new virtual network interface card profile to the system
  request:
    body:
      parameterType: VnicProfile
      signatures:
      - mandatoryArguments: {vnicprofile.network.id: 'xs:string', vnicprofile.name: 'xs:string'}
        optionalArguments: {vnicprofile.description: 'xs:string', vnicprofile.port_mirroring: 'xs:boolean',
        vnicprofile.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}}
        description: add a new virtual network interface card profile to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vnicprofiles/{vnicprofile:id}/permissions|rel=get
  description: get the list of all permissions on the virtual network interface card profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vnicprofiles/{vnicprofile:id}/permissions/{permission:id}|rel=get
  description: get details of the specified permission on the virtual network interface card profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vnicprofiles/{vnicprofile:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission for the virtual network interface card profile
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vnicprofiles/{vnicprofile:id}/permissions|rel=add
  description: add a new permission on the virtual network interface card profile in the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the virtual network interface card profile in the system
      - mandatoryArguments: {permission.group.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the virtual network interface card profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /roles|rel=get
  description: get the list of all roles in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /roles/{role:id}|rel=get
  description: get the details of the specified role in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /roles/{role:id}|rel=delete
  description: get the details of the specified role in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /roles|rel=add
  description: add a new role to the system
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {role.name: 'xs:string', role.permits.permit--COLLECTION: {permit.id: 'xs:string'}}
        optionalArguments: {role.description: 'xs:string', role.administrative: 'xs:boolean'}
        description: add a new role to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /roles/{role:id}|rel=update
  description: update the specified role in the system
  request:
    body:
      parameterType: Role
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {role.permits.permit--COLLECTION: {permit.id: 'xs:string'}, role.description: 'xs:string'}
        description: update the specified role in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /roles/{role:id}/permits|rel=get
  description: get the list of all permits for the specified role in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /roles/{role:id}/permits/{permit:id}|rel=get
  description: get the details of the specified permit for the role in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /roles/{role:id}/permits/{permit:id}|rel=delete
  description: delete the specified permit for the role in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /roles/{role:id}/permits|rel=add
  description: add a new permit for the role in the system
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /bookmarks|rel=get
  description: get the list of bookmarks in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /bookmarks/{bookmark:id}|rel=get
  description: get the details of the specified bookmark in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /bookmarks/{tag:id}|rel=delete
  description: delete the specified bookmark from the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /bookmarks/{tag:id}|rel=update
  description: update the specified bookmark in the system
  request:
    body:
      parameterType: Bookmark
      signatures:
      - mandatoryArguments: {bookmark.name: 'xs:string', bookmark.value: 'xs:string'}
        description: update the name, value of the specified bookmark in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
- name: /bookmarks|rel=add
  description: add a new bookmark to the system
  request:
    body:
      parameterType: Bookmark
      signatures:
      - mandatoryArguments: {bookmark.name: 'xs:string', bookmark.value: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
- name: /tags|rel=get
  description: get the list of tags in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /tags/{tag:id}|rel=get
  description: get the details of the specified tag in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /tags/{tag:id}|rel=delete
  description: delete the specified tag in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /tags/{tag:id}|rel=update
  description: update the specified tag in the system
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {tag.name: 'xs:string', tag.description: 'xs:string', tag.parent.tag.id|name: 'xs:string'}
        description: update the name, description or parent tag of the specified tag in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /tags|rel=add
  description: add a new tag to the system
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.name: 'xs:string'}
        optionalArguments: {tag.description: 'xs:string', tag.parent.tag.id|name: 'xs:string'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates|rel=get
  description: get the list of all templates in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
      All-Content: {value: true|false, required: false}
- name: /templates/{template:id}|rel=get
  description: get the details of the specified template in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
      All-Content: {value: true|false, required: false}
- name: /templates/{template:id}|rel=delete
  description: delete the specified template in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}|rel=update
  description: update the specified template in the system
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          template.name: 'xs:string'
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.delete_protected: xs:boolean
          template.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
          vm.rng_device.rate.bytes: xs:int
          vm.rng_device.rate.period: xs:int
          vm.rng_device.source: xs:string
          template.console.enabled: xs:boolean
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.comment: xs:string
          template.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          template.cpu.topology.sockets: xs:int
          template.cpu_shares: xs:int
          template.cpu.architecture: xs:string
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          vm.display.single_qxl_pci: xs:boolean
          template.display.allow_override: xs:boolean
          template.display.smartcard_enabled: xs:boolean
          vm.display.file_transfer_enabled: xs:boolean
          vm.display.copy_paste_enabled: xs:boolean
          template.display.keyboard_layout: xs:string
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
          template.usb.type: xs:string
          template.tunnel_migration: xs:boolean
          template.migration_downtime: xs:int
          template.virtio_scsi.enabled: xs:boolean
          template.soundcard_enabled: xs:boolean
          template.version.version_name: xs:string
          template.serial_number.policy: xs:string
          template.serial_number.value: xs:string
          template.bios.boot_menu.enabled: xs:boolean
          template.cpu_profile.id: xs:string
        description: update the specified template in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates|rel=add
  description: add a new template to the system
  request:
    body:
      parameterType: Template
      signatures:
      - mandatoryArguments: {template.vm.id|name: 'xs:string', template.name: 'xs:string'}
        optionalArguments:
          template.memory: xs:long
          template.cpu.topology.cores: xs:int
          template.high_availability.enabled: 'xs:boolean'
          template.os.cmdline: xs:string
          template.origin: xs:string
          template.high_availability.priority: 'xs:int'
          template.timezone: xs:string
          template.domain.name: xs:string
          template.type: xs:string
          template.stateless: 'xs:boolean'
          template.delete_protected: xs:boolean
          template.sso.methods.method--COLLECTION: {method.id: 'xs:string'}
          vm.rng_device.rate.bytes: xs:int
          vm.rng_device.rate.period: xs:int
          vm.rng_device.source: xs:string
          template.console.enabled: xs:boolean
          template.placement_policy.affinity: xs:string
          template.description: xs:string
          template.comment: xs:string
          template.custom_properties.custom_property--COLLECTION: {custom_property.name: 'xs:string', custom_property.value: 'xs:string'}
          template.os.type: xs:string
          template.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          template.cpu.topology.sockets: xs:int
          template.cpu_shares: xs:int
          template.cpu.architecture: xs:string
          template.os.kernel: xs:string
          template.display.type: xs:string
          template.display.monitors: xs:int
          vm.display.single_qxl_pci: xs:boolean
          template.display.allow_override: xs:boolean
          template.display.smartcard_enabled: xs:boolean
          template.display.file_transfer_enabled: xs:boolean
          template.display.copy_paste_enabled: xs:boolean
          template.display.keyboard_layout: xs:string
          template.os.initRd: xs:string
          template.usb.enabled: xs:boolean
          template.usb.type: xs:string
          template.tunnel_migration: xs:boolean
          template.migration_downtime: xs:int
          template.virtio_scsi.enabled: xs:boolean
          template.soundcard_enabled: xs:boolean
          template.vm.disks.disk--COLLECTION: {disk.id: 'xs:string', storage_domains.storage_domain--COLLECTION: {storage_domain.id: 'xs:string'}}
          template.permissions.clone: xs:boolean
          template.version.version_name: xs:string
          template.version.base_template.id: xs:string
          template.cpu.cpu_tune.vcpu_pin--COLLECTION: {vcpu_pin.vcpu: 'xs:int', vcpu_pin.cpu_set: 'xs:string'}
          template.serial_number.policy: xs:string
          template.serial_number.value: xs:string
          template.bios.boot_menu.enabled: xs:boolean
          template.cluster.id: xs:string
          template.cluster.name: xs:string
          template.cpu_profile.id: xs:string
        description: add a new template to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/export|rel=export
  description: export the specified template to the export domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.storage_domain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.exclusive: 'xs:boolean',
          action.grace_period.expiry: 'xs:long'}
        description: export the specified template to the export domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/cdroms|rel=get
  description: get the list of cdroms attached to the specified template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/cdroms/{cdrom:id}|rel=get
  description: get the details of the specified cdrom attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/watchdogs|rel=get
  description: get all the watchdogs for the template identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/watchdogs/{watchdog:id}|rel=get
  description: get the watchdog identified by the id for a given template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/watchdogs/{watchdog:id}|rel=delete
  description: delete the watchdog for the template identified by the given id
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/watchdogs/{watchdog:id}|rel=update
  description: update the watchdog for the template identified by the given id
  request:
    body:
      parameterType: WatchDog
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {watchdog.action: 'xs:string', watchdog.model: 'xs:string'}
        description: update the watchdog for the template identified by the given id with a new action and model as specified in the request data
    urlparams:
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/watchdogs|rel=add
  description: add a watchdog to the template identified by the given id
  request:
    body:
      parameterType: WatchDog
      signatures:
      - mandatoryArguments: {watchdog.action: 'xs:string', watchdog.model: 'xs:string'}
        description: add a watchdog to the template identified by the given id
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/disks|rel=get
  description: get the list of disks attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/disks/{disk:id}|rel=get
  description: get the details of the specified disk attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/disks/{disk:id}|rel=delete
  description: delete the specified disk attached to the template
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.storage_domain.id: 'xs:string', action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/disks/{disk:id}/copy|rel=copy
  description: copy the specified disk attached to the template to a specific storage domain
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: copy the specified disk attached to the template to a specific storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name:  /templates/{template:id}/disks/{disk:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /templates/{template:id}/nics|rel=get
  description: get the list of network interface cards attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/nics|rel=add
  description: add a new network interface card to the template
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {nic.name: 'xs:string'}
        optionalArguments: {nic.vnic_profile.id: 'xs:string', nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.plugged: 'xs:boolean'}
        description: add a new network interface card to the template using a virtual network interface card profile
      - mandatoryArguments: {nic.name: 'xs:string'}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}}
        deprecated: true
        description: add a new network interface card to the template using a network with optional port mirroring options. This has been deprecated
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/nics/{nic:id}|rel=get
  description: get the details of the specified network interface card attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/nics/{nic:id}|rel=delete
  description: delete the specified network interface card attached to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/nics/{nic:id}|rel=update
  description: update the specified network interface card attached to the template
  request:
    body:
      parameterType: NIC
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {nic.vnic_profile.id: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.plugged: 'xs:boolean'}
      - mandatoryArguments: {}
        optionalArguments: {nic.network.id|name: 'xs:string', nic.linked: 'xs:boolean', nic.name: 'xs:string', nic.mac.address: 'xs:string', nic.interface: 'xs:string', nic.port_mirroring.networks.network--COLLECTION: {network.id: 'xs:string'}}
        deprecated: true
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/permissions|rel=get
  description: get the list of all permissions for the specified template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission on the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/permissions|rel=add
  description: add a new permission on the template
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the template
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new role permission on the template
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/tags|rel=get
  description: get the list of tags added to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /templates/{template:id}/tags/{tag:id}|rel=get
  description: get the details of the tag added to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /templates/{template:id}/tags/{tag:id}|rel=delete
  description: delete a tag added to the template
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /templates/{template:id}/tags|rel=add
  description: add a new tag to the template
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        description: add a new tag to the virtual machine
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /users|rel=get
  description: get the list of all users registered in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /users/{user:id}|rel=get
  description: get the details of the specified user registered in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /users|rel=add
  description: add a new user to the system
  request:
    body:
      parameterType: User
      signatures:
      - mandatoryArguments: {user.user_name: 'xs:string', user.domain.id|name: 'xs:string'}
        description: add a new user to the specified domain with the specified user name
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}|rel=delete
  description: delete the from the domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/permissions|rel=get
  description: get the list of all permissions for the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /users/{user:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission for the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /users/{user:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission for the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/permissions|rel=add
  description: add a new permission for the user
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.data_center.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the data center
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.cluster.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the cluster
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.host.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the host
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.storage_domain.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the storage domain
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vm.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the vm
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.vmpool.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the vm pool
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.template.id: 'xs:string'}
        optionalArguments: {}
        description: add a new tole permission for the user on the template
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/roles|rel=get
  description: get the list of roles assigned to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /users/{user:id}/roles/{role:id}|rel=get
  description: get the details of the specified role assigned to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /users/{user:id}/roles/{role:id}/permits|rel=get
  description: get the list of permits for the role assigned to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=get
  description: get the details of the specified permit for the role assigned to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /users/{user:id}/roles/{role:id}/permits/{permit:id}|rel=delete
  description: delete the specified permit for the role assigned to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/roles/{role:id}/permits|rel=add
  description: add a new permit for the role assigned to the user
  request:
    body:
      parameterType: Permit
      signatures:
      - mandatoryArguments: {permit.id|name: 'xs:string'}
        optionalArguments: {}
        description: add a new permit for the role assigned to the user
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/tags|rel=get
  description: get the list of tags attached to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /users/{user:id}/tags/{tag:id}|rel=get
  description: get the details of the specified tag attached to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /users/{user:id}/tags/{tag:id}|rel=delete
  description: delete the specified tag attached to the user
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /users/{user:id}/tags|rel=add
  description: add a new tag to the user
  request:
    body:
      parameterType: Tag
      signatures:
      - mandatoryArguments: {tag.id|name: 'xs:string'}
        description: add a new tag to the user
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools|rel=get
  description: get the list of all virtual machine pools in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /vmpools/{vmpool:id}|rel=get
  description: get the details of the specified virtual machine pool in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /vmpools/{vmpool:id}|rel=delete
  description: delete the specified virtual machine pool in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools/{vmpool:id}|rel=update
  description: update the specified virtual machine pool in the system
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string', vmpool.comment: 'xs:string', vmpool.size: 'xs:int', vmpool.max_user_vms: 'xs:int', vmpool.display.proxy: 'xs:string',
          vmpool.description: 'xs:string'}
        description: update the specified virtual machine pool in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools/{vmpool:id}/allocatevm|rel=allocatevm
  description: attach the user to a vm from the vmpool and run the vm
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools|rel=add
  description: add anew vm pool to the system
  request:
    body:
      parameterType: VmPool
      signatures:
      - mandatoryArguments: {vmpool.cluster.id|name: 'xs:string', vmpool.template.id|name: 'xs:string',
          vmpool.name: 'xs:string'}
        optionalArguments: {vmpool.comment: 'xs:string', vmpool.size: 'xs:int', vmpool.max_user_vms: 'xs:int', vmpool.display.proxy: 'xs:string',
          vmpool.description: 'xs:string', vmpool.soundcard_enabled: 'xs:boolean'}
        description: add a new vm pool to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools/{vmpool:id}/permissions|rel=get
  description: get the list of permissions for the specified vm pool
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vmpools/{vmpool:id}/permissions/{permission:id}|rel=get
  description: get the details of the specified permission on the vm pool
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vmpools/{vmpool:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission on the vm pool
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vmpools/{vmpool:id}/permissions|rel=add
  description: add a new permission on the vm pool
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the vm pool
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the vm pool
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes|rel=get
  description: get the list of gluster volumes attached to the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: 'search query', required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /clusters/{cluster:id}/glustervolumes|rel=add
  description: add a new gluster volume to the cluster
  request:
    body:
      parameterType: GlusterVolume
      signatures:
      - mandatoryArguments:
          gluster_volume.name: 'xs:string'
          gluster_volume.volume_type: 'xs:string'
          gluster_volume.bricks.brick--COLLECTION: {brick.server_id: 'xs:string', brick.brick_dir: 'xs:string'}
        optionalArguments:
          gluster_volume.transport_types--COLLECTION: {transport_type: 'xs:string'}
          gluster_volume.replica_count: 'xs:unsignedShort'
          gluster_volume.stripe_count: 'xs:unsignedShort'
          gluster_volume.options.option--COLLECTION: {option.name: 'xs:string', option.value: 'xs:string'}
        description: add a new gluster volume to the cluster with bricks
    urlparams:
      force: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/start|rel=start
  description: start the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: start the gluster volume attached to the cluster with an optional argument to force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/stop|rel=stop
  description: stop the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: stop the gluster volume attached to the cluster with an optional argument to force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/rebalance|rel=rebalance
  description: invoke the rebalance command on the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.fix_layout: 'xs:boolean', action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: invoke the rebalance command on the gluster volume attached to the cluster with optional arguments to fix the lay and force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/stoprebalance|rel=stoprebalance
  description: invoke the stop rebalance command on the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: invoke the stop rebalance command on the gluster volume attached to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/setoption|rel=setoption
  description: set an option for the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.option.name: 'xs:string', action.option.value: 'xs:string', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        optionalArguments: {}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/resetoption|rel=resetoption
  description: reset an option for the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.option.name: 'xs:string', action.force: 'xs:boolean'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: reset an option for the gluster volume attached to the cluster with mandatory option to force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/resetalloptions|rel=resetalloptions
  description: resets all options for the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: resets all options for the gluster volume attached to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/startprofile|rel=startprofile
  description: start profile on the gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {}
        description: start profiling on the gluster volume attached to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/stopprofile|rel=stopprofile
  description: stop the profiling of gluster volume attached to the cluster
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {}
        description: stop profiling on the gluster volume attached to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/profilestatistics|rel=get
  description: get the profiling statistics once profiling is turned on for a volume
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      nfsStatistics: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks|rel=get
  description: get the list of all bricks in the gluster volume attached to the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      All-Content: {value: true|false, required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks|rel=add
  description: add a new brick to the gluster volume attached to the cluster
  request:
    body:
      parameterType: Bricks
      signatures:
      - mandatoryArguments:
          brick--COLLECTION: {brick.server_id: 'xs:string', brick.brick_dir: 'xs:string'}
        optionalArguments: {replica_count: 'xs:unsignedShort', stripe_count: 'xs:unsignedShort'}
        description: add a new brick to the gluster volume attached to the cluster
    urlparams:
      force: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/{brick:id}|rel=get
  description: get the details of the specified brick in the gluster volume attached to the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      All-Content: {value: true|false, required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks|rel=delete
  description: delete the bricks in the gluster volume attached to the cluster
  request:
    body:
      parameterType: GlusterBricks
      signatures:
      - mandatoryArguments:
          bricks--COLLECTION: {brick.id: 'xs:string'}
        optionalArguments: {replica_count: 'xs:unsignedShort'}
        description: delete bricks in the gluster volume attached to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/migrate|rel=migrate
  description: migrate the data from the brick to others and mark for deletion
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.bricks--COLLECTION: {brick.name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: migrate the data from the brick to others and mark for deletion
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/stopmigrate|rel=stopmigrate
  description: stops the bricks migration task started on on volume
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.bricks--COLLECTION: {brick.name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: stops the bricks migration task started on on volume
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/activate|rel=activate
  description: activates the bricks post migration of data for reuse
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments:
          action.bricks--COLLECTION: {brick.name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: activates the bricks post migration of data for reuse
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/{brick:id}/replace|rel=replace #deprecated, replaced by 'migrate/delete'
  description: This is deprecated.Use migrate and delete instead.
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.brick.server_id: 'xs:string', action.brick.brick_dir: 'xs:string'}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: replace the specified brick with a new brick directory in the gluster volume attached to the cluster
        deprecated: true
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/{brick:id}/statistics|rel=get
  description: get the statistics for the specified brick in the gluster volume attached to the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/glustervolumes/{glustervolume:id}/bricks/{brick:id}/statistics/{statistic:id}|rel=get
  description: get the details of the specified statistics for the brick in the gluster volume attached to the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/disks|rel=get
  description: get the list of all disks in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/disks/{disk:id}|rel=get
  description: get the details of the specified disk in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/disks/{disk:id}|rel=delete
  description: delete the specified disk in the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/disks|rel=add
  description: add a new disk to the storage domain
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.disk_profile.id: xs:string
        description: add a new disk to the storage domain with the specified size allocating space from the storage domain
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.format: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.sgio: xs:string
        description: add a new lun disk to the storage domain
    urlparams:
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/disks|rel=get
  description: get the list of all disks in the storage domain in the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      search: {context: query, type: 'xs:string', value: query, required: false}
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/disks/{disk:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/disks/{disk:id}|rel=get
  description: get the details of the specified disk in the storage domain in the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers: {}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/disks/{disk:id}/export|rel=export
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {storagedomain.id|name: 'xs:string'}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
      Filter: {value: true|false, required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/disks/{disk:id}|rel=delete
  description: delete the specified disk from the storage domain in the data center
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/storagedomains/{storagedomain:id}/disks|rel=add
  description: add a new disk to the storage domain in the data center
  request:
    body:
      parameterType: Disk
      signatures:
      - mandatoryArguments: {provisioned_size: 'xs:int', disk.interface: 'xs:string', disk.format: 'xs:string'}
        optionalArguments:
          disk.alias: xs:string
          disk.name: xs:string
          disk.size: xs:int #deprecated, replaced by 'provisioned_size'
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.disk_profile.id: xs:string
        description: add a new disk with the specified size to the storage domain in the data center, allocating space from the storage domain
        #the signature below is for direct-LUN disk, which doesn't require size, but requires the lun id, the lun type, and the lun connection-details.
      - mandatoryArguments: {disk.interface: 'xs:string', disk.format: 'xs:string', disk.lun_storage.type: 'xs:string',
          disk.lun_storage.logical_unit--COLLECTION: {logical_unit.id: 'xs:string', logical_unit.address: 'xs:string', logical_unit.port: 'xs:int', logical_unit.target: 'xs:string'}}
        optionalArguments:
          disk.alias: xs:string
          disk.sparse: xs:boolean
          disk.bootable: xs:boolean
          disk.shareable: xs:boolean
          disk.propagate_errors: xs:boolean
          disk.wipe_after_delete: xs:boolean
          disk.quota.id: xs:string
          disk.sgio: xs:string
        description: add a new lun disk to the storage domain in the data center
    urlparams:
      unregistered: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs|rel=get
  description: get the list of all external jobs in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}

- name: /jobs/{job:id}|rel=get
  description: get the details of the specified external job in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}

- name: /jobs|rel=add
  description: add a new external job to the system
  request:
    body:
      parameterType: Job
      signatures:
      - mandatoryArguments: {job.description: 'xs:string'}
        optionalArguments: {job.auto_cleared: 'xs:boolean'}
        description: add a new external job to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs/{job:id}/end|rel=end
  description: end the specified external job in the system
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.status.state: 'xs:string'}
        optionalArguments: {action.force: 'xs:boolean', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: end the specified external job in the system with an optional argument to force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs/{job:id}/clear|rel=clear
  description: clear the specified external job in the system
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: clear the specified external job in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs/{job:id}/steps|rel=get
  description: get the list of all steps for the external job in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}

- name: /jobs/{job:id}/steps/{step:id}|rel=get
  description: get the details of the specified step in the external job
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}

- name: /jobs/{job:id}/steps|rel=add
  description: add a new step to the external job
  request:
    body:
      parameterType: Step
      signatures:
      - mandatoryArguments: {step.type: 'xs:string' , step.description: 'xs:string'}
        optionalArguments: {step.job.id: 'xs:string', step.parent_step.id: 'xs:string'}
        description: add a new step to the external job
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs/{job:id}/steps/{step:id}/end|rel=end
  description: invoke the command to end the specified step of an external job
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.succeeded: 'xs:boolean'}
        optionalArguments: {action.force: 'xs:boolean', action.status.state: 'xs:string', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
        description: invoke the command to end the specified step of an external job with an optional agrument to force the operation
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /jobs/{job:id}/steps/{step:id}/statistics|rel=get
  description: get the detailed step status for monitoring
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}

- name: /jobs/{job:id}/steps/{step:id}/statistics/{statistic:id}|rel=get
  description: get the detail statistic for a given step
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}

- name: /storageconnections|rel=get
  description: get the list of all storage connections in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}

- name: /storageconnections/{storageconnection:id}|rel=get
  description: get the details of the specified storage connection in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}

- name: /storageconnections/{storageconnection:id}|rel=delete
  description: delete the specified storage connection in the system
  request:
    body:
      required: false
      parameterType: Host
      signatures:
      - mandatoryArguments: {}
        optionalArguments:  {action.host.id|name: 'xs:string'}
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /storageconnections/{storageconnection:id}|rel=update
  description: update the specified storage connection in the system
  request:
    body:
      parameterType: StorageConnection
      signatures:
      - mandatoryArguments: {}
        optionalArguments:  {storage_connection.port: 'xs:int', storage_connection.username: 'xs:string', storage_connection.password: 'xs:string',
                             storage_connection.iqn: 'xs:string', storage_connection.address: 'xs:string' }
        description: update the specified iSCSI storage connection in the system
      - mandatoryArguments: {}
        optionalArguments:  {storage_connection.nfs_timeo: 'xs:string', storage_connection.nfs_version: 'xs:string', storage_connection.nfs_retrans: 'xs:string',
                             storage_connection.address: 'xs:string', storage_connection.path: 'xs:string'}
        description: update the specified nfs storage connection in the system
      - mandatoryArguments: {}
        optionalArguments:  {storage_connection.mount_options: 'xs:string', storage_connection.vfs_type: 'xs:string',
                             storage_connection.address: 'xs:string', storage_connection.path: 'xs:string'}
        description: update the specified vfs storage connection in the system
      - mandatoryArguments: {}
        optionalArguments:  {storage_connection.path: 'xs:string'}
        description: update the specified local storage connection in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /storageconnections|rel=add
  description: add a new storage connection to the system
  request:
    body:
      parameterType: StorageConnection
      signatures:
      - mandatoryArguments: {storage_connection.address: 'xs:string', storage_connection.type: 'xs:string', storage_connection.iqn: 'xs:string', storage_connection.port: 'xs:int'}
        optionalArguments:  {storage_connection.username: 'xs:string', storage_connection.password: 'xs:string'}
        description: add a iSCSI storage connection to the system
      - mandatoryArguments: {storage_connection.address: 'xs:string', storage_connection.type: 'xs:string', storage_connection.path: 'xs:string'}
        optionalArguments:  {storage_connection.nfs_timeo: 'xs:string', storage_connection.nfs_version: 'xs:string', storage_connection.nfs_retrans: 'xs:string'}
        description: add a nfs storage connection to the system
      - mandatoryArguments: {storage_connection.type: 'xs:string', storage_connection.path: 'xs:string', storage_connection.vfs_type: 'xs:string'}
        optionalArguments:  {storage_connection.address: 'xs:string', storage_connection.mount_options: 'xs:string'}
        description: add a vfs storage connection to the system
      - mandatoryArguments: {storage_connection.type: 'xs:string', storage_connection.path: 'xs:string'}
        optionalArguments:  {}
        description: add a local storage connection to the system
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /clusters/{cluster:id}/glusterhooks|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/glusterhooks/{glusterhook:id}|rel=get
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/glusterhooks/{glusterhook:id}|rel=delete
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glusterhooks/{glusterhook:id}/enable|rel=enable
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glusterhooks/{glusterhook:id}/disable|rel=disable
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/glusterhooks/{glusterhook:id}/resolve|rel=resolve
  request:
    body:
      parameterType: Action
      signatures:
      - mandatoryArguments: {action.resolution_type: 'xs:string'}
        optionalArguments: {action.host.id|name: 'xs:string', action.async: 'xs:boolean', action.grace_period.expiry: 'xs:long'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}

- name: /permissions|rel=get
  description: get the list of permissions on the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /permissions/{permission:id}|rel=get
  description: get the details of the permission on the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /permissions/{permission:id}|rel=delete
  description: delete the permission on the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /permissions|rel=add
  description: add a new permission on the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the system
      - mandatoryArguments: {permission.role.id: 'xs:string', permission.group.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /instancetypes|rel=get
  description: get the list of instance types on the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /instancetypes/{instancetype:id}|rel=get
  description: get the details of the instance type on the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /instancetypes/{instancetype:id}|rel=delete
  description: delete the instance type from the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /instancetypes|rel=add
  description: add a new instance type to the system
  request:
    body:
      parameterType: InstanceType
      signatures:
      - mandatoryArguments: {instance_type.name: 'xs:string'}
        optionalArguments:
          instance_type.memory: xs:long
          instance_type.cpu.topology.cores: xs:int
          instance_type.high_availability.enabled: xs:boolean
          instance_type.origin: xs:string
          instance_type.high_availability.priority: xs:int
          instance_type.console.enabled: xs:boolean
          instance_type.description: xs:string
          instance_type.os.boot--COLLECTION: {boot.dev: 'xs:string'}
          instance_type.cpu.topology.sockets: xs:int
          instance_type.cpu_shares: xs:int
          instance_type.cpu.architecture: xs:string
          instance_type.display.type: xs:string
          instance_type.display.monitors: xs:int
          instance_typeay.single_qxl_pci: xs:boolean
          instance_type.display.smartcard_enabled: xs:boolean
          instance_type.usb.enabled: xs:boolean
          instance_type.usb.type: xs:string
          instance_type.migration_downtime: xs:int
          instance_type.virtio_scsi.enabled: xs:boolean
          instance_type.soundcard_enabled: xs:boolean
        description: add a new instance type to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}

- name: /clusters/{cluster:id}/affinitygroups|rel=get
  description: get the list of affinity groups in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}|rel=get
  description: get the details of the specified affinity group in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}|rel=delete
  description: delete the specified affinity groups in the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}|rel=update
  description: update the specified affinity group in the cluster
  request:
    body:
      parameterType: affinitygroup
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {affinitygroup.name: 'xs:string', affinitygroup.positive: 'xs:boolean', affinitygroup.enforcing: 'xs:boolean'}
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
- name: /clusters/{cluster:id}/affinitygroups|rel=add
  description: add a new affinity group to the cluster
  request:
    body:
      parameterType: affinitygroup
      signatures:
      - mandatoryArguments: {affinitygroup.name: 'xs:string', affinitygroup.positive: 'xs:boolean', affinitygroup.enforcing: 'xs:boolean'}
        optionalArguments: {}
        description: add a new affinity group to the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}/vms|rel=get
  description: get the list of vms per affinity group
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}/vms/{vm:id}|rel=delete
  description: remove the specified vm from the affinity groups
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/affinitygroups/{affinitygroup:id}/vms|rel=add
  description: add a vm to the specified affinity group
  request:
    body:
      parameterType: VM
      signatures:
      - mandatoryArguments: {vm.id|name: 'xs:string'}
        optionalArguments: {}
        description: add a vm to affinity group
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
- name: /hosts/{host:id}/numanodes|rel=get
  description: get the list of NUMA nodes for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/numanodes/{numanode:id}|rel=get
  description: get the details of the specified NUMA node for the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /hosts/{host:id}/numanodes/{numanode:id}/statistics|rel=get
  description: get the statistics for the specified NUMA node of the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /hosts/{host:id}/numanodes/{numanode:id}/statistics/{statistic:id}|rel=get
  description: get the details of the specified statistics for the specified NUMA node of the host
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/numanodes|rel=get
  description: get the list of virtual NUMA nodes for the vm
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /vms/{vm:id}/numanodes/{numanode:id}|rel=get
  description: get the details of the specified virtual NUMA node for the vm
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /vms/{vm:id}/numanodes/{numanode:id}|rel=delete
  description: delete the specified virtual NUMA node for the vm
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/numanodes/{numanode:id}|rel=update
  description: update the specified virtual NUMA node for the vm
  request:
    body:
      parameterType: VirtualNumaNode
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          vm_numa_node.index: xs:int
          vm_numa_node.memory: xs:string
          vm_numa_node.cpu.cores.core--COLLECTION: {core.index: 'xs:int'}
          vm_numa_node.numa_node_pins.numa_node_pin--COLLECTION: {numa_node_pin.index: 'xs:int'}
        description: update the specified virtual NUMA node for the vm
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /vms/{vm:id}/numanodes|rel=add
  description: add a new virtual NUMA node for the vm
  request:
    body:
      parameterType: VirtualNumaNode
      signatures:
      - mandatoryArguments: {vm_numa_node.index: 'xs:int', vm_numa_node.memory: 'xs:string', vm_numa_node.cpu.cores.core--COLLECTION: {core.index: 'xs:int'}}
        optionalArguments:
          vm_numa_node.numa_node_pins.numa_node_pin--COLLECTION: {numa_node_pin.index: 'xs:int'}
        description: add a new virtual NUMA node for the vm
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicyunits|rel=get
  description: get a list of scheduling policy units in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicyunits/{schedulingpolicyunit:id}|rel=get
  description: get the details of the specified scheduling policy unit in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicyunits/{schedulingpolicyunit:id}|rel=delete
  description: delete the specified disabled and external scheduling policy unit in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}|rel=update
  description: update the specified user defined scheduling policy in the system
  request:
    body:
      parameterType: SchedulingPolicy
      signatures:
      - mandatoryArguments: {}
        optionalArguments:
          schedulingpolicy.name: xs:string
          schedulingpolicy.description: xs:string
          schedulingpolicy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'}
        description: update the specified user defined scheduling policy in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies|rel=get
  description: get a list of scheduling policies in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}|rel=get
  description: get the details of the specified scheduling policy in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}|rel=delete
  description: delete the specified user defined scheduling policy in the system
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        description: delete the specified user defined scheduling policy in the system
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies|rel=add
  description: add a new scheduling policy to the system
  request:
    body:
      parameterType: SchedulingPolicy
      signatures:
      - mandatoryArguments: {schedulingpolicy.name: 'xs:string'}
        optionalArguments:
          schedulingpolicy.description: xs:string
          schedulingpolicy.properties.property--COLLECTION: {property.name: 'xs:string', property.value: 'xs:string'}
        description: add a new scheduling policy to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/filters|rel=get
  description: get a list of specified scheduling policy filters
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/filters/{filter:id}|rel=get
  description: get a specified scheduling policy filter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/filters/{filter:id}|rel=delete
  description: delete a filter from specified user defined scheduling policy
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        description: delete the specified scheduling policy in the system
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/filters|rel=add
  description: add a filter to a specified user defined scheduling policy
  request:
    body:
      parameterType: Filter
      signatures:
      - mandatoryArguments: {filter.scheduling_policy_unit.id: 'xs:string'}
        optionalArguments:
          filter.scheduling_policy_unit.position: 'xs:int'
        description: add a new scheduling policy to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/weights|rel=get
  description: get a list of specified scheduling policy weights
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/weights/{weight:id}|rel=get
  description: get a specified scheduling policy weight
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/weights/{weight:id}|rel=delete
  description: delete a weight from specified user defined scheduling policy
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        description: delete a weight from specified user defined scheduling policy
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/weights|rel=add
  description: add a weight to a specified user defined scheduling policy
  request:
    body:
      parameterType: Weight
      signatures:
      - mandatoryArguments: {weight.scheduling_policy_unit.id: 'xs:string'}
        optionalArguments:
          weight.scheduling_policy_unit.factor: 'xs:int'
        description: add a weight to a specified user defined scheduling policy
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/balances|rel=get
  description: get a list of specified scheduling policy balance modules
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/balances/{balance:id}|rel=get
  description: get a specified scheduling policy balance module
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      case_sensitive: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers:
      Filter: {value: true|false, required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/balances/{balance:id}|rel=delete
  description: delete a balance module from specified user defined scheduling policy
  request:
    body:
      required: false
      parameterType: Action
      signatures:
      - mandatoryArguments: {}
        description: delete a balance module from specified user defined scheduling policy
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /schedulingpolicies/{schedulingpolicy:id}/balances|rel=add
  description: add a balance module to a specified user defined scheduling policy
  request:
    body:
      parameterType: Balance
      signatures:
      - mandatoryArguments: {balance.scheduling_policy_unit.id: 'xs:string'}
        description: add a balance module to a specified user defined scheduling policy
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /datacenters/{datacenter:id}/iscsibonds|rel=get
  description: get all iSCSI Bonds for the specified datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds|rel=add
  description: add a new iSCSI Bond to the specified datacenter
  request:
    body:
      parameterType: IscsiBond
      signatures:
      - mandatoryArguments: {iscsibond.name: 'xs:string'}
        optionalArguments: {}
        description: add a new iSCSI Bond to the datacenter
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}|rel=update
  description: update the specified iSCSI Bond
  request:
    body:
     parameterType: IscsiBond
     signatures:
     - mandatoryArguments: {}
       optionalArguments: {}
       description: update the specified iSCSI Bond
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}|rel=delete
  description: remove the specified iSCSI Bond from the datacenter
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/networks|rel=delete
  description: remove the specified network from the iSCSI Bond
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/networks|rel=get
  description: gets the specified iSCSI Bond with the networks
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/networks|rel=add
  description: specify list of networks contained in the iSCSI Bond
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/storagedomains|rel=delete
  description: remove the specified storagedomain from the iSCSI Bond
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/storagedomains|rel=get
  description: gets the specified iSCSI Bond with the storagedomains
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /datacenters/{datacenter:id}/iscsibonds/{iscsibond:id}/storagedomains|rel=add
  description: specify list of the storagedomains contained in the iSCSI Bond
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /diskprofiles|rel=get
  description: get the list of all disk profiles in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /diskprofiles/{diskprofile:id}|rel=get
  description: get the details of the specified disk profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /diskprofiles/{diskprofile:id}|rel=delete
  description: delete the specified disk profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /diskprofiles/{diskprofile:id}|rel=update
  description: update the specified disk profile in the system
  request:
    body:
      parameterType: DiskProfile
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {diskprofile.name: 'xs:string',
                           diskprofile.description: 'xs:string',
                           diskprofile.qos.id: 'xs:string'}
        description: update the specified disk profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /diskprofiles|rel=add
  description: add a new disk profile to the system
  request:
    body:
      parameterType: DiskProfile
      signatures:
      - mandatoryArguments: {diskprofile.storagedomain.id: 'xs:string', diskprofile.name: 'xs:string'}
        optionalArguments: {diskprofile.description: 'xs:string',
                           diskprofile.qos.id: 'xs:string'}
        description: add a new disk profile to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /diskprofiles/{diskprofile:id}/permissions|rel=get
  description: get the list of all permissions on the disk profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /diskprofiles/{diskprofile:id}/permissions/{permission:id}|rel=get
  description: get details of the specified permission on the disk profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /diskprofiles/{diskprofile:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission for the disk profile
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /diskprofiles/{diskprofile:id}/permissions|rel=add
  description: add a new permission on the disk profile in the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the disk profile in the system
      - mandatoryArguments: {permission.group.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the disk profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/diskprofiles|rel=get
  description: get the list of all disk profiles for the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /storagedomains/{storagedomain:id}/diskprofiles/{diskprofile:id}|rel=get
  description: get the details of the specified disk profile for the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /storagedomains/{storagedomain:id}/diskprofiles/{diskprofile:id}|rel=delete
  description: delete the specified disk profile for the storage domain
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /storagedomains/{storagedomain:id}/diskprofiles|rel=add
  description: add a new disk profile for the storage domain
  request:
    body:
      parameterType: DiskProfile
      signatures:
      - mandatoryArguments: {diskprofile.name: 'xs:string'}
        optionalArguments: {diskprofile.description: 'xs:string',
                           diskprofile.qos.id: 'xs:string'}
        description: add a new disk profile for the storage domain
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /cpuprofiles|rel=get
  description: get the list of all cpu profiles in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /cpuprofiles/{cpuprofile:id}|rel=get
  description: get the details of the specified cpu profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /cpuprofiles/{cpuprofile:id}|rel=delete
  description: delete the specified cpu profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /cpuprofiles/{cpuprofile:id}|rel=update
  description: update the specified cpu profile in the system
  request:
    body:
      parameterType: CpuProfile
      signatures:
      - mandatoryArguments: {}
        optionalArguments: {cpuprofile.name: 'xs:string',
                           cpuprofile.description: 'xs:string',
                           cpuprofile.qos.id: 'xs:string'}
        description: update the specified cpu profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Correlation-Id: {value: 'any string', required: false}
- name: /cpuprofiles|rel=add
  description: add a new cpu profile to the system
  request:
    body:
      parameterType: CpuProfile
      signatures:
      - mandatoryArguments: {cpuprofile.cluster.id: 'xs:string', cpuprofile.name: 'xs:string'}
        optionalArguments: {cpuprofile.description: 'xs:string',
                           cpuprofile.qos.id: 'xs:string'}
        description: add a new cpu profile to the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /cpuprofiles/{cpuprofile:id}/permissions|rel=get
  description: get the list of all permissions on the cpu profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /cpuprofiles/{cpuprofile:id}/permissions/{permission:id}|rel=get
  description: get details of the specified permission on the cpu profile in the system
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /cpuprofiles/{cpuprofile:id}/permissions/{permission:id}|rel=delete
  description: delete the specified permission for the cpu profile
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /cpuprofiles/{cpuprofile:id}/permissions|rel=add
  description: add a new permission on the cpu profile in the system
  request:
    body:
      parameterType: Permission
      signatures:
      - mandatoryArguments: {permission.user.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new user level permission on the cpu profile in the system
      - mandatoryArguments: {permission.group.id: 'xs:string', permission.role.id: 'xs:string'}
        optionalArguments: {}
        description: add a new group level permission on the cpu profile in the system
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/cpuprofiles|rel=get
  description: get the list of all cpu profiles for the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      max: {context: matrix, type: 'xs:int', value: 'max results', required: false}
    headers: {}
- name: /clusters/{cluster:id}/cpuprofiles/{cpuprofile:id}|rel=get
  description: get the details of the specified cpu profile for the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams: {}
    headers: {}
- name: /clusters/{cluster:id}/cpuprofiles/{cpuprofile:id}|rel=delete
  description: delete the specified cpu profile for the cluster
  request:
    body:
      parameterType: null
      signatures: []
    urlparams:
      async: {context: matrix, type: 'xs:boolean', value: true|false, required: false}
    headers:
      Correlation-Id: {value: 'any string', required: false}
- name: /clusters/{cluster:id}/cpuprofiles|rel=add
  description: add a new cpu profile for the cluster
  request:
    body:
      parameterType: CpuProfile
      signatures:
      - mandatoryArguments: {cpuprofile.name: 'xs:string'}
        optionalArguments: {cpuprofile.description: 'xs:string',
                           cpuprofile.qos.id: 'xs:string'}
        description: add a new cpu profile for the cluster
    urlparams: {}
    headers:
      Content-Type: {value: application/xml|json, required: true}
      Expect: {value: 201-created, required: false}
      Correlation-Id: {value: 'any string', required: false}
